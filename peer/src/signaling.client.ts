// @generated by protobuf-ts 2.9.4 with parameter client_generic
// @generated from protobuf file "signaling.proto" (package "pulsebeam.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Signaling } from "./signaling.ts";
import type { AnalyticsReportResp } from "./signaling.ts";
import type { AnalyticsReportReq } from "./signaling.ts";
import type { RecvResp } from "./signaling.ts";
import type { RecvReq } from "./signaling.ts";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SendResp } from "./signaling.ts";
import type { SendReq } from "./signaling.ts";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PrepareResp } from "./signaling.ts";
import type { PrepareReq } from "./signaling.ts";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pulsebeam.v1.Signaling
 */
export interface ISignalingClient {
    /**
     * @generated from protobuf rpc: Prepare(pulsebeam.v1.PrepareReq) returns (pulsebeam.v1.PrepareResp);
     */
    prepare(input: PrepareReq, options?: RpcOptions): UnaryCall<PrepareReq, PrepareResp>;
    /**
     * @generated from protobuf rpc: Send(pulsebeam.v1.SendReq) returns (pulsebeam.v1.SendResp);
     */
    send(input: SendReq, options?: RpcOptions): UnaryCall<SendReq, SendResp>;
    /**
     * @generated from protobuf rpc: Recv(pulsebeam.v1.RecvReq) returns (stream pulsebeam.v1.RecvResp);
     */
    recv(input: RecvReq, options?: RpcOptions): ServerStreamingCall<RecvReq, RecvResp>;
    /**
     * @generated from protobuf rpc: AnalyticsReport(pulsebeam.v1.AnalyticsReportReq) returns (pulsebeam.v1.AnalyticsReportResp);
     */
    analyticsReport(input: AnalyticsReportReq, options?: RpcOptions): UnaryCall<AnalyticsReportReq, AnalyticsReportResp>;
}
/**
 * @generated from protobuf service pulsebeam.v1.Signaling
 */
export class SignalingClient implements ISignalingClient, ServiceInfo {
    typeName = Signaling.typeName;
    methods = Signaling.methods;
    options = Signaling.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Prepare(pulsebeam.v1.PrepareReq) returns (pulsebeam.v1.PrepareResp);
     */
    prepare(input: PrepareReq, options?: RpcOptions): UnaryCall<PrepareReq, PrepareResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PrepareReq, PrepareResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Send(pulsebeam.v1.SendReq) returns (pulsebeam.v1.SendResp);
     */
    send(input: SendReq, options?: RpcOptions): UnaryCall<SendReq, SendResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendReq, SendResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Recv(pulsebeam.v1.RecvReq) returns (stream pulsebeam.v1.RecvResp);
     */
    recv(input: RecvReq, options?: RpcOptions): ServerStreamingCall<RecvReq, RecvResp> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecvReq, RecvResp>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AnalyticsReport(pulsebeam.v1.AnalyticsReportReq) returns (pulsebeam.v1.AnalyticsReportResp);
     */
    analyticsReport(input: AnalyticsReportReq, options?: RpcOptions): UnaryCall<AnalyticsReportReq, AnalyticsReportResp> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<AnalyticsReportReq, AnalyticsReportResp>("unary", this._transport, method, opt, input);
    }
}
