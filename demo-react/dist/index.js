(()=>{var Hd=Object.create;var Go=Object.defineProperty;var Wd=Object.getOwnPropertyDescriptor;var Jd=Object.getOwnPropertyNames;var Qd=Object.getPrototypeOf,Xd=Object.prototype.hasOwnProperty;var pt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Kr=(e,t)=>{for(var n in t)Go(e,n,{get:t[n],enumerable:!0})},Yd=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Jd(t))!Xd.call(e,i)&&i!==n&&Go(e,i,{get:()=>t[i],enumerable:!(r=Wd(t,i))||r.enumerable});return e};var tn=(e,t,n)=>(n=e!=null?Hd(Qd(e)):{},Yd(t||!e||!e.__esModule?Go(n,"default",{value:e,enumerable:!0}):n,e));var Ou=pt(N=>{"use strict";var jn=Symbol.for("react.element"),qd=Symbol.for("react.portal"),Zd=Symbol.for("react.fragment"),em=Symbol.for("react.strict_mode"),tm=Symbol.for("react.profiler"),nm=Symbol.for("react.provider"),rm=Symbol.for("react.context"),im=Symbol.for("react.forward_ref"),om=Symbol.for("react.suspense"),sm=Symbol.for("react.memo"),am=Symbol.for("react.lazy"),Cu=Symbol.iterator;function lm(e){return e===null||typeof e!="object"?null:(e=Cu&&e[Cu]||e["@@iterator"],typeof e=="function"?e:null)}var Tu={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Eu=Object.assign,Ru={};function nn(e,t,n){this.props=e,this.context=t,this.refs=Ru,this.updater=n||Tu}nn.prototype.isReactComponent={};nn.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};nn.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Pu(){}Pu.prototype=nn.prototype;function Ho(e,t,n){this.props=e,this.context=t,this.refs=Ru,this.updater=n||Tu}var Wo=Ho.prototype=new Pu;Wo.constructor=Ho;Eu(Wo,nn.prototype);Wo.isPureReactComponent=!0;var ku=Array.isArray,Iu=Object.prototype.hasOwnProperty,Jo={current:null},_u={key:!0,ref:!0,__self:!0,__source:!0};function Nu(e,t,n){var r,i={},o=null,s=null;if(t!=null)for(r in t.ref!==void 0&&(s=t.ref),t.key!==void 0&&(o=""+t.key),t)Iu.call(t,r)&&!_u.hasOwnProperty(r)&&(i[r]=t[r]);var a=arguments.length-2;if(a===1)i.children=n;else if(1<a){for(var l=Array(a),u=0;u<a;u++)l[u]=arguments[u+2];i.children=l}if(e&&e.defaultProps)for(r in a=e.defaultProps,a)i[r]===void 0&&(i[r]=a[r]);return{$$typeof:jn,type:e,key:o,ref:s,props:i,_owner:Jo.current}}function um(e,t){return{$$typeof:jn,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Qo(e){return typeof e=="object"&&e!==null&&e.$$typeof===jn}function cm(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var xu=/\/+/g;function $o(e,t){return typeof e=="object"&&e!==null&&e.key!=null?cm(""+e.key):t.toString(36)}function $r(e,t,n,r,i){var o=typeof e;(o==="undefined"||o==="boolean")&&(e=null);var s=!1;if(e===null)s=!0;else switch(o){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case jn:case qd:s=!0}}if(s)return s=e,i=i(s),e=r===""?"."+$o(s,0):r,ku(i)?(n="",e!=null&&(n=e.replace(xu,"$&/")+"/"),$r(i,t,n,"",function(u){return u})):i!=null&&(Qo(i)&&(i=um(i,n+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(xu,"$&/")+"/")+e)),t.push(i)),1;if(s=0,r=r===""?".":r+":",ku(e))for(var a=0;a<e.length;a++){o=e[a];var l=r+$o(o,a);s+=$r(o,t,n,l,i)}else if(l=lm(e),typeof l=="function")for(e=l.call(e),a=0;!(o=e.next()).done;)o=o.value,l=r+$o(o,a++),s+=$r(o,t,n,l,i);else if(o==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function Gr(e,t,n){if(e==null)return e;var r=[],i=0;return $r(e,r,"","",function(o){return t.call(n,o,i++)}),r}function fm(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var pe={current:null},Hr={transition:null},pm={ReactCurrentDispatcher:pe,ReactCurrentBatchConfig:Hr,ReactCurrentOwner:Jo};function wu(){throw Error("act(...) is not supported in production builds of React.")}N.Children={map:Gr,forEach:function(e,t,n){Gr(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return Gr(e,function(){t++}),t},toArray:function(e){return Gr(e,function(t){return t})||[]},only:function(e){if(!Qo(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};N.Component=nn;N.Fragment=Zd;N.Profiler=tm;N.PureComponent=Ho;N.StrictMode=em;N.Suspense=om;N.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=pm;N.act=wu;N.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=Eu({},e.props),i=e.key,o=e.ref,s=e._owner;if(t!=null){if(t.ref!==void 0&&(o=t.ref,s=Jo.current),t.key!==void 0&&(i=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(l in t)Iu.call(t,l)&&!_u.hasOwnProperty(l)&&(r[l]=t[l]===void 0&&a!==void 0?a[l]:t[l])}var l=arguments.length-2;if(l===1)r.children=n;else if(1<l){a=Array(l);for(var u=0;u<l;u++)a[u]=arguments[u+2];r.children=a}return{$$typeof:jn,type:e.type,key:i,ref:o,props:r,_owner:s}};N.createContext=function(e){return e={$$typeof:rm,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:nm,_context:e},e.Consumer=e};N.createElement=Nu;N.createFactory=function(e){var t=Nu.bind(null,e);return t.type=e,t};N.createRef=function(){return{current:null}};N.forwardRef=function(e){return{$$typeof:im,render:e}};N.isValidElement=Qo;N.lazy=function(e){return{$$typeof:am,_payload:{_status:-1,_result:e},_init:fm}};N.memo=function(e,t){return{$$typeof:sm,type:e,compare:t===void 0?null:t}};N.startTransition=function(e){var t=Hr.transition;Hr.transition={};try{e()}finally{Hr.transition=t}};N.unstable_act=wu;N.useCallback=function(e,t){return pe.current.useCallback(e,t)};N.useContext=function(e){return pe.current.useContext(e)};N.useDebugValue=function(){};N.useDeferredValue=function(e){return pe.current.useDeferredValue(e)};N.useEffect=function(e,t){return pe.current.useEffect(e,t)};N.useId=function(){return pe.current.useId()};N.useImperativeHandle=function(e,t,n){return pe.current.useImperativeHandle(e,t,n)};N.useInsertionEffect=function(e,t){return pe.current.useInsertionEffect(e,t)};N.useLayoutEffect=function(e,t){return pe.current.useLayoutEffect(e,t)};N.useMemo=function(e,t){return pe.current.useMemo(e,t)};N.useReducer=function(e,t,n){return pe.current.useReducer(e,t,n)};N.useRef=function(e){return pe.current.useRef(e)};N.useState=function(e){return pe.current.useState(e)};N.useSyncExternalStore=function(e,t,n){return pe.current.useSyncExternalStore(e,t,n)};N.useTransition=function(){return pe.current.useTransition()};N.version="18.3.1"});var zn=pt((ty,Lu)=>{"use strict";Lu.exports=Ou()});var ea=pt((p0,Zs)=>{"use strict";var C={};C.generateIdentifier=function(){return Math.random().toString(36).substring(2,12)};C.localCName=C.generateIdentifier();C.splitLines=function(e){return e.trim().split(`
`).map(t=>t.trim())};C.splitSections=function(e){return e.split(`
m=`).map((n,r)=>(r>0?"m="+n:n).trim()+`\r
`)};C.getDescription=function(e){let t=C.splitSections(e);return t&&t[0]};C.getMediaSections=function(e){let t=C.splitSections(e);return t.shift(),t};C.matchPrefix=function(e,t){return C.splitLines(e).filter(n=>n.indexOf(t)===0)};C.parseCandidate=function(e){let t;e.indexOf("a=candidate:")===0?t=e.substring(12).split(" "):t=e.substring(10).split(" ");let n={foundation:t[0],component:{1:"rtp",2:"rtcp"}[t[1]]||t[1],protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]};for(let r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]===void 0&&(n[t[r]]=t[r+1]);break}return n};C.writeCandidate=function(e){let t=[];t.push(e.foundation);let n=e.component;n==="rtp"?t.push(1):n==="rtcp"?t.push(2):t.push(n),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);let r=e.type;return t.push("typ"),t.push(r),r!=="host"&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&e.protocol.toLowerCase()==="tcp"&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")};C.parseIceOptions=function(e){return e.substring(14).split(" ")};C.parseRtpMap=function(e){let t=e.substring(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=t.length===3?parseInt(t[2],10):1,n.numChannels=n.channels,n};C.writeRtpMap=function(e){let t=e.payloadType;e.preferredPayloadType!==void 0&&(t=e.preferredPayloadType);let n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(n!==1?"/"+n:"")+`\r
`};C.parseExtmap=function(e){let t=e.substring(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1],attributes:t.slice(2).join(" ")}};C.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&e.direction!=="sendrecv"?"/"+e.direction:"")+" "+e.uri+(e.attributes?" "+e.attributes:"")+`\r
`};C.parseFmtp=function(e){let t={},n,r=e.substring(e.indexOf(" ")+1).split(";");for(let i=0;i<r.length;i++)n=r[i].trim().split("="),t[n[0].trim()]=n[1];return t};C.writeFmtp=function(e){let t="",n=e.payloadType;if(e.preferredPayloadType!==void 0&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){let r=[];Object.keys(e.parameters).forEach(i=>{e.parameters[i]!==void 0?r.push(i+"="+e.parameters[i]):r.push(i)}),t+="a=fmtp:"+n+" "+r.join(";")+`\r
`}return t};C.parseRtcpFb=function(e){let t=e.substring(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}};C.writeRtcpFb=function(e){let t="",n=e.payloadType;return e.preferredPayloadType!==void 0&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach(r=>{t+="a=rtcp-fb:"+n+" "+r.type+(r.parameter&&r.parameter.length?" "+r.parameter:"")+`\r
`}),t};C.parseSsrcMedia=function(e){let t=e.indexOf(" "),n={ssrc:parseInt(e.substring(7,t),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substring(t+1,r),n.value=e.substring(r+1)):n.attribute=e.substring(t+1),n};C.parseSsrcGroup=function(e){let t=e.substring(13).split(" ");return{semantics:t.shift(),ssrcs:t.map(n=>parseInt(n,10))}};C.getMid=function(e){let t=C.matchPrefix(e,"a=mid:")[0];if(t)return t.substring(6)};C.parseFingerprint=function(e){let t=e.substring(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1].toUpperCase()}};C.getDtlsParameters=function(e,t){return{role:"auto",fingerprints:C.matchPrefix(e+t,"a=fingerprint:").map(C.parseFingerprint)}};C.writeDtlsParameters=function(e,t){let n="a=setup:"+t+`\r
`;return e.fingerprints.forEach(r=>{n+="a=fingerprint:"+r.algorithm+" "+r.value+`\r
`}),n};C.parseCryptoLine=function(e){let t=e.substring(9).split(" ");return{tag:parseInt(t[0],10),cryptoSuite:t[1],keyParams:t[2],sessionParams:t.slice(3)}};C.writeCryptoLine=function(e){return"a=crypto:"+e.tag+" "+e.cryptoSuite+" "+(typeof e.keyParams=="object"?C.writeCryptoKeyParams(e.keyParams):e.keyParams)+(e.sessionParams?" "+e.sessionParams.join(" "):"")+`\r
`};C.parseCryptoKeyParams=function(e){if(e.indexOf("inline:")!==0)return null;let t=e.substring(7).split("|");return{keyMethod:"inline",keySalt:t[0],lifeTime:t[1],mkiValue:t[2]?t[2].split(":")[0]:void 0,mkiLength:t[2]?t[2].split(":")[1]:void 0}};C.writeCryptoKeyParams=function(e){return e.keyMethod+":"+e.keySalt+(e.lifeTime?"|"+e.lifeTime:"")+(e.mkiValue&&e.mkiLength?"|"+e.mkiValue+":"+e.mkiLength:"")};C.getCryptoParameters=function(e,t){return C.matchPrefix(e+t,"a=crypto:").map(C.parseCryptoLine)};C.getIceParameters=function(e,t){let n=C.matchPrefix(e+t,"a=ice-ufrag:")[0],r=C.matchPrefix(e+t,"a=ice-pwd:")[0];return n&&r?{usernameFragment:n.substring(12),password:r.substring(10)}:null};C.writeIceParameters=function(e){let t="a=ice-ufrag:"+e.usernameFragment+`\r
a=ice-pwd:`+e.password+`\r
`;return e.iceLite&&(t+=`a=ice-lite\r
`),t};C.parseRtpParameters=function(e){let t={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},r=C.splitLines(e)[0].split(" ");t.profile=r[2];for(let o=3;o<r.length;o++){let s=r[o],a=C.matchPrefix(e,"a=rtpmap:"+s+" ")[0];if(a){let l=C.parseRtpMap(a),u=C.matchPrefix(e,"a=fmtp:"+s+" ");switch(l.parameters=u.length?C.parseFmtp(u[0]):{},l.rtcpFeedback=C.matchPrefix(e,"a=rtcp-fb:"+s+" ").map(C.parseRtcpFb),t.codecs.push(l),l.name.toUpperCase()){case"RED":case"ULPFEC":t.fecMechanisms.push(l.name.toUpperCase());break;default:break}}}C.matchPrefix(e,"a=extmap:").forEach(o=>{t.headerExtensions.push(C.parseExtmap(o))});let i=C.matchPrefix(e,"a=rtcp-fb:* ").map(C.parseRtcpFb);return t.codecs.forEach(o=>{i.forEach(s=>{o.rtcpFeedback.find(l=>l.type===s.type&&l.parameter===s.parameter)||o.rtcpFeedback.push(s)})}),t};C.writeRtpDescription=function(e,t){let n="";n+="m="+e+" ",n+=t.codecs.length>0?"9":"0",n+=" "+(t.profile||"UDP/TLS/RTP/SAVPF")+" ",n+=t.codecs.map(i=>i.preferredPayloadType!==void 0?i.preferredPayloadType:i.payloadType).join(" ")+`\r
`,n+=`c=IN IP4 0.0.0.0\r
`,n+=`a=rtcp:9 IN IP4 0.0.0.0\r
`,t.codecs.forEach(i=>{n+=C.writeRtpMap(i),n+=C.writeFmtp(i),n+=C.writeRtcpFb(i)});let r=0;return t.codecs.forEach(i=>{i.maxptime>r&&(r=i.maxptime)}),r>0&&(n+="a=maxptime:"+r+`\r
`),t.headerExtensions&&t.headerExtensions.forEach(i=>{n+=C.writeExtmap(i)}),n};C.parseRtpEncodingParameters=function(e){let t=[],n=C.parseRtpParameters(e),r=n.fecMechanisms.indexOf("RED")!==-1,i=n.fecMechanisms.indexOf("ULPFEC")!==-1,o=C.matchPrefix(e,"a=ssrc:").map(c=>C.parseSsrcMedia(c)).filter(c=>c.attribute==="cname"),s=o.length>0&&o[0].ssrc,a,l=C.matchPrefix(e,"a=ssrc-group:FID").map(c=>c.substring(17).split(" ").map(p=>parseInt(p,10)));l.length>0&&l[0].length>1&&l[0][0]===s&&(a=l[0][1]),n.codecs.forEach(c=>{if(c.name.toUpperCase()==="RTX"&&c.parameters.apt){let f={ssrc:s,codecPayloadType:parseInt(c.parameters.apt,10)};s&&a&&(f.rtx={ssrc:a}),t.push(f),r&&(f=JSON.parse(JSON.stringify(f)),f.fec={ssrc:s,mechanism:i?"red+ulpfec":"red"},t.push(f))}}),t.length===0&&s&&t.push({ssrc:s});let u=C.matchPrefix(e,"b=");return u.length&&(u[0].indexOf("b=TIAS:")===0?u=parseInt(u[0].substring(7),10):u[0].indexOf("b=AS:")===0?u=parseInt(u[0].substring(5),10)*1e3*.95-50*40*8:u=void 0,t.forEach(c=>{c.maxBitrate=u})),t};C.parseRtcpParameters=function(e){let t={},n=C.matchPrefix(e,"a=ssrc:").map(o=>C.parseSsrcMedia(o)).filter(o=>o.attribute==="cname")[0];n&&(t.cname=n.value,t.ssrc=n.ssrc);let r=C.matchPrefix(e,"a=rtcp-rsize");t.reducedSize=r.length>0,t.compound=r.length===0;let i=C.matchPrefix(e,"a=rtcp-mux");return t.mux=i.length>0,t};C.writeRtcpParameters=function(e){let t="";return e.reducedSize&&(t+=`a=rtcp-rsize\r
`),e.mux&&(t+=`a=rtcp-mux\r
`),e.ssrc!==void 0&&e.cname&&(t+="a=ssrc:"+e.ssrc+" cname:"+e.cname+`\r
`),t};C.parseMsid=function(e){let t,n=C.matchPrefix(e,"a=msid:");if(n.length===1)return t=n[0].substring(7).split(" "),{stream:t[0],track:t[1]};let r=C.matchPrefix(e,"a=ssrc:").map(i=>C.parseSsrcMedia(i)).filter(i=>i.attribute==="msid");if(r.length>0)return t=r[0].value.split(" "),{stream:t[0],track:t[1]}};C.parseSctpDescription=function(e){let t=C.parseMLine(e),n=C.matchPrefix(e,"a=max-message-size:"),r;n.length>0&&(r=parseInt(n[0].substring(19),10)),isNaN(r)&&(r=65536);let i=C.matchPrefix(e,"a=sctp-port:");if(i.length>0)return{port:parseInt(i[0].substring(12),10),protocol:t.fmt,maxMessageSize:r};let o=C.matchPrefix(e,"a=sctpmap:");if(o.length>0){let s=o[0].substring(10).split(" ");return{port:parseInt(s[0],10),protocol:s[1],maxMessageSize:r}}};C.writeSctpDescription=function(e,t){let n=[];return e.protocol!=="DTLS/SCTP"?n=["m="+e.kind+" 9 "+e.protocol+" "+t.protocol+`\r
`,`c=IN IP4 0.0.0.0\r
`,"a=sctp-port:"+t.port+`\r
`]:n=["m="+e.kind+" 9 "+e.protocol+" "+t.port+`\r
`,`c=IN IP4 0.0.0.0\r
`,"a=sctpmap:"+t.port+" "+t.protocol+` 65535\r
`],t.maxMessageSize!==void 0&&n.push("a=max-message-size:"+t.maxMessageSize+`\r
`),n.join("")};C.generateSessionId=function(){return Math.random().toString().substr(2,22)};C.writeSessionBoilerplate=function(e,t,n){let r,i=t!==void 0?t:2;return e?r=e:r=C.generateSessionId(),`v=0\r
o=`+(n||"thisisadapterortc")+" "+r+" "+i+` IN IP4 127.0.0.1\r
s=-\r
t=0 0\r
`};C.getDirection=function(e,t){let n=C.splitLines(e);for(let r=0;r<n.length;r++)switch(n[r]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return n[r].substring(2);default:}return t?C.getDirection(t):"sendrecv"};C.getKind=function(e){return C.splitLines(e)[0].split(" ")[0].substring(2)};C.isRejected=function(e){return e.split(" ",2)[1]==="0"};C.parseMLine=function(e){let n=C.splitLines(e)[0].substring(2).split(" ");return{kind:n[0],port:parseInt(n[1],10),protocol:n[2],fmt:n.slice(3).join(" ")}};C.parseOLine=function(e){let n=C.matchPrefix(e,"o=")[0].substring(2).split(" ");return{username:n[0],sessionId:n[1],sessionVersion:parseInt(n[2],10),netType:n[3],addressType:n[4],address:n[5]}};C.isValidSDP=function(e){if(typeof e!="string"||e.length===0)return!1;let t=C.splitLines(e);for(let n=0;n<t.length;n++)if(t[n].length<2||t[n].charAt(1)!=="=")return!1;return!0};typeof Zs=="object"&&(Zs.exports=C)});var wc=pt(U=>{"use strict";function ua(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(0<Ei(i,t))e[r]=t,e[n]=i,n=r;else break e}}function Ue(e){return e.length===0?null:e[0]}function Pi(e){if(e.length===0)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,o=i>>>1;r<o;){var s=2*(r+1)-1,a=e[s],l=s+1,u=e[l];if(0>Ei(a,n))l<i&&0>Ei(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[s]=n,r=s);else if(l<i&&0>Ei(u,n))e[r]=u,e[l]=n,r=l;else break e}}return t}function Ei(e,t){var n=e.sortIndex-t.sortIndex;return n!==0?n:e.id-t.id}typeof performance=="object"&&typeof performance.now=="function"?(kc=performance,U.unstable_now=function(){return kc.now()}):(sa=Date,xc=sa.now(),U.unstable_now=function(){return sa.now()-xc});var kc,sa,xc,He=[],gt=[],Xm=1,we=null,ae=3,Ii=!1,bt=!1,Zn=!1,Rc=typeof setTimeout=="function"?setTimeout:null,Pc=typeof clearTimeout=="function"?clearTimeout:null,Tc=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function ca(e){for(var t=Ue(gt);t!==null;){if(t.callback===null)Pi(gt);else if(t.startTime<=e)Pi(gt),t.sortIndex=t.expirationTime,ua(He,t);else break;t=Ue(gt)}}function fa(e){if(Zn=!1,ca(e),!bt)if(Ue(He)!==null)bt=!0,da(pa);else{var t=Ue(gt);t!==null&&ma(fa,t.startTime-e)}}function pa(e,t){bt=!1,Zn&&(Zn=!1,Pc(er),er=-1),Ii=!0;var n=ae;try{for(ca(t),we=Ue(He);we!==null&&(!(we.expirationTime>t)||e&&!Nc());){var r=we.callback;if(typeof r=="function"){we.callback=null,ae=we.priorityLevel;var i=r(we.expirationTime<=t);t=U.unstable_now(),typeof i=="function"?we.callback=i:we===Ue(He)&&Pi(He),ca(t)}else Pi(He);we=Ue(He)}if(we!==null)var o=!0;else{var s=Ue(gt);s!==null&&ma(fa,s.startTime-t),o=!1}return o}finally{we=null,ae=n,Ii=!1}}var _i=!1,Ri=null,er=-1,Ic=5,_c=-1;function Nc(){return!(U.unstable_now()-_c<Ic)}function aa(){if(Ri!==null){var e=U.unstable_now();_c=e;var t=!0;try{t=Ri(!0,e)}finally{t?qn():(_i=!1,Ri=null)}}else _i=!1}var qn;typeof Tc=="function"?qn=function(){Tc(aa)}:typeof MessageChannel<"u"?(la=new MessageChannel,Ec=la.port2,la.port1.onmessage=aa,qn=function(){Ec.postMessage(null)}):qn=function(){Rc(aa,0)};var la,Ec;function da(e){Ri=e,_i||(_i=!0,qn())}function ma(e,t){er=Rc(function(){e(U.unstable_now())},t)}U.unstable_IdlePriority=5;U.unstable_ImmediatePriority=1;U.unstable_LowPriority=4;U.unstable_NormalPriority=3;U.unstable_Profiling=null;U.unstable_UserBlockingPriority=2;U.unstable_cancelCallback=function(e){e.callback=null};U.unstable_continueExecution=function(){bt||Ii||(bt=!0,da(pa))};U.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Ic=0<e?Math.floor(1e3/e):5};U.unstable_getCurrentPriorityLevel=function(){return ae};U.unstable_getFirstCallbackNode=function(){return Ue(He)};U.unstable_next=function(e){switch(ae){case 1:case 2:case 3:var t=3;break;default:t=ae}var n=ae;ae=t;try{return e()}finally{ae=n}};U.unstable_pauseExecution=function(){};U.unstable_requestPaint=function(){};U.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=ae;ae=e;try{return t()}finally{ae=n}};U.unstable_scheduleCallback=function(e,t,n){var r=U.unstable_now();switch(typeof n=="object"&&n!==null?(n=n.delay,n=typeof n=="number"&&0<n?r+n:r):n=r,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return i=n+i,e={id:Xm++,callback:t,priorityLevel:e,startTime:n,expirationTime:i,sortIndex:-1},n>r?(e.sortIndex=n,ua(gt,e),Ue(He)===null&&e===Ue(gt)&&(Zn?(Pc(er),er=-1):Zn=!0,ma(fa,n-r))):(e.sortIndex=i,ua(He,e),bt||Ii||(bt=!0,da(pa))),e};U.unstable_shouldYield=Nc;U.unstable_wrapCallback=function(e){var t=ae;return function(){var n=ae;ae=t;try{return e.apply(this,arguments)}finally{ae=n}}}});var Lc=pt((X0,Oc)=>{"use strict";Oc.exports=wc()});var Ud=pt(_e=>{"use strict";var Ym=zn(),Pe=Lc();function k(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var bf=new Set,xr={};function Zt(e,t){Nn(e,t),Nn(e+"Capture",t)}function Nn(e,t){for(xr[e]=t,e=0;e<t.length;e++)bf.add(t[e])}var st=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Ua=Object.prototype.hasOwnProperty,qm=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Mc={},Dc={};function Zm(e){return Ua.call(Dc,e)?!0:Ua.call(Mc,e)?!1:qm.test(e)?Dc[e]=!0:(Mc[e]=!0,!1)}function eh(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function th(e,t,n,r){if(t===null||typeof t>"u"||eh(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function ge(e,t,n,r,i,o,s){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=s}var se={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){se[e]=new ge(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];se[t]=new ge(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){se[e]=new ge(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){se[e]=new ge(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){se[e]=new ge(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){se[e]=new ge(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){se[e]=new ge(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){se[e]=new ge(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){se[e]=new ge(e,5,!1,e.toLowerCase(),null,!1,!1)});var Nl=/[\-:]([a-z])/g;function wl(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Nl,wl);se[t]=new ge(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Nl,wl);se[t]=new ge(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Nl,wl);se[t]=new ge(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){se[e]=new ge(e,1,!1,e.toLowerCase(),null,!1,!1)});se.xlinkHref=new ge("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){se[e]=new ge(e,1,!1,e.toLowerCase(),null,!0,!0)});function Ol(e,t,n,r){var i=se.hasOwnProperty(t)?se[t]:null;(i!==null?i.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(th(t,n,i,r)&&(n=null),r||i===null?Zm(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=n===null?i.type===3?!1:"":n:(t=i.attributeName,r=i.attributeNamespace,n===null?e.removeAttribute(t):(i=i.type,n=i===3||i===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var ct=Ym.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ni=Symbol.for("react.element"),fn=Symbol.for("react.portal"),pn=Symbol.for("react.fragment"),Ll=Symbol.for("react.strict_mode"),ja=Symbol.for("react.profiler"),Bf=Symbol.for("react.provider"),Vf=Symbol.for("react.context"),Ml=Symbol.for("react.forward_ref"),za=Symbol.for("react.suspense"),ba=Symbol.for("react.suspense_list"),Dl=Symbol.for("react.memo"),vt=Symbol.for("react.lazy");Symbol.for("react.scope");Symbol.for("react.debug_trace_mode");var Kf=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden");Symbol.for("react.cache");Symbol.for("react.tracing_marker");var Fc=Symbol.iterator;function tr(e){return e===null||typeof e!="object"?null:(e=Fc&&e[Fc]||e["@@iterator"],typeof e=="function"?e:null)}var W=Object.assign,ha;function ur(e){if(ha===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);ha=t&&t[1]||""}return`
`+ha+e}var ga=!1;function ya(e,t){if(!e||ga)return"";ga=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var r=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){r=u}e.call(t.prototype)}else{try{throw Error()}catch(u){r=u}e()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var i=u.stack.split(`
`),o=r.stack.split(`
`),s=i.length-1,a=o.length-1;1<=s&&0<=a&&i[s]!==o[a];)a--;for(;1<=s&&0<=a;s--,a--)if(i[s]!==o[a]){if(s!==1||a!==1)do if(s--,a--,0>a||i[s]!==o[a]){var l=`
`+i[s].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=s&&0<=a);break}}}finally{ga=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?ur(e):""}function nh(e){switch(e.tag){case 5:return ur(e.type);case 16:return ur("Lazy");case 13:return ur("Suspense");case 19:return ur("SuspenseList");case 0:case 2:case 15:return e=ya(e.type,!1),e;case 11:return e=ya(e.type.render,!1),e;case 1:return e=ya(e.type,!0),e;default:return""}}function Ba(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case pn:return"Fragment";case fn:return"Portal";case ja:return"Profiler";case Ll:return"StrictMode";case za:return"Suspense";case ba:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Vf:return(e.displayName||"Context")+".Consumer";case Bf:return(e._context.displayName||"Context")+".Provider";case Ml:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Dl:return t=e.displayName||null,t!==null?t:Ba(e.type)||"Memo";case vt:t=e._payload,e=e._init;try{return Ba(e(t))}catch{}}return null}function rh(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Ba(t);case 8:return t===Ll?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function Lt(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function Gf(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function ih(e){var t=Gf(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(s){r=""+s,o.call(this,s)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(s){r=""+s},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function wi(e){e._valueTracker||(e._valueTracker=ih(e))}function $f(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Gf(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function io(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Va(e,t){var n=t.checked;return W({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function Ac(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=Lt(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function Hf(e,t){t=t.checked,t!=null&&Ol(e,"checked",t,!1)}function Ka(e,t){Hf(e,t);var n=Lt(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Ga(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ga(e,t.type,Lt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Uc(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function Ga(e,t,n){(t!=="number"||io(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var cr=Array.isArray;function Tn(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Lt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n){e[i].selected=!0,r&&(e[i].defaultSelected=!0);return}t!==null||e[i].disabled||(t=e[i])}t!==null&&(t.selected=!0)}}function $a(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(k(91));return W({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function jc(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(k(92));if(cr(n)){if(1<n.length)throw Error(k(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:Lt(n)}}function Wf(e,t){var n=Lt(t.value),r=Lt(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function zc(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Jf(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ha(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Jf(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Oi,Qf=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,i)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Oi=Oi||document.createElement("div"),Oi.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Oi.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Tr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var dr={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},oh=["Webkit","ms","Moz","O"];Object.keys(dr).forEach(function(e){oh.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),dr[t]=dr[e]})});function Xf(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||dr.hasOwnProperty(e)&&dr[e]?(""+t).trim():t+"px"}function Yf(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,i=Xf(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}var sh=W({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Wa(e,t){if(t){if(sh[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(k(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(k(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(k(61))}if(t.style!=null&&typeof t.style!="object")throw Error(k(62))}}function Ja(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Qa=null;function Fl(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Xa=null,En=null,Rn=null;function bc(e){if(e=Br(e)){if(typeof Xa!="function")throw Error(k(280));var t=e.stateNode;t&&(t=Mo(t),Xa(e.stateNode,e.type,t))}}function qf(e){En?Rn?Rn.push(e):Rn=[e]:En=e}function Zf(){if(En){var e=En,t=Rn;if(Rn=En=null,bc(e),t)for(e=0;e<t.length;e++)bc(t[e])}}function ep(e,t){return e(t)}function tp(){}var va=!1;function np(e,t,n){if(va)return e(t,n);va=!0;try{return ep(e,t,n)}finally{va=!1,(En!==null||Rn!==null)&&(tp(),Zf())}}function Er(e,t){var n=e.stateNode;if(n===null)return null;var r=Mo(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(k(231,t,typeof n));return n}var Ya=!1;if(st)try{un={},Object.defineProperty(un,"passive",{get:function(){Ya=!0}}),window.addEventListener("test",un,un),window.removeEventListener("test",un,un)}catch{Ya=!1}var un;function ah(e,t,n,r,i,o,s,a,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(c){this.onError(c)}}var mr=!1,oo=null,so=!1,qa=null,lh={onError:function(e){mr=!0,oo=e}};function uh(e,t,n,r,i,o,s,a,l){mr=!1,oo=null,ah.apply(lh,arguments)}function ch(e,t,n,r,i,o,s,a,l){if(uh.apply(this,arguments),mr){if(mr){var u=oo;mr=!1,oo=null}else throw Error(k(198));so||(so=!0,qa=u)}}function en(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function rp(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Bc(e){if(en(e)!==e)throw Error(k(188))}function fh(e){var t=e.alternate;if(!t){if(t=en(e),t===null)throw Error(k(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(i===null)break;var o=i.alternate;if(o===null){if(r=i.return,r!==null){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Bc(i),e;if(o===r)return Bc(i),t;o=o.sibling}throw Error(k(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,a=i.child;a;){if(a===n){s=!0,n=i,r=o;break}if(a===r){s=!0,r=i,n=o;break}a=a.sibling}if(!s){for(a=o.child;a;){if(a===n){s=!0,n=o,r=i;break}if(a===r){s=!0,r=o,n=i;break}a=a.sibling}if(!s)throw Error(k(189))}}if(n.alternate!==r)throw Error(k(190))}if(n.tag!==3)throw Error(k(188));return n.stateNode.current===n?e:t}function ip(e){return e=fh(e),e!==null?op(e):null}function op(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=op(e);if(t!==null)return t;e=e.sibling}return null}var sp=Pe.unstable_scheduleCallback,Vc=Pe.unstable_cancelCallback,ph=Pe.unstable_shouldYield,dh=Pe.unstable_requestPaint,X=Pe.unstable_now,mh=Pe.unstable_getCurrentPriorityLevel,Al=Pe.unstable_ImmediatePriority,ap=Pe.unstable_UserBlockingPriority,ao=Pe.unstable_NormalPriority,hh=Pe.unstable_LowPriority,lp=Pe.unstable_IdlePriority,No=null,Xe=null;function gh(e){if(Xe&&typeof Xe.onCommitFiberRoot=="function")try{Xe.onCommitFiberRoot(No,e,void 0,(e.current.flags&128)===128)}catch{}}var Ve=Math.clz32?Math.clz32:Sh,yh=Math.log,vh=Math.LN2;function Sh(e){return e>>>=0,e===0?32:31-(yh(e)/vh|0)|0}var Li=64,Mi=4194304;function fr(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function lo(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,s=n&268435455;if(s!==0){var a=s&~i;a!==0?r=fr(a):(o&=s,o!==0&&(r=fr(o)))}else s=n&~i,s!==0?r=fr(s):o!==0&&(r=fr(o));if(r===0)return 0;if(t!==0&&t!==r&&!(t&i)&&(i=r&-r,o=t&-t,i>=o||i===16&&(o&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-Ve(t),i=1<<n,r|=e[n],t&=~i;return r}function Ch(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function kh(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var s=31-Ve(o),a=1<<s,l=i[s];l===-1?(!(a&n)||a&r)&&(i[s]=Ch(a,t)):l<=t&&(e.expiredLanes|=a),o&=~a}}function Za(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function up(){var e=Li;return Li<<=1,!(Li&4194240)&&(Li=64),e}function Sa(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function zr(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Ve(t),e[t]=n}function xh(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-Ve(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}function Ul(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Ve(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var F=0;function cp(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var fp,jl,pp,dp,mp,el=!1,Di=[],Et=null,Rt=null,Pt=null,Rr=new Map,Pr=new Map,Ct=[],Th="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Kc(e,t){switch(e){case"focusin":case"focusout":Et=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Rr.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pr.delete(t.pointerId)}}function nr(e,t,n,r,i,o){return e===null||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},t!==null&&(t=Br(t),t!==null&&jl(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,i!==null&&t.indexOf(i)===-1&&t.push(i),e)}function Eh(e,t,n,r,i){switch(t){case"focusin":return Et=nr(Et,e,t,n,r,i),!0;case"dragenter":return Rt=nr(Rt,e,t,n,r,i),!0;case"mouseover":return Pt=nr(Pt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Rr.set(o,nr(Rr.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Pr.set(o,nr(Pr.get(o)||null,e,t,n,r,i)),!0}return!1}function hp(e){var t=Kt(e.target);if(t!==null){var n=en(t);if(n!==null){if(t=n.tag,t===13){if(t=rp(n),t!==null){e.blockedOn=t,mp(e.priority,function(){pp(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Ji(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=tl(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);Qa=r,n.target.dispatchEvent(r),Qa=null}else return t=Br(n),t!==null&&jl(t),e.blockedOn=n,!1;t.shift()}return!0}function Gc(e,t,n){Ji(e)&&n.delete(t)}function Rh(){el=!1,Et!==null&&Ji(Et)&&(Et=null),Rt!==null&&Ji(Rt)&&(Rt=null),Pt!==null&&Ji(Pt)&&(Pt=null),Rr.forEach(Gc),Pr.forEach(Gc)}function rr(e,t){e.blockedOn===t&&(e.blockedOn=null,el||(el=!0,Pe.unstable_scheduleCallback(Pe.unstable_NormalPriority,Rh)))}function Ir(e){function t(i){return rr(i,e)}if(0<Di.length){rr(Di[0],e);for(var n=1;n<Di.length;n++){var r=Di[n];r.blockedOn===e&&(r.blockedOn=null)}}for(Et!==null&&rr(Et,e),Rt!==null&&rr(Rt,e),Pt!==null&&rr(Pt,e),Rr.forEach(t),Pr.forEach(t),n=0;n<Ct.length;n++)r=Ct[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<Ct.length&&(n=Ct[0],n.blockedOn===null);)hp(n),n.blockedOn===null&&Ct.shift()}var Pn=ct.ReactCurrentBatchConfig,uo=!0;function Ph(e,t,n,r){var i=F,o=Pn.transition;Pn.transition=null;try{F=1,zl(e,t,n,r)}finally{F=i,Pn.transition=o}}function Ih(e,t,n,r){var i=F,o=Pn.transition;Pn.transition=null;try{F=4,zl(e,t,n,r)}finally{F=i,Pn.transition=o}}function zl(e,t,n,r){if(uo){var i=tl(e,t,n,r);if(i===null)Pa(e,t,r,co,n),Kc(e,r);else if(Eh(i,e,t,n,r))r.stopPropagation();else if(Kc(e,r),t&4&&-1<Th.indexOf(e)){for(;i!==null;){var o=Br(i);if(o!==null&&fp(o),o=tl(e,t,n,r),o===null&&Pa(e,t,r,co,n),o===i)break;i=o}i!==null&&r.stopPropagation()}else Pa(e,t,r,null,n)}}var co=null;function tl(e,t,n,r){if(co=null,e=Fl(r),e=Kt(e),e!==null)if(t=en(e),t===null)e=null;else if(n=t.tag,n===13){if(e=rp(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return co=e,null}function gp(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(mh()){case Al:return 1;case ap:return 4;case ao:case hh:return 16;case lp:return 536870912;default:return 16}default:return 16}}var xt=null,bl=null,Qi=null;function yp(){if(Qi)return Qi;var e,t=bl,n=t.length,r,i="value"in xt?xt.value:xt.textContent,o=i.length;for(e=0;e<n&&t[e]===i[e];e++);var s=n-e;for(r=1;r<=s&&t[n-r]===i[o-r];r++);return Qi=i.slice(e,1<r?1-r:void 0)}function Xi(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Fi(){return!0}function $c(){return!1}function Ie(e){function t(n,r,i,o,s){this._reactName=n,this._targetInst=i,this.type=r,this.nativeEvent=o,this.target=s,this.currentTarget=null;for(var a in e)e.hasOwnProperty(a)&&(n=e[a],this[a]=n?n(o):o[a]);return this.isDefaultPrevented=(o.defaultPrevented!=null?o.defaultPrevented:o.returnValue===!1)?Fi:$c,this.isPropagationStopped=$c,this}return W(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Fi)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Fi)},persist:function(){},isPersistent:Fi}),t}var An={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Bl=Ie(An),br=W({},An,{view:0,detail:0}),_h=Ie(br),Ca,ka,ir,wo=W({},br,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Vl,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ir&&(ir&&e.type==="mousemove"?(Ca=e.screenX-ir.screenX,ka=e.screenY-ir.screenY):ka=Ca=0,ir=e),Ca)},movementY:function(e){return"movementY"in e?e.movementY:ka}}),Hc=Ie(wo),Nh=W({},wo,{dataTransfer:0}),wh=Ie(Nh),Oh=W({},br,{relatedTarget:0}),xa=Ie(Oh),Lh=W({},An,{animationName:0,elapsedTime:0,pseudoElement:0}),Mh=Ie(Lh),Dh=W({},An,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Fh=Ie(Dh),Ah=W({},An,{data:0}),Wc=Ie(Ah),Uh={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},jh={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},zh={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function bh(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=zh[e])?!!t[e]:!1}function Vl(){return bh}var Bh=W({},br,{key:function(e){if(e.key){var t=Uh[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Xi(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?jh[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Vl,charCode:function(e){return e.type==="keypress"?Xi(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Xi(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Vh=Ie(Bh),Kh=W({},wo,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Jc=Ie(Kh),Gh=W({},br,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Vl}),$h=Ie(Gh),Hh=W({},An,{propertyName:0,elapsedTime:0,pseudoElement:0}),Wh=Ie(Hh),Jh=W({},wo,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Qh=Ie(Jh),Xh=[9,13,27,32],Kl=st&&"CompositionEvent"in window,hr=null;st&&"documentMode"in document&&(hr=document.documentMode);var Yh=st&&"TextEvent"in window&&!hr,vp=st&&(!Kl||hr&&8<hr&&11>=hr),Qc=" ",Xc=!1;function Sp(e,t){switch(e){case"keyup":return Xh.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Cp(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var dn=!1;function qh(e,t){switch(e){case"compositionend":return Cp(t);case"keypress":return t.which!==32?null:(Xc=!0,Qc);case"textInput":return e=t.data,e===Qc&&Xc?null:e;default:return null}}function Zh(e,t){if(dn)return e==="compositionend"||!Kl&&Sp(e,t)?(e=yp(),Qi=bl=xt=null,dn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return vp&&t.locale!=="ko"?null:t.data;default:return null}}var eg={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yc(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!eg[e.type]:t==="textarea"}function kp(e,t,n,r){qf(r),t=fo(t,"onChange"),0<t.length&&(n=new Bl("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var gr=null,_r=null;function tg(e){Lp(e,0)}function Oo(e){var t=gn(e);if($f(t))return e}function ng(e,t){if(e==="change")return t}var xp=!1;st&&(st?(Ui="oninput"in document,Ui||(Ta=document.createElement("div"),Ta.setAttribute("oninput","return;"),Ui=typeof Ta.oninput=="function"),Ai=Ui):Ai=!1,xp=Ai&&(!document.documentMode||9<document.documentMode));var Ai,Ui,Ta;function qc(){gr&&(gr.detachEvent("onpropertychange",Tp),_r=gr=null)}function Tp(e){if(e.propertyName==="value"&&Oo(_r)){var t=[];kp(t,_r,e,Fl(e)),np(tg,t)}}function rg(e,t,n){e==="focusin"?(qc(),gr=t,_r=n,gr.attachEvent("onpropertychange",Tp)):e==="focusout"&&qc()}function ig(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Oo(_r)}function og(e,t){if(e==="click")return Oo(t)}function sg(e,t){if(e==="input"||e==="change")return Oo(t)}function ag(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Ge=typeof Object.is=="function"?Object.is:ag;function Nr(e,t){if(Ge(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!Ua.call(t,i)||!Ge(e[i],t[i]))return!1}return!0}function Zc(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ef(e,t){var n=Zc(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Zc(n)}}function Ep(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Ep(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Rp(){for(var e=window,t=io();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=io(e.document)}return t}function Gl(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function lg(e){var t=Rp(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&Ep(n.ownerDocument.documentElement,n)){if(r!==null&&Gl(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=r.end===void 0?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=ef(n,o);var s=ef(n,r);i&&s&&(e.rangeCount!==1||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&(t=t.createRange(),t.setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var ug=st&&"documentMode"in document&&11>=document.documentMode,mn=null,nl=null,yr=null,rl=!1;function tf(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;rl||mn==null||mn!==io(r)||(r=mn,"selectionStart"in r&&Gl(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),yr&&Nr(yr,r)||(yr=r,r=fo(nl,"onSelect"),0<r.length&&(t=new Bl("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mn)))}function ji(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var hn={animationend:ji("Animation","AnimationEnd"),animationiteration:ji("Animation","AnimationIteration"),animationstart:ji("Animation","AnimationStart"),transitionend:ji("Transition","TransitionEnd")},Ea={},Pp={};st&&(Pp=document.createElement("div").style,"AnimationEvent"in window||(delete hn.animationend.animation,delete hn.animationiteration.animation,delete hn.animationstart.animation),"TransitionEvent"in window||delete hn.transitionend.transition);function Lo(e){if(Ea[e])return Ea[e];if(!hn[e])return e;var t=hn[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in Pp)return Ea[e]=t[n];return e}var Ip=Lo("animationend"),_p=Lo("animationiteration"),Np=Lo("animationstart"),wp=Lo("transitionend"),Op=new Map,nf="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dt(e,t){Op.set(e,t),Zt(t,[e])}for(zi=0;zi<nf.length;zi++)bi=nf[zi],rf=bi.toLowerCase(),of=bi[0].toUpperCase()+bi.slice(1),Dt(rf,"on"+of);var bi,rf,of,zi;Dt(Ip,"onAnimationEnd");Dt(_p,"onAnimationIteration");Dt(Np,"onAnimationStart");Dt("dblclick","onDoubleClick");Dt("focusin","onFocus");Dt("focusout","onBlur");Dt(wp,"onTransitionEnd");Nn("onMouseEnter",["mouseout","mouseover"]);Nn("onMouseLeave",["mouseout","mouseover"]);Nn("onPointerEnter",["pointerout","pointerover"]);Nn("onPointerLeave",["pointerout","pointerover"]);Zt("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Zt("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Zt("onBeforeInput",["compositionend","keypress","textInput","paste"]);Zt("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Zt("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Zt("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var pr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),cg=new Set("cancel close invalid load scroll toggle".split(" ").concat(pr));function sf(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,ch(r,t,void 0,e),e.currentTarget=null}function Lp(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var s=r.length-1;0<=s;s--){var a=r[s],l=a.instance,u=a.currentTarget;if(a=a.listener,l!==o&&i.isPropagationStopped())break e;sf(i,a,u),o=l}else for(s=0;s<r.length;s++){if(a=r[s],l=a.instance,u=a.currentTarget,a=a.listener,l!==o&&i.isPropagationStopped())break e;sf(i,a,u),o=l}}}if(so)throw e=qa,so=!1,qa=null,e}function b(e,t){var n=t[ll];n===void 0&&(n=t[ll]=new Set);var r=e+"__bubble";n.has(r)||(Mp(t,e,2,!1),n.add(r))}function Ra(e,t,n){var r=0;t&&(r|=4),Mp(n,e,r,t)}var Bi="_reactListening"+Math.random().toString(36).slice(2);function wr(e){if(!e[Bi]){e[Bi]=!0,bf.forEach(function(n){n!=="selectionchange"&&(cg.has(n)||Ra(n,!1,e),Ra(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Bi]||(t[Bi]=!0,Ra("selectionchange",!1,t))}}function Mp(e,t,n,r){switch(gp(t)){case 1:var i=Ph;break;case 4:i=Ih;break;default:i=zl}n=i.bind(null,t,n,e),i=void 0,!Ya||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(i=!0),r?i!==void 0?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):i!==void 0?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Pa(e,t,n,r,i){var o=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var s=r.tag;if(s===3||s===4){var a=r.stateNode.containerInfo;if(a===i||a.nodeType===8&&a.parentNode===i)break;if(s===4)for(s=r.return;s!==null;){var l=s.tag;if((l===3||l===4)&&(l=s.stateNode.containerInfo,l===i||l.nodeType===8&&l.parentNode===i))return;s=s.return}for(;a!==null;){if(s=Kt(a),s===null)return;if(l=s.tag,l===5||l===6){r=o=s;continue e}a=a.parentNode}}r=r.return}np(function(){var u=o,c=Fl(n),f=[];e:{var p=Op.get(e);if(p!==void 0){var g=Bl,S=e;switch(e){case"keypress":if(Xi(n)===0)break e;case"keydown":case"keyup":g=Vh;break;case"focusin":S="focus",g=xa;break;case"focusout":S="blur",g=xa;break;case"beforeblur":case"afterblur":g=xa;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":g=Hc;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":g=wh;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":g=$h;break;case Ip:case _p:case Np:g=Mh;break;case wp:g=Wh;break;case"scroll":g=_h;break;case"wheel":g=Qh;break;case"copy":case"cut":case"paste":g=Fh;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":g=Jc}var v=(t&4)!==0,w=!v&&e==="scroll",m=v?p!==null?p+"Capture":null:p;v=[];for(var d=u,h;d!==null;){h=d;var x=h.stateNode;if(h.tag===5&&x!==null&&(h=x,m!==null&&(x=Er(d,m),x!=null&&v.push(Or(d,x,h)))),w)break;d=d.return}0<v.length&&(p=new g(p,S,null,n,c),f.push({event:p,listeners:v}))}}if(!(t&7)){e:{if(p=e==="mouseover"||e==="pointerover",g=e==="mouseout"||e==="pointerout",p&&n!==Qa&&(S=n.relatedTarget||n.fromElement)&&(Kt(S)||S[at]))break e;if((g||p)&&(p=c.window===c?c:(p=c.ownerDocument)?p.defaultView||p.parentWindow:window,g?(S=n.relatedTarget||n.toElement,g=u,S=S?Kt(S):null,S!==null&&(w=en(S),S!==w||S.tag!==5&&S.tag!==6)&&(S=null)):(g=null,S=u),g!==S)){if(v=Hc,x="onMouseLeave",m="onMouseEnter",d="mouse",(e==="pointerout"||e==="pointerover")&&(v=Jc,x="onPointerLeave",m="onPointerEnter",d="pointer"),w=g==null?p:gn(g),h=S==null?p:gn(S),p=new v(x,d+"leave",g,n,c),p.target=w,p.relatedTarget=h,x=null,Kt(c)===u&&(v=new v(m,d+"enter",S,n,c),v.target=h,v.relatedTarget=w,x=v),w=x,g&&S)t:{for(v=g,m=S,d=0,h=v;h;h=cn(h))d++;for(h=0,x=m;x;x=cn(x))h++;for(;0<d-h;)v=cn(v),d--;for(;0<h-d;)m=cn(m),h--;for(;d--;){if(v===m||m!==null&&v===m.alternate)break t;v=cn(v),m=cn(m)}v=null}else v=null;g!==null&&af(f,p,g,v,!1),S!==null&&w!==null&&af(f,w,S,v,!0)}}e:{if(p=u?gn(u):window,g=p.nodeName&&p.nodeName.toLowerCase(),g==="select"||g==="input"&&p.type==="file")var E=ng;else if(Yc(p))if(xp)E=sg;else{E=ig;var R=rg}else(g=p.nodeName)&&g.toLowerCase()==="input"&&(p.type==="checkbox"||p.type==="radio")&&(E=og);if(E&&(E=E(e,u))){kp(f,E,n,c);break e}R&&R(e,p,u),e==="focusout"&&(R=p._wrapperState)&&R.controlled&&p.type==="number"&&Ga(p,"number",p.value)}switch(R=u?gn(u):window,e){case"focusin":(Yc(R)||R.contentEditable==="true")&&(mn=R,nl=u,yr=null);break;case"focusout":yr=nl=mn=null;break;case"mousedown":rl=!0;break;case"contextmenu":case"mouseup":case"dragend":rl=!1,tf(f,n,c);break;case"selectionchange":if(ug)break;case"keydown":case"keyup":tf(f,n,c)}var P;if(Kl)e:{switch(e){case"compositionstart":var I="onCompositionStart";break e;case"compositionend":I="onCompositionEnd";break e;case"compositionupdate":I="onCompositionUpdate";break e}I=void 0}else dn?Sp(e,n)&&(I="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(I="onCompositionStart");I&&(vp&&n.locale!=="ko"&&(dn||I!=="onCompositionStart"?I==="onCompositionEnd"&&dn&&(P=yp()):(xt=c,bl="value"in xt?xt.value:xt.textContent,dn=!0)),R=fo(u,I),0<R.length&&(I=new Wc(I,e,null,n,c),f.push({event:I,listeners:R}),P?I.data=P:(P=Cp(n),P!==null&&(I.data=P)))),(P=Yh?qh(e,n):Zh(e,n))&&(u=fo(u,"onBeforeInput"),0<u.length&&(c=new Wc("onBeforeInput","beforeinput",null,n,c),f.push({event:c,listeners:u}),c.data=P))}Lp(f,t)})}function Or(e,t,n){return{instance:e,listener:t,currentTarget:n}}function fo(e,t){for(var n=t+"Capture",r=[];e!==null;){var i=e,o=i.stateNode;i.tag===5&&o!==null&&(i=o,o=Er(e,n),o!=null&&r.unshift(Or(e,o,i)),o=Er(e,t),o!=null&&r.push(Or(e,o,i))),e=e.return}return r}function cn(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function af(e,t,n,r,i){for(var o=t._reactName,s=[];n!==null&&n!==r;){var a=n,l=a.alternate,u=a.stateNode;if(l!==null&&l===r)break;a.tag===5&&u!==null&&(a=u,i?(l=Er(n,o),l!=null&&s.unshift(Or(n,l,a))):i||(l=Er(n,o),l!=null&&s.push(Or(n,l,a)))),n=n.return}s.length!==0&&e.push({event:t,listeners:s})}var fg=/\r\n?/g,pg=/\u0000|\uFFFD/g;function lf(e){return(typeof e=="string"?e:""+e).replace(fg,`
`).replace(pg,"")}function Vi(e,t,n){if(t=lf(t),lf(e)!==t&&n)throw Error(k(425))}function po(){}var il=null,ol=null;function sl(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var al=typeof setTimeout=="function"?setTimeout:void 0,dg=typeof clearTimeout=="function"?clearTimeout:void 0,uf=typeof Promise=="function"?Promise:void 0,mg=typeof queueMicrotask=="function"?queueMicrotask:typeof uf<"u"?function(e){return uf.resolve(null).then(e).catch(hg)}:al;function hg(e){setTimeout(function(){throw e})}function Ia(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&i.nodeType===8)if(n=i.data,n==="/$"){if(r===0){e.removeChild(i),Ir(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=i}while(n);Ir(t)}function It(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function cf(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var Un=Math.random().toString(36).slice(2),Qe="__reactFiber$"+Un,Lr="__reactProps$"+Un,at="__reactContainer$"+Un,ll="__reactEvents$"+Un,gg="__reactListeners$"+Un,yg="__reactHandles$"+Un;function Kt(e){var t=e[Qe];if(t)return t;for(var n=e.parentNode;n;){if(t=n[at]||n[Qe]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=cf(e);e!==null;){if(n=e[Qe])return n;e=cf(e)}return t}e=n,n=e.parentNode}return null}function Br(e){return e=e[Qe]||e[at],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function gn(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(k(33))}function Mo(e){return e[Lr]||null}var ul=[],yn=-1;function Ft(e){return{current:e}}function B(e){0>yn||(e.current=ul[yn],ul[yn]=null,yn--)}function j(e,t){yn++,ul[yn]=e.current,e.current=t}var Mt={},fe=Ft(Mt),Ce=Ft(!1),Jt=Mt;function wn(e,t){var n=e.type.contextTypes;if(!n)return Mt;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i={},o;for(o in n)i[o]=t[o];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ke(e){return e=e.childContextTypes,e!=null}function mo(){B(Ce),B(fe)}function ff(e,t,n){if(fe.current!==Mt)throw Error(k(168));j(fe,t),j(Ce,n)}function Dp(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var i in r)if(!(i in t))throw Error(k(108,rh(e)||"Unknown",i));return W({},n,r)}function ho(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Mt,Jt=fe.current,j(fe,e),j(Ce,Ce.current),!0}function pf(e,t,n){var r=e.stateNode;if(!r)throw Error(k(169));n?(e=Dp(e,t,Jt),r.__reactInternalMemoizedMergedChildContext=e,B(Ce),B(fe),j(fe,e)):B(Ce),j(Ce,n)}var nt=null,Do=!1,_a=!1;function Fp(e){nt===null?nt=[e]:nt.push(e)}function vg(e){Do=!0,Fp(e)}function At(){if(!_a&&nt!==null){_a=!0;var e=0,t=F;try{var n=nt;for(F=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}nt=null,Do=!1}catch(i){throw nt!==null&&(nt=nt.slice(e+1)),sp(Al,At),i}finally{F=t,_a=!1}}return null}var vn=[],Sn=0,go=null,yo=0,Oe=[],Le=0,Qt=null,rt=1,it="";function Bt(e,t){vn[Sn++]=yo,vn[Sn++]=go,go=e,yo=t}function Ap(e,t,n){Oe[Le++]=rt,Oe[Le++]=it,Oe[Le++]=Qt,Qt=e;var r=rt;e=it;var i=32-Ve(r)-1;r&=~(1<<i),n+=1;var o=32-Ve(t)+i;if(30<o){var s=i-i%5;o=(r&(1<<s)-1).toString(32),r>>=s,i-=s,rt=1<<32-Ve(t)+i|n<<i|r,it=o+e}else rt=1<<o|n<<i|r,it=e}function $l(e){e.return!==null&&(Bt(e,1),Ap(e,1,0))}function Hl(e){for(;e===go;)go=vn[--Sn],vn[Sn]=null,yo=vn[--Sn],vn[Sn]=null;for(;e===Qt;)Qt=Oe[--Le],Oe[Le]=null,it=Oe[--Le],Oe[Le]=null,rt=Oe[--Le],Oe[Le]=null}var Re=null,Ee=null,K=!1,Be=null;function Up(e,t){var n=Me(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function df(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Re=e,Ee=It(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Re=e,Ee=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=Qt!==null?{id:rt,overflow:it}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=Me(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,Re=e,Ee=null,!0):!1;default:return!1}}function cl(e){return(e.mode&1)!==0&&(e.flags&128)===0}function fl(e){if(K){var t=Ee;if(t){var n=t;if(!df(e,t)){if(cl(e))throw Error(k(418));t=It(n.nextSibling);var r=Re;t&&df(e,t)?Up(r,n):(e.flags=e.flags&-4097|2,K=!1,Re=e)}}else{if(cl(e))throw Error(k(418));e.flags=e.flags&-4097|2,K=!1,Re=e}}}function mf(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Re=e}function Ki(e){if(e!==Re)return!1;if(!K)return mf(e),K=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!sl(e.type,e.memoizedProps)),t&&(t=Ee)){if(cl(e))throw jp(),Error(k(418));for(;t;)Up(e,t),t=It(t.nextSibling)}if(mf(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(k(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){Ee=It(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}Ee=null}}else Ee=Re?It(e.stateNode.nextSibling):null;return!0}function jp(){for(var e=Ee;e;)e=It(e.nextSibling)}function On(){Ee=Re=null,K=!1}function Wl(e){Be===null?Be=[e]:Be.push(e)}var Sg=ct.ReactCurrentBatchConfig;function or(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(k(309));var r=n.stateNode}if(!r)throw Error(k(147,e));var i=r,o=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===o?t.ref:(t=function(s){var a=i.refs;s===null?delete a[o]:a[o]=s},t._stringRef=o,t)}if(typeof e!="string")throw Error(k(284));if(!n._owner)throw Error(k(290,e))}return e}function Gi(e,t){throw e=Object.prototype.toString.call(t),Error(k(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function hf(e){var t=e._init;return t(e._payload)}function zp(e){function t(m,d){if(e){var h=m.deletions;h===null?(m.deletions=[d],m.flags|=16):h.push(d)}}function n(m,d){if(!e)return null;for(;d!==null;)t(m,d),d=d.sibling;return null}function r(m,d){for(m=new Map;d!==null;)d.key!==null?m.set(d.key,d):m.set(d.index,d),d=d.sibling;return m}function i(m,d){return m=Ot(m,d),m.index=0,m.sibling=null,m}function o(m,d,h){return m.index=h,e?(h=m.alternate,h!==null?(h=h.index,h<d?(m.flags|=2,d):h):(m.flags|=2,d)):(m.flags|=1048576,d)}function s(m){return e&&m.alternate===null&&(m.flags|=2),m}function a(m,d,h,x){return d===null||d.tag!==6?(d=Fa(h,m.mode,x),d.return=m,d):(d=i(d,h),d.return=m,d)}function l(m,d,h,x){var E=h.type;return E===pn?c(m,d,h.props.children,x,h.key):d!==null&&(d.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===vt&&hf(E)===d.type)?(x=i(d,h.props),x.ref=or(m,d,h),x.return=m,x):(x=ro(h.type,h.key,h.props,null,m.mode,x),x.ref=or(m,d,h),x.return=m,x)}function u(m,d,h,x){return d===null||d.tag!==4||d.stateNode.containerInfo!==h.containerInfo||d.stateNode.implementation!==h.implementation?(d=Aa(h,m.mode,x),d.return=m,d):(d=i(d,h.children||[]),d.return=m,d)}function c(m,d,h,x,E){return d===null||d.tag!==7?(d=Wt(h,m.mode,x,E),d.return=m,d):(d=i(d,h),d.return=m,d)}function f(m,d,h){if(typeof d=="string"&&d!==""||typeof d=="number")return d=Fa(""+d,m.mode,h),d.return=m,d;if(typeof d=="object"&&d!==null){switch(d.$$typeof){case Ni:return h=ro(d.type,d.key,d.props,null,m.mode,h),h.ref=or(m,null,d),h.return=m,h;case fn:return d=Aa(d,m.mode,h),d.return=m,d;case vt:var x=d._init;return f(m,x(d._payload),h)}if(cr(d)||tr(d))return d=Wt(d,m.mode,h,null),d.return=m,d;Gi(m,d)}return null}function p(m,d,h,x){var E=d!==null?d.key:null;if(typeof h=="string"&&h!==""||typeof h=="number")return E!==null?null:a(m,d,""+h,x);if(typeof h=="object"&&h!==null){switch(h.$$typeof){case Ni:return h.key===E?l(m,d,h,x):null;case fn:return h.key===E?u(m,d,h,x):null;case vt:return E=h._init,p(m,d,E(h._payload),x)}if(cr(h)||tr(h))return E!==null?null:c(m,d,h,x,null);Gi(m,h)}return null}function g(m,d,h,x,E){if(typeof x=="string"&&x!==""||typeof x=="number")return m=m.get(h)||null,a(d,m,""+x,E);if(typeof x=="object"&&x!==null){switch(x.$$typeof){case Ni:return m=m.get(x.key===null?h:x.key)||null,l(d,m,x,E);case fn:return m=m.get(x.key===null?h:x.key)||null,u(d,m,x,E);case vt:var R=x._init;return g(m,d,h,R(x._payload),E)}if(cr(x)||tr(x))return m=m.get(h)||null,c(d,m,x,E,null);Gi(d,x)}return null}function S(m,d,h,x){for(var E=null,R=null,P=d,I=d=0,te=null;P!==null&&I<h.length;I++){P.index>I?(te=P,P=null):te=P.sibling;var D=p(m,P,h[I],x);if(D===null){P===null&&(P=te);break}e&&P&&D.alternate===null&&t(m,P),d=o(D,d,I),R===null?E=D:R.sibling=D,R=D,P=te}if(I===h.length)return n(m,P),K&&Bt(m,I),E;if(P===null){for(;I<h.length;I++)P=f(m,h[I],x),P!==null&&(d=o(P,d,I),R===null?E=P:R.sibling=P,R=P);return K&&Bt(m,I),E}for(P=r(m,P);I<h.length;I++)te=g(P,m,I,h[I],x),te!==null&&(e&&te.alternate!==null&&P.delete(te.key===null?I:te.key),d=o(te,d,I),R===null?E=te:R.sibling=te,R=te);return e&&P.forEach(function(ft){return t(m,ft)}),K&&Bt(m,I),E}function v(m,d,h,x){var E=tr(h);if(typeof E!="function")throw Error(k(150));if(h=E.call(h),h==null)throw Error(k(151));for(var R=E=null,P=d,I=d=0,te=null,D=h.next();P!==null&&!D.done;I++,D=h.next()){P.index>I?(te=P,P=null):te=P.sibling;var ft=p(m,P,D.value,x);if(ft===null){P===null&&(P=te);break}e&&P&&ft.alternate===null&&t(m,P),d=o(ft,d,I),R===null?E=ft:R.sibling=ft,R=ft,P=te}if(D.done)return n(m,P),K&&Bt(m,I),E;if(P===null){for(;!D.done;I++,D=h.next())D=f(m,D.value,x),D!==null&&(d=o(D,d,I),R===null?E=D:R.sibling=D,R=D);return K&&Bt(m,I),E}for(P=r(m,P);!D.done;I++,D=h.next())D=g(P,m,I,D.value,x),D!==null&&(e&&D.alternate!==null&&P.delete(D.key===null?I:D.key),d=o(D,d,I),R===null?E=D:R.sibling=D,R=D);return e&&P.forEach(function($d){return t(m,$d)}),K&&Bt(m,I),E}function w(m,d,h,x){if(typeof h=="object"&&h!==null&&h.type===pn&&h.key===null&&(h=h.props.children),typeof h=="object"&&h!==null){switch(h.$$typeof){case Ni:e:{for(var E=h.key,R=d;R!==null;){if(R.key===E){if(E=h.type,E===pn){if(R.tag===7){n(m,R.sibling),d=i(R,h.props.children),d.return=m,m=d;break e}}else if(R.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===vt&&hf(E)===R.type){n(m,R.sibling),d=i(R,h.props),d.ref=or(m,R,h),d.return=m,m=d;break e}n(m,R);break}else t(m,R);R=R.sibling}h.type===pn?(d=Wt(h.props.children,m.mode,x,h.key),d.return=m,m=d):(x=ro(h.type,h.key,h.props,null,m.mode,x),x.ref=or(m,d,h),x.return=m,m=x)}return s(m);case fn:e:{for(R=h.key;d!==null;){if(d.key===R)if(d.tag===4&&d.stateNode.containerInfo===h.containerInfo&&d.stateNode.implementation===h.implementation){n(m,d.sibling),d=i(d,h.children||[]),d.return=m,m=d;break e}else{n(m,d);break}else t(m,d);d=d.sibling}d=Aa(h,m.mode,x),d.return=m,m=d}return s(m);case vt:return R=h._init,w(m,d,R(h._payload),x)}if(cr(h))return S(m,d,h,x);if(tr(h))return v(m,d,h,x);Gi(m,h)}return typeof h=="string"&&h!==""||typeof h=="number"?(h=""+h,d!==null&&d.tag===6?(n(m,d.sibling),d=i(d,h),d.return=m,m=d):(n(m,d),d=Fa(h,m.mode,x),d.return=m,m=d),s(m)):n(m,d)}return w}var Ln=zp(!0),bp=zp(!1),vo=Ft(null),So=null,Cn=null,Jl=null;function Ql(){Jl=Cn=So=null}function Xl(e){var t=vo.current;B(vo),e._currentValue=t}function pl(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function In(e,t){So=e,Jl=Cn=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(Se=!0),e.firstContext=null)}function Fe(e){var t=e._currentValue;if(Jl!==e)if(e={context:e,memoizedValue:t,next:null},Cn===null){if(So===null)throw Error(k(308));Cn=e,So.dependencies={lanes:0,firstContext:e}}else Cn=Cn.next=e;return t}var Gt=null;function Yl(e){Gt===null?Gt=[e]:Gt.push(e)}function Bp(e,t,n,r){var i=t.interleaved;return i===null?(n.next=n,Yl(t)):(n.next=i.next,i.next=n),t.interleaved=n,lt(e,r)}function lt(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var St=!1;function ql(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Vp(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ot(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function _t(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,M&2){var i=r.pending;return i===null?t.next=t:(t.next=i.next,i.next=t),r.pending=t,lt(e,n)}return i=r.interleaved,i===null?(t.next=t,Yl(r)):(t.next=i.next,i.next=t),r.interleaved=t,lt(e,n)}function Yi(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Ul(e,n)}}function gf(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var i=null,o=null;if(n=n.firstBaseUpdate,n!==null){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};o===null?i=o=s:o=o.next=s,n=n.next}while(n!==null);o===null?i=o=t:o=o.next=t}else i=o=t;n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Co(e,t,n,r){var i=e.updateQueue;St=!1;var o=i.firstBaseUpdate,s=i.lastBaseUpdate,a=i.shared.pending;if(a!==null){i.shared.pending=null;var l=a,u=l.next;l.next=null,s===null?o=u:s.next=u,s=l;var c=e.alternate;c!==null&&(c=c.updateQueue,a=c.lastBaseUpdate,a!==s&&(a===null?c.firstBaseUpdate=u:a.next=u,c.lastBaseUpdate=l))}if(o!==null){var f=i.baseState;s=0,c=u=l=null,a=o;do{var p=a.lane,g=a.eventTime;if((r&p)===p){c!==null&&(c=c.next={eventTime:g,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var S=e,v=a;switch(p=t,g=n,v.tag){case 1:if(S=v.payload,typeof S=="function"){f=S.call(g,f,p);break e}f=S;break e;case 3:S.flags=S.flags&-65537|128;case 0:if(S=v.payload,p=typeof S=="function"?S.call(g,f,p):S,p==null)break e;f=W({},f,p);break e;case 2:St=!0}}a.callback!==null&&a.lane!==0&&(e.flags|=64,p=i.effects,p===null?i.effects=[a]:p.push(a))}else g={eventTime:g,lane:p,tag:a.tag,payload:a.payload,callback:a.callback,next:null},c===null?(u=c=g,l=f):c=c.next=g,s|=p;if(a=a.next,a===null){if(a=i.shared.pending,a===null)break;p=a,a=p.next,p.next=null,i.lastBaseUpdate=p,i.shared.pending=null}}while(!0);if(c===null&&(l=f),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,t=i.shared.interleaved,t!==null){i=t;do s|=i.lane,i=i.next;while(i!==t)}else o===null&&(i.shared.lanes=0);Yt|=s,e.lanes=s,e.memoizedState=f}}function yf(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(i!==null){if(r.callback=null,r=n,typeof i!="function")throw Error(k(191,i));i.call(r)}}}var Vr={},Ye=Ft(Vr),Mr=Ft(Vr),Dr=Ft(Vr);function $t(e){if(e===Vr)throw Error(k(174));return e}function Zl(e,t){switch(j(Dr,t),j(Mr,e),j(Ye,Vr),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ha(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Ha(t,e)}B(Ye),j(Ye,t)}function Mn(){B(Ye),B(Mr),B(Dr)}function Kp(e){$t(Dr.current);var t=$t(Ye.current),n=Ha(t,e.type);t!==n&&(j(Mr,e),j(Ye,n))}function eu(e){Mr.current===e&&(B(Ye),B(Mr))}var $=Ft(0);function ko(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Na=[];function tu(){for(var e=0;e<Na.length;e++)Na[e]._workInProgressVersionPrimary=null;Na.length=0}var qi=ct.ReactCurrentDispatcher,wa=ct.ReactCurrentBatchConfig,Xt=0,H=null,Z=null,ne=null,xo=!1,vr=!1,Fr=0,Cg=0;function le(){throw Error(k(321))}function nu(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ge(e[n],t[n]))return!1;return!0}function ru(e,t,n,r,i,o){if(Xt=o,H=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qi.current=e===null||e.memoizedState===null?Eg:Rg,e=n(r,i),vr){o=0;do{if(vr=!1,Fr=0,25<=o)throw Error(k(301));o+=1,ne=Z=null,t.updateQueue=null,qi.current=Pg,e=n(r,i)}while(vr)}if(qi.current=To,t=Z!==null&&Z.next!==null,Xt=0,ne=Z=H=null,xo=!1,t)throw Error(k(300));return e}function iu(){var e=Fr!==0;return Fr=0,e}function Je(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ne===null?H.memoizedState=ne=e:ne=ne.next=e,ne}function Ae(){if(Z===null){var e=H.alternate;e=e!==null?e.memoizedState:null}else e=Z.next;var t=ne===null?H.memoizedState:ne.next;if(t!==null)ne=t,Z=e;else{if(e===null)throw Error(k(310));Z=e,e={memoizedState:Z.memoizedState,baseState:Z.baseState,baseQueue:Z.baseQueue,queue:Z.queue,next:null},ne===null?H.memoizedState=ne=e:ne=ne.next=e}return ne}function Ar(e,t){return typeof t=="function"?t(e):t}function Oa(e){var t=Ae(),n=t.queue;if(n===null)throw Error(k(311));n.lastRenderedReducer=e;var r=Z,i=r.baseQueue,o=n.pending;if(o!==null){if(i!==null){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(i!==null){o=i.next,r=r.baseState;var a=s=null,l=null,u=o;do{var c=u.lane;if((Xt&c)===c)l!==null&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};l===null?(a=l=f,s=r):l=l.next=f,H.lanes|=c,Yt|=c}u=u.next}while(u!==null&&u!==o);l===null?s=r:l.next=a,Ge(r,t.memoizedState)||(Se=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=l,n.lastRenderedState=r}if(e=n.interleaved,e!==null){i=e;do o=i.lane,H.lanes|=o,Yt|=o,i=i.next;while(i!==e)}else i===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function La(e){var t=Ae(),n=t.queue;if(n===null)throw Error(k(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(i!==null){n.pending=null;var s=i=i.next;do o=e(o,s.action),s=s.next;while(s!==i);Ge(o,t.memoizedState)||(Se=!0),t.memoizedState=o,t.baseQueue===null&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Gp(){}function $p(e,t){var n=H,r=Ae(),i=t(),o=!Ge(r.memoizedState,i);if(o&&(r.memoizedState=i,Se=!0),r=r.queue,ou(Jp.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||ne!==null&&ne.memoizedState.tag&1){if(n.flags|=2048,Ur(9,Wp.bind(null,n,r,i,t),void 0,null),re===null)throw Error(k(349));Xt&30||Hp(n,t,i)}return i}function Hp(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Wp(e,t,n,r){t.value=n,t.getSnapshot=r,Qp(t)&&Xp(e)}function Jp(e,t,n){return n(function(){Qp(t)&&Xp(e)})}function Qp(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Ge(e,n)}catch{return!0}}function Xp(e){var t=lt(e,1);t!==null&&Ke(t,e,1,-1)}function vf(e){var t=Je();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ar,lastRenderedState:e},t.queue=e,e=e.dispatch=Tg.bind(null,H,e),[t.memoizedState,e]}function Ur(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Yp(){return Ae().memoizedState}function Zi(e,t,n,r){var i=Je();H.flags|=e,i.memoizedState=Ur(1|t,n,void 0,r===void 0?null:r)}function Fo(e,t,n,r){var i=Ae();r=r===void 0?null:r;var o=void 0;if(Z!==null){var s=Z.memoizedState;if(o=s.destroy,r!==null&&nu(r,s.deps)){i.memoizedState=Ur(t,n,o,r);return}}H.flags|=e,i.memoizedState=Ur(1|t,n,o,r)}function Sf(e,t){return Zi(8390656,8,e,t)}function ou(e,t){return Fo(2048,8,e,t)}function qp(e,t){return Fo(4,2,e,t)}function Zp(e,t){return Fo(4,4,e,t)}function ed(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function td(e,t,n){return n=n!=null?n.concat([e]):null,Fo(4,4,ed.bind(null,t,e),n)}function su(){}function nd(e,t){var n=Ae();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&nu(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function rd(e,t){var n=Ae();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&nu(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function id(e,t,n){return Xt&21?(Ge(n,t)||(n=up(),H.lanes|=n,Yt|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,Se=!0),e.memoizedState=n)}function kg(e,t){var n=F;F=n!==0&&4>n?n:4,e(!0);var r=wa.transition;wa.transition={};try{e(!1),t()}finally{F=n,wa.transition=r}}function od(){return Ae().memoizedState}function xg(e,t,n){var r=wt(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},sd(e))ad(t,n);else if(n=Bp(e,t,n,r),n!==null){var i=he();Ke(n,e,r,i),ld(n,t,r)}}function Tg(e,t,n){var r=wt(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(sd(e))ad(t,i);else{var o=e.alternate;if(e.lanes===0&&(o===null||o.lanes===0)&&(o=t.lastRenderedReducer,o!==null))try{var s=t.lastRenderedState,a=o(s,n);if(i.hasEagerState=!0,i.eagerState=a,Ge(a,s)){var l=t.interleaved;l===null?(i.next=i,Yl(t)):(i.next=l.next,l.next=i),t.interleaved=i;return}}catch{}finally{}n=Bp(e,t,i,r),n!==null&&(i=he(),Ke(n,e,r,i),ld(n,t,r))}}function sd(e){var t=e.alternate;return e===H||t!==null&&t===H}function ad(e,t){vr=xo=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ld(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Ul(e,n)}}var To={readContext:Fe,useCallback:le,useContext:le,useEffect:le,useImperativeHandle:le,useInsertionEffect:le,useLayoutEffect:le,useMemo:le,useReducer:le,useRef:le,useState:le,useDebugValue:le,useDeferredValue:le,useTransition:le,useMutableSource:le,useSyncExternalStore:le,useId:le,unstable_isNewReconciler:!1},Eg={readContext:Fe,useCallback:function(e,t){return Je().memoizedState=[e,t===void 0?null:t],e},useContext:Fe,useEffect:Sf,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,Zi(4194308,4,ed.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Zi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Zi(4,2,e,t)},useMemo:function(e,t){var n=Je();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Je();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=xg.bind(null,H,e),[r.memoizedState,e]},useRef:function(e){var t=Je();return e={current:e},t.memoizedState=e},useState:vf,useDebugValue:su,useDeferredValue:function(e){return Je().memoizedState=e},useTransition:function(){var e=vf(!1),t=e[0];return e=kg.bind(null,e[1]),Je().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=H,i=Je();if(K){if(n===void 0)throw Error(k(407));n=n()}else{if(n=t(),re===null)throw Error(k(349));Xt&30||Hp(r,t,n)}i.memoizedState=n;var o={value:n,getSnapshot:t};return i.queue=o,Sf(Jp.bind(null,r,o,e),[e]),r.flags|=2048,Ur(9,Wp.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=Je(),t=re.identifierPrefix;if(K){var n=it,r=rt;n=(r&~(1<<32-Ve(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=Fr++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=Cg++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Rg={readContext:Fe,useCallback:nd,useContext:Fe,useEffect:ou,useImperativeHandle:td,useInsertionEffect:qp,useLayoutEffect:Zp,useMemo:rd,useReducer:Oa,useRef:Yp,useState:function(){return Oa(Ar)},useDebugValue:su,useDeferredValue:function(e){var t=Ae();return id(t,Z.memoizedState,e)},useTransition:function(){var e=Oa(Ar)[0],t=Ae().memoizedState;return[e,t]},useMutableSource:Gp,useSyncExternalStore:$p,useId:od,unstable_isNewReconciler:!1},Pg={readContext:Fe,useCallback:nd,useContext:Fe,useEffect:ou,useImperativeHandle:td,useInsertionEffect:qp,useLayoutEffect:Zp,useMemo:rd,useReducer:La,useRef:Yp,useState:function(){return La(Ar)},useDebugValue:su,useDeferredValue:function(e){var t=Ae();return Z===null?t.memoizedState=e:id(t,Z.memoizedState,e)},useTransition:function(){var e=La(Ar)[0],t=Ae().memoizedState;return[e,t]},useMutableSource:Gp,useSyncExternalStore:$p,useId:od,unstable_isNewReconciler:!1};function ze(e,t){if(e&&e.defaultProps){t=W({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function dl(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:W({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Ao={isMounted:function(e){return(e=e._reactInternals)?en(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=he(),i=wt(e),o=ot(r,i);o.payload=t,n!=null&&(o.callback=n),t=_t(e,o,i),t!==null&&(Ke(t,e,i,r),Yi(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=he(),i=wt(e),o=ot(r,i);o.tag=1,o.payload=t,n!=null&&(o.callback=n),t=_t(e,o,i),t!==null&&(Ke(t,e,i,r),Yi(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=he(),r=wt(e),i=ot(n,r);i.tag=2,t!=null&&(i.callback=t),t=_t(e,i,r),t!==null&&(Ke(t,e,r,n),Yi(t,e,r))}};function Cf(e,t,n,r,i,o,s){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,o,s):t.prototype&&t.prototype.isPureReactComponent?!Nr(n,r)||!Nr(i,o):!0}function ud(e,t,n){var r=!1,i=Mt,o=t.contextType;return typeof o=="object"&&o!==null?o=Fe(o):(i=ke(t)?Jt:fe.current,r=t.contextTypes,o=(r=r!=null)?wn(e,i):Mt),t=new t(n,o),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Ao,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function kf(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ao.enqueueReplaceState(t,t.state,null)}function ml(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs={},ql(e);var o=t.contextType;typeof o=="object"&&o!==null?i.context=Fe(o):(o=ke(t)?Jt:fe.current,i.context=wn(e,o)),i.state=e.memoizedState,o=t.getDerivedStateFromProps,typeof o=="function"&&(dl(e,t,o,n),i.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof i.getSnapshotBeforeUpdate=="function"||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(t=i.state,typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount(),t!==i.state&&Ao.enqueueReplaceState(i,i.state,null),Co(e,n,i,r),i.state=e.memoizedState),typeof i.componentDidMount=="function"&&(e.flags|=4194308)}function Dn(e,t){try{var n="",r=t;do n+=nh(r),r=r.return;while(r);var i=n}catch(o){i=`
Error generating stack: `+o.message+`
`+o.stack}return{value:e,source:t,stack:i,digest:null}}function Ma(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function hl(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var Ig=typeof WeakMap=="function"?WeakMap:Map;function cd(e,t,n){n=ot(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ro||(Ro=!0,Rl=r),hl(e,t)},n}function fd(e,t,n){n=ot(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){hl(e,t)}}var o=e.stateNode;return o!==null&&typeof o.componentDidCatch=="function"&&(n.callback=function(){hl(e,t),typeof r!="function"&&(Nt===null?Nt=new Set([this]):Nt.add(this));var s=t.stack;this.componentDidCatch(t.value,{componentStack:s!==null?s:""})}),n}function xf(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new Ig;var i=new Set;r.set(t,i)}else i=r.get(t),i===void 0&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Bg.bind(null,e,t,n),t.then(e,e))}function Tf(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function Ef(e,t,n,r,i){return e.mode&1?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=ot(-1,1),t.tag=2,_t(n,t,1))),n.lanes|=1),e)}var _g=ct.ReactCurrentOwner,Se=!1;function me(e,t,n,r){t.child=e===null?bp(t,null,n,r):Ln(t,e.child,n,r)}function Rf(e,t,n,r,i){n=n.render;var o=t.ref;return In(t,i),r=ru(e,t,n,r,o,i),n=iu(),e!==null&&!Se?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,ut(e,t,i)):(K&&n&&$l(t),t.flags|=1,me(e,t,r,i),t.child)}function Pf(e,t,n,r,i){if(e===null){var o=n.type;return typeof o=="function"&&!mu(o)&&o.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=o,pd(e,t,o,r,i)):(e=ro(n.type,null,r,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}if(o=e.child,!(e.lanes&i)){var s=o.memoizedProps;if(n=n.compare,n=n!==null?n:Nr,n(s,r)&&e.ref===t.ref)return ut(e,t,i)}return t.flags|=1,e=Ot(o,r),e.ref=t.ref,e.return=t,t.child=e}function pd(e,t,n,r,i){if(e!==null){var o=e.memoizedProps;if(Nr(o,r)&&e.ref===t.ref)if(Se=!1,t.pendingProps=r=o,(e.lanes&i)!==0)e.flags&131072&&(Se=!0);else return t.lanes=e.lanes,ut(e,t,i)}return gl(e,t,n,r,i)}function dd(e,t,n){var r=t.pendingProps,i=r.children,o=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},j(xn,Te),Te|=n;else{if(!(n&1073741824))return e=o!==null?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,j(xn,Te),Te|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=o!==null?o.baseLanes:n,j(xn,Te),Te|=r}else o!==null?(r=o.baseLanes|n,t.memoizedState=null):r=n,j(xn,Te),Te|=r;return me(e,t,i,n),t.child}function md(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function gl(e,t,n,r,i){var o=ke(n)?Jt:fe.current;return o=wn(t,o),In(t,i),n=ru(e,t,n,r,o,i),r=iu(),e!==null&&!Se?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,ut(e,t,i)):(K&&r&&$l(t),t.flags|=1,me(e,t,n,i),t.child)}function If(e,t,n,r,i){if(ke(n)){var o=!0;ho(t)}else o=!1;if(In(t,i),t.stateNode===null)eo(e,t),ud(t,n,r),ml(t,n,r,i),r=!0;else if(e===null){var s=t.stateNode,a=t.memoizedProps;s.props=a;var l=s.context,u=n.contextType;typeof u=="object"&&u!==null?u=Fe(u):(u=ke(n)?Jt:fe.current,u=wn(t,u));var c=n.getDerivedStateFromProps,f=typeof c=="function"||typeof s.getSnapshotBeforeUpdate=="function";f||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(a!==r||l!==u)&&kf(t,s,r,u),St=!1;var p=t.memoizedState;s.state=p,Co(t,r,s,i),l=t.memoizedState,a!==r||p!==l||Ce.current||St?(typeof c=="function"&&(dl(t,n,c,r),l=t.memoizedState),(a=St||Cf(t,n,a,r,p,l,u))?(f||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount()),typeof s.componentDidMount=="function"&&(t.flags|=4194308)):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),s.props=r,s.state=l,s.context=u,r=a):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{s=t.stateNode,Vp(e,t),a=t.memoizedProps,u=t.type===t.elementType?a:ze(t.type,a),s.props=u,f=t.pendingProps,p=s.context,l=n.contextType,typeof l=="object"&&l!==null?l=Fe(l):(l=ke(n)?Jt:fe.current,l=wn(t,l));var g=n.getDerivedStateFromProps;(c=typeof g=="function"||typeof s.getSnapshotBeforeUpdate=="function")||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(a!==f||p!==l)&&kf(t,s,r,l),St=!1,p=t.memoizedState,s.state=p,Co(t,r,s,i);var S=t.memoizedState;a!==f||p!==S||Ce.current||St?(typeof g=="function"&&(dl(t,n,g,r),S=t.memoizedState),(u=St||Cf(t,n,u,r,p,S,l)||!1)?(c||typeof s.UNSAFE_componentWillUpdate!="function"&&typeof s.componentWillUpdate!="function"||(typeof s.componentWillUpdate=="function"&&s.componentWillUpdate(r,S,l),typeof s.UNSAFE_componentWillUpdate=="function"&&s.UNSAFE_componentWillUpdate(r,S,l)),typeof s.componentDidUpdate=="function"&&(t.flags|=4),typeof s.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof s.componentDidUpdate!="function"||a===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||a===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=S),s.props=r,s.state=S,s.context=l,r=u):(typeof s.componentDidUpdate!="function"||a===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||a===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return yl(e,t,n,r,o,i)}function yl(e,t,n,r,i,o){md(e,t);var s=(t.flags&128)!==0;if(!r&&!s)return i&&pf(t,n,!1),ut(e,t,o);r=t.stateNode,_g.current=t;var a=s&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&s?(t.child=Ln(t,e.child,null,o),t.child=Ln(t,null,a,o)):me(e,t,a,o),t.memoizedState=r.state,i&&pf(t,n,!0),t.child}function hd(e){var t=e.stateNode;t.pendingContext?ff(e,t.pendingContext,t.pendingContext!==t.context):t.context&&ff(e,t.context,!1),Zl(e,t.containerInfo)}function _f(e,t,n,r,i){return On(),Wl(i),t.flags|=256,me(e,t,n,r),t.child}var vl={dehydrated:null,treeContext:null,retryLane:0};function Sl(e){return{baseLanes:e,cachePool:null,transitions:null}}function gd(e,t,n){var r=t.pendingProps,i=$.current,o=!1,s=(t.flags&128)!==0,a;if((a=s)||(a=e!==null&&e.memoizedState===null?!1:(i&2)!==0),a?(o=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(i|=1),j($,i&1),e===null)return fl(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=r.children,e=r.fallback,o?(r=t.mode,o=t.child,s={mode:"hidden",children:s},!(r&1)&&o!==null?(o.childLanes=0,o.pendingProps=s):o=zo(s,r,0,null),e=Wt(e,r,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Sl(n),t.memoizedState=vl,e):au(t,s));if(i=e.memoizedState,i!==null&&(a=i.dehydrated,a!==null))return Ng(e,t,s,r,a,i,n);if(o){o=r.fallback,s=t.mode,i=e.child,a=i.sibling;var l={mode:"hidden",children:r.children};return!(s&1)&&t.child!==i?(r=t.child,r.childLanes=0,r.pendingProps=l,t.deletions=null):(r=Ot(i,l),r.subtreeFlags=i.subtreeFlags&14680064),a!==null?o=Ot(a,o):(o=Wt(o,s,n,null),o.flags|=2),o.return=t,r.return=t,r.sibling=o,t.child=r,r=o,o=t.child,s=e.child.memoizedState,s=s===null?Sl(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},o.memoizedState=s,o.childLanes=e.childLanes&~n,t.memoizedState=vl,r}return o=e.child,e=o.sibling,r=Ot(o,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function au(e,t){return t=zo({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function $i(e,t,n,r){return r!==null&&Wl(r),Ln(t,e.child,null,n),e=au(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Ng(e,t,n,r,i,o,s){if(n)return t.flags&256?(t.flags&=-257,r=Ma(Error(k(422))),$i(e,t,s,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(o=r.fallback,i=t.mode,r=zo({mode:"visible",children:r.children},i,0,null),o=Wt(o,i,s,null),o.flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,t.mode&1&&Ln(t,e.child,null,s),t.child.memoizedState=Sl(s),t.memoizedState=vl,o);if(!(t.mode&1))return $i(e,t,s,null);if(i.data==="$!"){if(r=i.nextSibling&&i.nextSibling.dataset,r)var a=r.dgst;return r=a,o=Error(k(419)),r=Ma(o,r,void 0),$i(e,t,s,r)}if(a=(s&e.childLanes)!==0,Se||a){if(r=re,r!==null){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}i=i&(r.suspendedLanes|s)?0:i,i!==0&&i!==o.retryLane&&(o.retryLane=i,lt(e,i),Ke(r,e,i,-1))}return du(),r=Ma(Error(k(421))),$i(e,t,s,r)}return i.data==="$?"?(t.flags|=128,t.child=e.child,t=Vg.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,Ee=It(i.nextSibling),Re=t,K=!0,Be=null,e!==null&&(Oe[Le++]=rt,Oe[Le++]=it,Oe[Le++]=Qt,rt=e.id,it=e.overflow,Qt=t),t=au(t,r.children),t.flags|=4096,t)}function Nf(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),pl(e.return,t,n)}function Da(e,t,n,r,i){var o=e.memoizedState;o===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function yd(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(me(e,t,r.children,n),r=$.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&Nf(e,n,t);else if(e.tag===19)Nf(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(j($,r),!(t.mode&1))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;n!==null;)e=n.alternate,e!==null&&ko(e)===null&&(i=n),n=n.sibling;n=i,n===null?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Da(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;i!==null;){if(e=i.alternate,e!==null&&ko(e)===null){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Da(t,!0,n,null,o);break;case"together":Da(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function eo(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function ut(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Yt|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(k(153));if(t.child!==null){for(e=t.child,n=Ot(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Ot(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function wg(e,t,n){switch(t.tag){case 3:hd(t),On();break;case 5:Kp(t);break;case 1:ke(t.type)&&ho(t);break;case 4:Zl(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;j(vo,r._currentValue),r._currentValue=i;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(j($,$.current&1),t.flags|=128,null):n&t.child.childLanes?gd(e,t,n):(j($,$.current&1),e=ut(e,t,n),e!==null?e.sibling:null);j($,$.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return yd(e,t,n);t.flags|=128}if(i=t.memoizedState,i!==null&&(i.rendering=null,i.tail=null,i.lastEffect=null),j($,$.current),r)break;return null;case 22:case 23:return t.lanes=0,dd(e,t,n)}return ut(e,t,n)}var vd,Cl,Sd,Cd;vd=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Cl=function(){};Sd=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,$t(Ye.current);var o=null;switch(n){case"input":i=Va(e,i),r=Va(e,r),o=[];break;case"select":i=W({},i,{value:void 0}),r=W({},r,{value:void 0}),o=[];break;case"textarea":i=$a(e,i),r=$a(e,r),o=[];break;default:typeof i.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=po)}Wa(n,r);var s;n=null;for(u in i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&i[u]!=null)if(u==="style"){var a=i[u];for(s in a)a.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(xr.hasOwnProperty(u)?o||(o=[]):(o=o||[]).push(u,null));for(u in r){var l=r[u];if(a=i?.[u],r.hasOwnProperty(u)&&l!==a&&(l!=null||a!=null))if(u==="style")if(a){for(s in a)!a.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in l)l.hasOwnProperty(s)&&a[s]!==l[s]&&(n||(n={}),n[s]=l[s])}else n||(o||(o=[]),o.push(u,n)),n=l;else u==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,a=a?a.__html:void 0,l!=null&&a!==l&&(o=o||[]).push(u,l)):u==="children"?typeof l!="string"&&typeof l!="number"||(o=o||[]).push(u,""+l):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(xr.hasOwnProperty(u)?(l!=null&&u==="onScroll"&&b("scroll",e),o||a===l||(o=[])):(o=o||[]).push(u,l))}n&&(o=o||[]).push("style",n);var u=o;(t.updateQueue=u)&&(t.flags|=4)}};Cd=function(e,t,n,r){n!==r&&(t.flags|=4)};function sr(e,t){if(!K)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ue(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags&14680064,r|=i.flags&14680064,i.return=e,i=i.sibling;else for(i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Og(e,t,n){var r=t.pendingProps;switch(Hl(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ue(t),null;case 1:return ke(t.type)&&mo(),ue(t),null;case 3:return r=t.stateNode,Mn(),B(Ce),B(fe),tu(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(Ki(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Be!==null&&(_l(Be),Be=null))),Cl(e,t),ue(t),null;case 5:eu(t);var i=$t(Dr.current);if(n=t.type,e!==null&&t.stateNode!=null)Sd(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(k(166));return ue(t),null}if(e=$t(Ye.current),Ki(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[Qe]=t,r[Lr]=o,e=(t.mode&1)!==0,n){case"dialog":b("cancel",r),b("close",r);break;case"iframe":case"object":case"embed":b("load",r);break;case"video":case"audio":for(i=0;i<pr.length;i++)b(pr[i],r);break;case"source":b("error",r);break;case"img":case"image":case"link":b("error",r),b("load",r);break;case"details":b("toggle",r);break;case"input":Ac(r,o),b("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},b("invalid",r);break;case"textarea":jc(r,o),b("invalid",r)}Wa(n,o),i=null;for(var s in o)if(o.hasOwnProperty(s)){var a=o[s];s==="children"?typeof a=="string"?r.textContent!==a&&(o.suppressHydrationWarning!==!0&&Vi(r.textContent,a,e),i=["children",a]):typeof a=="number"&&r.textContent!==""+a&&(o.suppressHydrationWarning!==!0&&Vi(r.textContent,a,e),i=["children",""+a]):xr.hasOwnProperty(s)&&a!=null&&s==="onScroll"&&b("scroll",r)}switch(n){case"input":wi(r),Uc(r,o,!0);break;case"textarea":wi(r),zc(r);break;case"select":case"option":break;default:typeof o.onClick=="function"&&(r.onclick=po)}r=i,t.updateQueue=r,r!==null&&(t.flags|=4)}else{s=i.nodeType===9?i:i.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Jf(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=s.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),n==="select"&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qe]=t,e[Lr]=r,vd(e,t,!1,!1),t.stateNode=e;e:{switch(s=Ja(n,r),n){case"dialog":b("cancel",e),b("close",e),i=r;break;case"iframe":case"object":case"embed":b("load",e),i=r;break;case"video":case"audio":for(i=0;i<pr.length;i++)b(pr[i],e);i=r;break;case"source":b("error",e),i=r;break;case"img":case"image":case"link":b("error",e),b("load",e),i=r;break;case"details":b("toggle",e),i=r;break;case"input":Ac(e,r),i=Va(e,r),b("invalid",e);break;case"option":i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=W({},r,{value:void 0}),b("invalid",e);break;case"textarea":jc(e,r),i=$a(e,r),b("invalid",e);break;default:i=r}Wa(n,i),a=i;for(o in a)if(a.hasOwnProperty(o)){var l=a[o];o==="style"?Yf(e,l):o==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&Qf(e,l)):o==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&Tr(e,l):typeof l=="number"&&Tr(e,""+l):o!=="suppressContentEditableWarning"&&o!=="suppressHydrationWarning"&&o!=="autoFocus"&&(xr.hasOwnProperty(o)?l!=null&&o==="onScroll"&&b("scroll",e):l!=null&&Ol(e,o,l,s))}switch(n){case"input":wi(e),Uc(e,r,!1);break;case"textarea":wi(e),zc(e);break;case"option":r.value!=null&&e.setAttribute("value",""+Lt(r.value));break;case"select":e.multiple=!!r.multiple,o=r.value,o!=null?Tn(e,!!r.multiple,o,!1):r.defaultValue!=null&&Tn(e,!!r.multiple,r.defaultValue,!0);break;default:typeof i.onClick=="function"&&(e.onclick=po)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return ue(t),null;case 6:if(e&&t.stateNode!=null)Cd(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(k(166));if(n=$t(Dr.current),$t(Ye.current),Ki(t)){if(r=t.stateNode,n=t.memoizedProps,r[Qe]=t,(o=r.nodeValue!==n)&&(e=Re,e!==null))switch(e.tag){case 3:Vi(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Vi(r.nodeValue,n,(e.mode&1)!==0)}o&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[Qe]=t,t.stateNode=r}return ue(t),null;case 13:if(B($),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(K&&Ee!==null&&t.mode&1&&!(t.flags&128))jp(),On(),t.flags|=98560,o=!1;else if(o=Ki(t),r!==null&&r.dehydrated!==null){if(e===null){if(!o)throw Error(k(318));if(o=t.memoizedState,o=o!==null?o.dehydrated:null,!o)throw Error(k(317));o[Qe]=t}else On(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;ue(t),o=!1}else Be!==null&&(_l(Be),Be=null),o=!0;if(!o)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||$.current&1?ee===0&&(ee=3):du())),t.updateQueue!==null&&(t.flags|=4),ue(t),null);case 4:return Mn(),Cl(e,t),e===null&&wr(t.stateNode.containerInfo),ue(t),null;case 10:return Xl(t.type._context),ue(t),null;case 17:return ke(t.type)&&mo(),ue(t),null;case 19:if(B($),o=t.memoizedState,o===null)return ue(t),null;if(r=(t.flags&128)!==0,s=o.rendering,s===null)if(r)sr(o,!1);else{if(ee!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(s=ko(e),s!==null){for(t.flags|=128,sr(o,!1),r=s.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)o=n,e=r,o.flags&=14680066,s=o.alternate,s===null?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=s.childLanes,o.lanes=s.lanes,o.child=s.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=s.memoizedProps,o.memoizedState=s.memoizedState,o.updateQueue=s.updateQueue,o.type=s.type,e=s.dependencies,o.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return j($,$.current&1|2),t.child}e=e.sibling}o.tail!==null&&X()>Fn&&(t.flags|=128,r=!0,sr(o,!1),t.lanes=4194304)}else{if(!r)if(e=ko(s),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),sr(o,!0),o.tail===null&&o.tailMode==="hidden"&&!s.alternate&&!K)return ue(t),null}else 2*X()-o.renderingStartTime>Fn&&n!==1073741824&&(t.flags|=128,r=!0,sr(o,!1),t.lanes=4194304);o.isBackwards?(s.sibling=t.child,t.child=s):(n=o.last,n!==null?n.sibling=s:t.child=s,o.last=s)}return o.tail!==null?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=X(),t.sibling=null,n=$.current,j($,r?n&1|2:n&1),t):(ue(t),null);case 22:case 23:return pu(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?Te&1073741824&&(ue(t),t.subtreeFlags&6&&(t.flags|=8192)):ue(t),null;case 24:return null;case 25:return null}throw Error(k(156,t.tag))}function Lg(e,t){switch(Hl(t),t.tag){case 1:return ke(t.type)&&mo(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Mn(),B(Ce),B(fe),tu(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return eu(t),null;case 13:if(B($),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(k(340));On()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return B($),null;case 4:return Mn(),null;case 10:return Xl(t.type._context),null;case 22:case 23:return pu(),null;case 24:return null;default:return null}}var Hi=!1,ce=!1,Mg=typeof WeakSet=="function"?WeakSet:Set,T=null;function kn(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){J(e,t,r)}else n.current=null}function kl(e,t,n){try{n()}catch(r){J(e,t,r)}}var wf=!1;function Dg(e,t){if(il=uo,e=Rp(),Gl(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var i=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch{n=null;break e}var s=0,a=-1,l=-1,u=0,c=0,f=e,p=null;t:for(;;){for(var g;f!==n||i!==0&&f.nodeType!==3||(a=s+i),f!==o||r!==0&&f.nodeType!==3||(l=s+r),f.nodeType===3&&(s+=f.nodeValue.length),(g=f.firstChild)!==null;)p=f,f=g;for(;;){if(f===e)break t;if(p===n&&++u===i&&(a=s),p===o&&++c===r&&(l=s),(g=f.nextSibling)!==null)break;f=p,p=f.parentNode}f=g}n=a===-1||l===-1?null:{start:a,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(ol={focusedElem:e,selectionRange:n},uo=!1,T=t;T!==null;)if(t=T,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,T=e;else for(;T!==null;){t=T;try{var S=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(S!==null){var v=S.memoizedProps,w=S.memoizedState,m=t.stateNode,d=m.getSnapshotBeforeUpdate(t.elementType===t.type?v:ze(t.type,v),w);m.__reactInternalSnapshotBeforeUpdate=d}break;case 3:var h=t.stateNode.containerInfo;h.nodeType===1?h.textContent="":h.nodeType===9&&h.documentElement&&h.removeChild(h.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(k(163))}}catch(x){J(t,t.return,x)}if(e=t.sibling,e!==null){e.return=t.return,T=e;break}T=t.return}return S=wf,wf=!1,S}function Sr(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,o!==void 0&&kl(t,n,o)}i=i.next}while(i!==r)}}function Uo(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function xl(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function kd(e){var t=e.alternate;t!==null&&(e.alternate=null,kd(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[Qe],delete t[Lr],delete t[ll],delete t[gg],delete t[yg])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function xd(e){return e.tag===5||e.tag===3||e.tag===4}function Of(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||xd(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Tl(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=po));else if(r!==4&&(e=e.child,e!==null))for(Tl(e,t,n),e=e.sibling;e!==null;)Tl(e,t,n),e=e.sibling}function El(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(El(e,t,n),e=e.sibling;e!==null;)El(e,t,n),e=e.sibling}var ie=null,be=!1;function yt(e,t,n){for(n=n.child;n!==null;)Td(e,t,n),n=n.sibling}function Td(e,t,n){if(Xe&&typeof Xe.onCommitFiberUnmount=="function")try{Xe.onCommitFiberUnmount(No,n)}catch{}switch(n.tag){case 5:ce||kn(n,t);case 6:var r=ie,i=be;ie=null,yt(e,t,n),ie=r,be=i,ie!==null&&(be?(e=ie,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):ie.removeChild(n.stateNode));break;case 18:ie!==null&&(be?(e=ie,n=n.stateNode,e.nodeType===8?Ia(e.parentNode,n):e.nodeType===1&&Ia(e,n),Ir(e)):Ia(ie,n.stateNode));break;case 4:r=ie,i=be,ie=n.stateNode.containerInfo,be=!0,yt(e,t,n),ie=r,be=i;break;case 0:case 11:case 14:case 15:if(!ce&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){i=r=r.next;do{var o=i,s=o.destroy;o=o.tag,s!==void 0&&(o&2||o&4)&&kl(n,t,s),i=i.next}while(i!==r)}yt(e,t,n);break;case 1:if(!ce&&(kn(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(a){J(n,t,a)}yt(e,t,n);break;case 21:yt(e,t,n);break;case 22:n.mode&1?(ce=(r=ce)||n.memoizedState!==null,yt(e,t,n),ce=r):yt(e,t,n);break;default:yt(e,t,n)}}function Lf(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new Mg),t.forEach(function(r){var i=Kg.bind(null,e,r);n.has(r)||(n.add(r),r.then(i,i))})}}function je(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var i=n[r];try{var o=e,s=t,a=s;e:for(;a!==null;){switch(a.tag){case 5:ie=a.stateNode,be=!1;break e;case 3:ie=a.stateNode.containerInfo,be=!0;break e;case 4:ie=a.stateNode.containerInfo,be=!0;break e}a=a.return}if(ie===null)throw Error(k(160));Td(o,s,i),ie=null,be=!1;var l=i.alternate;l!==null&&(l.return=null),i.return=null}catch(u){J(i,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)Ed(t,e),t=t.sibling}function Ed(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(je(t,e),We(e),r&4){try{Sr(3,e,e.return),Uo(3,e)}catch(v){J(e,e.return,v)}try{Sr(5,e,e.return)}catch(v){J(e,e.return,v)}}break;case 1:je(t,e),We(e),r&512&&n!==null&&kn(n,n.return);break;case 5:if(je(t,e),We(e),r&512&&n!==null&&kn(n,n.return),e.flags&32){var i=e.stateNode;try{Tr(i,"")}catch(v){J(e,e.return,v)}}if(r&4&&(i=e.stateNode,i!=null)){var o=e.memoizedProps,s=n!==null?n.memoizedProps:o,a=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{a==="input"&&o.type==="radio"&&o.name!=null&&Hf(i,o),Ja(a,s);var u=Ja(a,o);for(s=0;s<l.length;s+=2){var c=l[s],f=l[s+1];c==="style"?Yf(i,f):c==="dangerouslySetInnerHTML"?Qf(i,f):c==="children"?Tr(i,f):Ol(i,c,f,u)}switch(a){case"input":Ka(i,o);break;case"textarea":Wf(i,o);break;case"select":var p=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var g=o.value;g!=null?Tn(i,!!o.multiple,g,!1):p!==!!o.multiple&&(o.defaultValue!=null?Tn(i,!!o.multiple,o.defaultValue,!0):Tn(i,!!o.multiple,o.multiple?[]:"",!1))}i[Lr]=o}catch(v){J(e,e.return,v)}}break;case 6:if(je(t,e),We(e),r&4){if(e.stateNode===null)throw Error(k(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(v){J(e,e.return,v)}}break;case 3:if(je(t,e),We(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Ir(t.containerInfo)}catch(v){J(e,e.return,v)}break;case 4:je(t,e),We(e);break;case 13:je(t,e),We(e),i=e.child,i.flags&8192&&(o=i.memoizedState!==null,i.stateNode.isHidden=o,!o||i.alternate!==null&&i.alternate.memoizedState!==null||(cu=X())),r&4&&Lf(e);break;case 22:if(c=n!==null&&n.memoizedState!==null,e.mode&1?(ce=(u=ce)||c,je(t,e),ce=u):je(t,e),We(e),r&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!c&&e.mode&1)for(T=e,c=e.child;c!==null;){for(f=T=c;T!==null;){switch(p=T,g=p.child,p.tag){case 0:case 11:case 14:case 15:Sr(4,p,p.return);break;case 1:kn(p,p.return);var S=p.stateNode;if(typeof S.componentWillUnmount=="function"){r=p,n=p.return;try{t=r,S.props=t.memoizedProps,S.state=t.memoizedState,S.componentWillUnmount()}catch(v){J(r,n,v)}}break;case 5:kn(p,p.return);break;case 22:if(p.memoizedState!==null){Df(f);continue}}g!==null?(g.return=p,T=g):Df(f)}c=c.sibling}e:for(c=null,f=e;;){if(f.tag===5){if(c===null){c=f;try{i=f.stateNode,u?(o=i.style,typeof o.setProperty=="function"?o.setProperty("display","none","important"):o.display="none"):(a=f.stateNode,l=f.memoizedProps.style,s=l!=null&&l.hasOwnProperty("display")?l.display:null,a.style.display=Xf("display",s))}catch(v){J(e,e.return,v)}}}else if(f.tag===6){if(c===null)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(v){J(e,e.return,v)}}else if((f.tag!==22&&f.tag!==23||f.memoizedState===null||f===e)&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;f.sibling===null;){if(f.return===null||f.return===e)break e;c===f&&(c=null),f=f.return}c===f&&(c=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:je(t,e),We(e),r&4&&Lf(e);break;case 21:break;default:je(t,e),We(e)}}function We(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(xd(n)){var r=n;break e}n=n.return}throw Error(k(160))}switch(r.tag){case 5:var i=r.stateNode;r.flags&32&&(Tr(i,""),r.flags&=-33);var o=Of(e);El(e,o,i);break;case 3:case 4:var s=r.stateNode.containerInfo,a=Of(e);Tl(e,a,s);break;default:throw Error(k(161))}}catch(l){J(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Fg(e,t,n){T=e,Rd(e,t,n)}function Rd(e,t,n){for(var r=(e.mode&1)!==0;T!==null;){var i=T,o=i.child;if(i.tag===22&&r){var s=i.memoizedState!==null||Hi;if(!s){var a=i.alternate,l=a!==null&&a.memoizedState!==null||ce;a=Hi;var u=ce;if(Hi=s,(ce=l)&&!u)for(T=i;T!==null;)s=T,l=s.child,s.tag===22&&s.memoizedState!==null?Ff(i):l!==null?(l.return=s,T=l):Ff(i);for(;o!==null;)T=o,Rd(o,t,n),o=o.sibling;T=i,Hi=a,ce=u}Mf(e,t,n)}else i.subtreeFlags&8772&&o!==null?(o.return=i,T=o):Mf(e,t,n)}}function Mf(e){for(;T!==null;){var t=T;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:ce||Uo(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!ce)if(n===null)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:ze(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;o!==null&&yf(t,o,r);break;case 3:var s=t.updateQueue;if(s!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}yf(t,s,n)}break;case 5:var a=t.stateNode;if(n===null&&t.flags&4){n=a;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var f=c.dehydrated;f!==null&&Ir(f)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(k(163))}ce||t.flags&512&&xl(t)}catch(p){J(t,t.return,p)}}if(t===e){T=null;break}if(n=t.sibling,n!==null){n.return=t.return,T=n;break}T=t.return}}function Df(e){for(;T!==null;){var t=T;if(t===e){T=null;break}var n=t.sibling;if(n!==null){n.return=t.return,T=n;break}T=t.return}}function Ff(e){for(;T!==null;){var t=T;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Uo(4,t)}catch(l){J(t,n,l)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var i=t.return;try{r.componentDidMount()}catch(l){J(t,i,l)}}var o=t.return;try{xl(t)}catch(l){J(t,o,l)}break;case 5:var s=t.return;try{xl(t)}catch(l){J(t,s,l)}}}catch(l){J(t,t.return,l)}if(t===e){T=null;break}var a=t.sibling;if(a!==null){a.return=t.return,T=a;break}T=t.return}}var Ag=Math.ceil,Eo=ct.ReactCurrentDispatcher,lu=ct.ReactCurrentOwner,De=ct.ReactCurrentBatchConfig,M=0,re=null,q=null,oe=0,Te=0,xn=Ft(0),ee=0,jr=null,Yt=0,jo=0,uu=0,Cr=null,ve=null,cu=0,Fn=1/0,tt=null,Ro=!1,Rl=null,Nt=null,Wi=!1,Tt=null,Po=0,kr=0,Pl=null,to=-1,no=0;function he(){return M&6?X():to!==-1?to:to=X()}function wt(e){return e.mode&1?M&2&&oe!==0?oe&-oe:Sg.transition!==null?(no===0&&(no=up()),no):(e=F,e!==0||(e=window.event,e=e===void 0?16:gp(e.type)),e):1}function Ke(e,t,n,r){if(50<kr)throw kr=0,Pl=null,Error(k(185));zr(e,n,r),(!(M&2)||e!==re)&&(e===re&&(!(M&2)&&(jo|=n),ee===4&&kt(e,oe)),xe(e,r),n===1&&M===0&&!(t.mode&1)&&(Fn=X()+500,Do&&At()))}function xe(e,t){var n=e.callbackNode;kh(e,t);var r=lo(e,e===re?oe:0);if(r===0)n!==null&&Vc(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&Vc(n),t===1)e.tag===0?vg(Af.bind(null,e)):Fp(Af.bind(null,e)),mg(function(){!(M&6)&&At()}),n=null;else{switch(cp(r)){case 1:n=Al;break;case 4:n=ap;break;case 16:n=ao;break;case 536870912:n=lp;break;default:n=ao}n=Md(n,Pd.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Pd(e,t){if(to=-1,no=0,M&6)throw Error(k(327));var n=e.callbackNode;if(_n()&&e.callbackNode!==n)return null;var r=lo(e,e===re?oe:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=Io(e,r);else{t=r;var i=M;M|=2;var o=_d();(re!==e||oe!==t)&&(tt=null,Fn=X()+500,Ht(e,t));do try{zg();break}catch(a){Id(e,a)}while(!0);Ql(),Eo.current=o,M=i,q!==null?t=0:(re=null,oe=0,t=ee)}if(t!==0){if(t===2&&(i=Za(e),i!==0&&(r=i,t=Il(e,i))),t===1)throw n=jr,Ht(e,0),kt(e,r),xe(e,X()),n;if(t===6)kt(e,r);else{if(i=e.current.alternate,!(r&30)&&!Ug(i)&&(t=Io(e,r),t===2&&(o=Za(e),o!==0&&(r=o,t=Il(e,o))),t===1))throw n=jr,Ht(e,0),kt(e,r),xe(e,X()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(k(345));case 2:Vt(e,ve,tt);break;case 3:if(kt(e,r),(r&130023424)===r&&(t=cu+500-X(),10<t)){if(lo(e,0)!==0)break;if(i=e.suspendedLanes,(i&r)!==r){he(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=al(Vt.bind(null,e,ve,tt),t);break}Vt(e,ve,tt);break;case 4:if(kt(e,r),(r&4194240)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-Ve(r);o=1<<s,s=t[s],s>i&&(i=s),r&=~o}if(r=i,r=X()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ag(r/1960))-r,10<r){e.timeoutHandle=al(Vt.bind(null,e,ve,tt),r);break}Vt(e,ve,tt);break;case 5:Vt(e,ve,tt);break;default:throw Error(k(329))}}}return xe(e,X()),e.callbackNode===n?Pd.bind(null,e):null}function Il(e,t){var n=Cr;return e.current.memoizedState.isDehydrated&&(Ht(e,t).flags|=256),e=Io(e,t),e!==2&&(t=ve,ve=n,t!==null&&_l(t)),e}function _l(e){ve===null?ve=e:ve.push.apply(ve,e)}function Ug(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!Ge(o(),i))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function kt(e,t){for(t&=~uu,t&=~jo,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ve(t),r=1<<n;e[n]=-1,t&=~r}}function Af(e){if(M&6)throw Error(k(327));_n();var t=lo(e,0);if(!(t&1))return xe(e,X()),null;var n=Io(e,t);if(e.tag!==0&&n===2){var r=Za(e);r!==0&&(t=r,n=Il(e,r))}if(n===1)throw n=jr,Ht(e,0),kt(e,t),xe(e,X()),n;if(n===6)throw Error(k(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Vt(e,ve,tt),xe(e,X()),null}function fu(e,t){var n=M;M|=1;try{return e(t)}finally{M=n,M===0&&(Fn=X()+500,Do&&At())}}function qt(e){Tt!==null&&Tt.tag===0&&!(M&6)&&_n();var t=M;M|=1;var n=De.transition,r=F;try{if(De.transition=null,F=1,e)return e()}finally{F=r,De.transition=n,M=t,!(M&6)&&At()}}function pu(){Te=xn.current,B(xn)}function Ht(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,dg(n)),q!==null)for(n=q.return;n!==null;){var r=n;switch(Hl(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&mo();break;case 3:Mn(),B(Ce),B(fe),tu();break;case 5:eu(r);break;case 4:Mn();break;case 13:B($);break;case 19:B($);break;case 10:Xl(r.type._context);break;case 22:case 23:pu()}n=n.return}if(re=e,q=e=Ot(e.current,null),oe=Te=t,ee=0,jr=null,uu=jo=Yt=0,ve=Cr=null,Gt!==null){for(t=0;t<Gt.length;t++)if(n=Gt[t],r=n.interleaved,r!==null){n.interleaved=null;var i=r.next,o=n.pending;if(o!==null){var s=o.next;o.next=i,r.next=s}n.pending=r}Gt=null}return e}function Id(e,t){do{var n=q;try{if(Ql(),qi.current=To,xo){for(var r=H.memoizedState;r!==null;){var i=r.queue;i!==null&&(i.pending=null),r=r.next}xo=!1}if(Xt=0,ne=Z=H=null,vr=!1,Fr=0,lu.current=null,n===null||n.return===null){ee=1,jr=t,q=null;break}e:{var o=e,s=n.return,a=n,l=t;if(t=oe,a.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var u=l,c=a,f=c.tag;if(!(c.mode&1)&&(f===0||f===11||f===15)){var p=c.alternate;p?(c.updateQueue=p.updateQueue,c.memoizedState=p.memoizedState,c.lanes=p.lanes):(c.updateQueue=null,c.memoizedState=null)}var g=Tf(s);if(g!==null){g.flags&=-257,Ef(g,s,a,o,t),g.mode&1&&xf(o,u,t),t=g,l=u;var S=t.updateQueue;if(S===null){var v=new Set;v.add(l),t.updateQueue=v}else S.add(l);break e}else{if(!(t&1)){xf(o,u,t),du();break e}l=Error(k(426))}}else if(K&&a.mode&1){var w=Tf(s);if(w!==null){!(w.flags&65536)&&(w.flags|=256),Ef(w,s,a,o,t),Wl(Dn(l,a));break e}}o=l=Dn(l,a),ee!==4&&(ee=2),Cr===null?Cr=[o]:Cr.push(o),o=s;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t;var m=cd(o,l,t);gf(o,m);break e;case 1:a=l;var d=o.type,h=o.stateNode;if(!(o.flags&128)&&(typeof d.getDerivedStateFromError=="function"||h!==null&&typeof h.componentDidCatch=="function"&&(Nt===null||!Nt.has(h)))){o.flags|=65536,t&=-t,o.lanes|=t;var x=fd(o,a,t);gf(o,x);break e}}o=o.return}while(o!==null)}wd(n)}catch(E){t=E,q===n&&n!==null&&(q=n=n.return);continue}break}while(!0)}function _d(){var e=Eo.current;return Eo.current=To,e===null?To:e}function du(){(ee===0||ee===3||ee===2)&&(ee=4),re===null||!(Yt&268435455)&&!(jo&268435455)||kt(re,oe)}function Io(e,t){var n=M;M|=2;var r=_d();(re!==e||oe!==t)&&(tt=null,Ht(e,t));do try{jg();break}catch(i){Id(e,i)}while(!0);if(Ql(),M=n,Eo.current=r,q!==null)throw Error(k(261));return re=null,oe=0,ee}function jg(){for(;q!==null;)Nd(q)}function zg(){for(;q!==null&&!ph();)Nd(q)}function Nd(e){var t=Ld(e.alternate,e,Te);e.memoizedProps=e.pendingProps,t===null?wd(e):q=t,lu.current=null}function wd(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=Lg(n,t),n!==null){n.flags&=32767,q=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{ee=6,q=null;return}}else if(n=Og(n,t,Te),n!==null){q=n;return}if(t=t.sibling,t!==null){q=t;return}q=t=e}while(t!==null);ee===0&&(ee=5)}function Vt(e,t,n){var r=F,i=De.transition;try{De.transition=null,F=1,bg(e,t,n,r)}finally{De.transition=i,F=r}return null}function bg(e,t,n,r){do _n();while(Tt!==null);if(M&6)throw Error(k(327));n=e.finishedWork;var i=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(k(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(xh(e,o),e===re&&(q=re=null,oe=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Wi||(Wi=!0,Md(ao,function(){return _n(),null})),o=(n.flags&15990)!==0,n.subtreeFlags&15990||o){o=De.transition,De.transition=null;var s=F;F=1;var a=M;M|=4,lu.current=null,Dg(e,n),Ed(n,e),lg(ol),uo=!!il,ol=il=null,e.current=n,Fg(n,e,i),dh(),M=a,F=s,De.transition=o}else e.current=n;if(Wi&&(Wi=!1,Tt=e,Po=i),o=e.pendingLanes,o===0&&(Nt=null),gh(n.stateNode,r),xe(e,X()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)i=t[n],r(i.value,{componentStack:i.stack,digest:i.digest});if(Ro)throw Ro=!1,e=Rl,Rl=null,e;return Po&1&&e.tag!==0&&_n(),o=e.pendingLanes,o&1?e===Pl?kr++:(kr=0,Pl=e):kr=0,At(),null}function _n(){if(Tt!==null){var e=cp(Po),t=De.transition,n=F;try{if(De.transition=null,F=16>e?16:e,Tt===null)var r=!1;else{if(e=Tt,Tt=null,Po=0,M&6)throw Error(k(331));var i=M;for(M|=4,T=e.current;T!==null;){var o=T,s=o.child;if(T.flags&16){var a=o.deletions;if(a!==null){for(var l=0;l<a.length;l++){var u=a[l];for(T=u;T!==null;){var c=T;switch(c.tag){case 0:case 11:case 15:Sr(8,c,o)}var f=c.child;if(f!==null)f.return=c,T=f;else for(;T!==null;){c=T;var p=c.sibling,g=c.return;if(kd(c),c===u){T=null;break}if(p!==null){p.return=g,T=p;break}T=g}}}var S=o.alternate;if(S!==null){var v=S.child;if(v!==null){S.child=null;do{var w=v.sibling;v.sibling=null,v=w}while(v!==null)}}T=o}}if(o.subtreeFlags&2064&&s!==null)s.return=o,T=s;else e:for(;T!==null;){if(o=T,o.flags&2048)switch(o.tag){case 0:case 11:case 15:Sr(9,o,o.return)}var m=o.sibling;if(m!==null){m.return=o.return,T=m;break e}T=o.return}}var d=e.current;for(T=d;T!==null;){s=T;var h=s.child;if(s.subtreeFlags&2064&&h!==null)h.return=s,T=h;else e:for(s=d;T!==null;){if(a=T,a.flags&2048)try{switch(a.tag){case 0:case 11:case 15:Uo(9,a)}}catch(E){J(a,a.return,E)}if(a===s){T=null;break e}var x=a.sibling;if(x!==null){x.return=a.return,T=x;break e}T=a.return}}if(M=i,At(),Xe&&typeof Xe.onPostCommitFiberRoot=="function")try{Xe.onPostCommitFiberRoot(No,e)}catch{}r=!0}return r}finally{F=n,De.transition=t}}return!1}function Uf(e,t,n){t=Dn(n,t),t=cd(e,t,1),e=_t(e,t,1),t=he(),e!==null&&(zr(e,1,t),xe(e,t))}function J(e,t,n){if(e.tag===3)Uf(e,e,n);else for(;t!==null;){if(t.tag===3){Uf(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Nt===null||!Nt.has(r))){e=Dn(n,e),e=fd(t,e,1),t=_t(t,e,1),e=he(),t!==null&&(zr(t,1,e),xe(t,e));break}}t=t.return}}function Bg(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=he(),e.pingedLanes|=e.suspendedLanes&n,re===e&&(oe&n)===n&&(ee===4||ee===3&&(oe&130023424)===oe&&500>X()-cu?Ht(e,0):uu|=n),xe(e,t)}function Od(e,t){t===0&&(e.mode&1?(t=Mi,Mi<<=1,!(Mi&130023424)&&(Mi=4194304)):t=1);var n=he();e=lt(e,t),e!==null&&(zr(e,t,n),xe(e,n))}function Vg(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Od(e,n)}function Kg(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;i!==null&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(k(314))}r!==null&&r.delete(t),Od(e,n)}var Ld;Ld=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||Ce.current)Se=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return Se=!1,wg(e,t,n);Se=!!(e.flags&131072)}else Se=!1,K&&t.flags&1048576&&Ap(t,yo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;eo(e,t),e=t.pendingProps;var i=wn(t,fe.current);In(t,n),i=ru(null,t,r,e,i,n);var o=iu();return t.flags|=1,typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ke(r)?(o=!0,ho(t)):o=!1,t.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,ql(t),i.updater=Ao,t.stateNode=i,i._reactInternals=t,ml(t,r,e,n),t=yl(null,t,r,!0,o,n)):(t.tag=0,K&&o&&$l(t),me(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(eo(e,t),e=t.pendingProps,i=r._init,r=i(r._payload),t.type=r,i=t.tag=$g(r),e=ze(r,e),i){case 0:t=gl(null,t,r,e,n);break e;case 1:t=If(null,t,r,e,n);break e;case 11:t=Rf(null,t,r,e,n);break e;case 14:t=Pf(null,t,r,ze(r.type,e),n);break e}throw Error(k(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ze(r,i),gl(e,t,r,i,n);case 1:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ze(r,i),If(e,t,r,i,n);case 3:e:{if(hd(t),e===null)throw Error(k(387));r=t.pendingProps,o=t.memoizedState,i=o.element,Vp(e,t),Co(t,r,null,n);var s=t.memoizedState;if(r=s.element,o.isDehydrated)if(o={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=o,t.memoizedState=o,t.flags&256){i=Dn(Error(k(423)),t),t=_f(e,t,r,n,i);break e}else if(r!==i){i=Dn(Error(k(424)),t),t=_f(e,t,r,n,i);break e}else for(Ee=It(t.stateNode.containerInfo.firstChild),Re=t,K=!0,Be=null,n=bp(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(On(),r===i){t=ut(e,t,n);break e}me(e,t,r,n)}t=t.child}return t;case 5:return Kp(t),e===null&&fl(t),r=t.type,i=t.pendingProps,o=e!==null?e.memoizedProps:null,s=i.children,sl(r,i)?s=null:o!==null&&sl(r,o)&&(t.flags|=32),md(e,t),me(e,t,s,n),t.child;case 6:return e===null&&fl(t),null;case 13:return gd(e,t,n);case 4:return Zl(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=Ln(t,null,r,n):me(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ze(r,i),Rf(e,t,r,i,n);case 7:return me(e,t,t.pendingProps,n),t.child;case 8:return me(e,t,t.pendingProps.children,n),t.child;case 12:return me(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,o=t.memoizedProps,s=i.value,j(vo,r._currentValue),r._currentValue=s,o!==null)if(Ge(o.value,s)){if(o.children===i.children&&!Ce.current){t=ut(e,t,n);break e}}else for(o=t.child,o!==null&&(o.return=t);o!==null;){var a=o.dependencies;if(a!==null){s=o.child;for(var l=a.firstContext;l!==null;){if(l.context===r){if(o.tag===1){l=ot(-1,n&-n),l.tag=2;var u=o.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?l.next=l:(l.next=c.next,c.next=l),u.pending=l}}o.lanes|=n,l=o.alternate,l!==null&&(l.lanes|=n),pl(o.return,n,t),a.lanes|=n;break}l=l.next}}else if(o.tag===10)s=o.type===t.type?null:o.child;else if(o.tag===18){if(s=o.return,s===null)throw Error(k(341));s.lanes|=n,a=s.alternate,a!==null&&(a.lanes|=n),pl(s,n,t),s=o.sibling}else s=o.child;if(s!==null)s.return=o;else for(s=o;s!==null;){if(s===t){s=null;break}if(o=s.sibling,o!==null){o.return=s.return,s=o;break}s=s.return}o=s}me(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,In(t,n),i=Fe(i),r=r(i),t.flags|=1,me(e,t,r,n),t.child;case 14:return r=t.type,i=ze(r,t.pendingProps),i=ze(r.type,i),Pf(e,t,r,i,n);case 15:return pd(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ze(r,i),eo(e,t),t.tag=1,ke(r)?(e=!0,ho(t)):e=!1,In(t,n),ud(t,r,i),ml(t,r,i,n),yl(null,t,r,!0,e,n);case 19:return yd(e,t,n);case 22:return dd(e,t,n)}throw Error(k(156,t.tag))};function Md(e,t){return sp(e,t)}function Gg(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Me(e,t,n,r){return new Gg(e,t,n,r)}function mu(e){return e=e.prototype,!(!e||!e.isReactComponent)}function $g(e){if(typeof e=="function")return mu(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Ml)return 11;if(e===Dl)return 14}return 2}function Ot(e,t){var n=e.alternate;return n===null?(n=Me(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ro(e,t,n,r,i,o){var s=2;if(r=e,typeof e=="function")mu(e)&&(s=1);else if(typeof e=="string")s=5;else e:switch(e){case pn:return Wt(n.children,i,o,t);case Ll:s=8,i|=8;break;case ja:return e=Me(12,n,t,i|2),e.elementType=ja,e.lanes=o,e;case za:return e=Me(13,n,t,i),e.elementType=za,e.lanes=o,e;case ba:return e=Me(19,n,t,i),e.elementType=ba,e.lanes=o,e;case Kf:return zo(n,i,o,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Bf:s=10;break e;case Vf:s=9;break e;case Ml:s=11;break e;case Dl:s=14;break e;case vt:s=16,r=null;break e}throw Error(k(130,e==null?e:typeof e,""))}return t=Me(s,n,t,i),t.elementType=e,t.type=r,t.lanes=o,t}function Wt(e,t,n,r){return e=Me(7,e,r,t),e.lanes=n,e}function zo(e,t,n,r){return e=Me(22,e,r,t),e.elementType=Kf,e.lanes=n,e.stateNode={isHidden:!1},e}function Fa(e,t,n){return e=Me(6,e,null,t),e.lanes=n,e}function Aa(e,t,n){return t=Me(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hg(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Sa(0),this.expirationTimes=Sa(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Sa(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function hu(e,t,n,r,i,o,s,a,l){return e=new Hg(e,t,n,a,l),t===1?(t=1,o===!0&&(t|=8)):t=0,o=Me(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},ql(o),e}function Wg(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:fn,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function Dd(e){if(!e)return Mt;e=e._reactInternals;e:{if(en(e)!==e||e.tag!==1)throw Error(k(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ke(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(k(171))}if(e.tag===1){var n=e.type;if(ke(n))return Dp(e,n,t)}return t}function Fd(e,t,n,r,i,o,s,a,l){return e=hu(n,r,!0,e,i,o,s,a,l),e.context=Dd(null),n=e.current,r=he(),i=wt(n),o=ot(r,i),o.callback=t??null,_t(n,o,i),e.current.lanes=i,zr(e,i,r),xe(e,r),e}function bo(e,t,n,r){var i=t.current,o=he(),s=wt(i);return n=Dd(n),t.context===null?t.context=n:t.pendingContext=n,t=ot(o,s),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=_t(i,t,s),e!==null&&(Ke(e,i,s,o),Yi(e,i,s)),s}function _o(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function jf(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function gu(e,t){jf(e,t),(e=e.alternate)&&jf(e,t)}function Jg(){return null}var Ad=typeof reportError=="function"?reportError:function(e){console.error(e)};function yu(e){this._internalRoot=e}Bo.prototype.render=yu.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(k(409));bo(e,t,null,null)};Bo.prototype.unmount=yu.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;qt(function(){bo(null,e,null,null)}),t[at]=null}};function Bo(e){this._internalRoot=e}Bo.prototype.unstable_scheduleHydration=function(e){if(e){var t=dp();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Ct.length&&t!==0&&t<Ct[n].priority;n++);Ct.splice(n,0,e),n===0&&hp(e)}};function vu(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Vo(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function zf(){}function Qg(e,t,n,r,i){if(i){if(typeof r=="function"){var o=r;r=function(){var u=_o(s);o.call(u)}}var s=Fd(t,r,e,0,null,!1,!1,"",zf);return e._reactRootContainer=s,e[at]=s.current,wr(e.nodeType===8?e.parentNode:e),qt(),s}for(;i=e.lastChild;)e.removeChild(i);if(typeof r=="function"){var a=r;r=function(){var u=_o(l);a.call(u)}}var l=hu(e,0,!1,null,null,!1,!1,"",zf);return e._reactRootContainer=l,e[at]=l.current,wr(e.nodeType===8?e.parentNode:e),qt(function(){bo(t,l,n,r)}),l}function Ko(e,t,n,r,i){var o=n._reactRootContainer;if(o){var s=o;if(typeof i=="function"){var a=i;i=function(){var l=_o(s);a.call(l)}}bo(t,s,e,i)}else s=Qg(n,t,e,i,r);return _o(s)}fp=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=fr(t.pendingLanes);n!==0&&(Ul(t,n|1),xe(t,X()),!(M&6)&&(Fn=X()+500,At()))}break;case 13:qt(function(){var r=lt(e,1);if(r!==null){var i=he();Ke(r,e,1,i)}}),gu(e,1)}};jl=function(e){if(e.tag===13){var t=lt(e,134217728);if(t!==null){var n=he();Ke(t,e,134217728,n)}gu(e,134217728)}};pp=function(e){if(e.tag===13){var t=wt(e),n=lt(e,t);if(n!==null){var r=he();Ke(n,e,t,r)}gu(e,t)}};dp=function(){return F};mp=function(e,t){var n=F;try{return F=e,t()}finally{F=n}};Xa=function(e,t,n){switch(t){case"input":if(Ka(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Mo(r);if(!i)throw Error(k(90));$f(r),Ka(r,i)}}}break;case"textarea":Wf(e,n);break;case"select":t=n.value,t!=null&&Tn(e,!!n.multiple,t,!1)}};ep=fu;tp=qt;var Xg={usingClientEntryPoint:!1,Events:[Br,gn,Mo,qf,Zf,fu]},ar={findFiberByHostInstance:Kt,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},Yg={bundleType:ar.bundleType,version:ar.version,rendererPackageName:ar.rendererPackageName,rendererConfig:ar.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ct.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=ip(e),e===null?null:e.stateNode},findFiberByHostInstance:ar.findFiberByHostInstance||Jg,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&(lr=__REACT_DEVTOOLS_GLOBAL_HOOK__,!lr.isDisabled&&lr.supportsFiber))try{No=lr.inject(Yg),Xe=lr}catch{}var lr;_e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Xg;_e.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!vu(t))throw Error(k(200));return Wg(e,t,null,n)};_e.createRoot=function(e,t){if(!vu(e))throw Error(k(299));var n=!1,r="",i=Ad;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(i=t.onRecoverableError)),t=hu(e,1,!1,null,null,n,!1,r,i),e[at]=t.current,wr(e.nodeType===8?e.parentNode:e),new yu(t)};_e.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(k(188)):(e=Object.keys(e).join(","),Error(k(268,e)));return e=ip(t),e=e===null?null:e.stateNode,e};_e.flushSync=function(e){return qt(e)};_e.hydrate=function(e,t,n){if(!Vo(t))throw Error(k(200));return Ko(null,e,t,!0,n)};_e.hydrateRoot=function(e,t,n){if(!vu(e))throw Error(k(405));var r=n!=null&&n.hydratedSources||null,i=!1,o="",s=Ad;if(n!=null&&(n.unstable_strictMode===!0&&(i=!0),n.identifierPrefix!==void 0&&(o=n.identifierPrefix),n.onRecoverableError!==void 0&&(s=n.onRecoverableError)),t=Fd(t,null,e,1,n??null,i,!1,o,s),e[at]=t.current,wr(e),r)for(e=0;e<r.length;e++)n=r[e],i=n._getVersion,i=i(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Bo(t)};_e.render=function(e,t,n){if(!Vo(t))throw Error(k(200));return Ko(null,e,t,!1,n)};_e.unmountComponentAtNode=function(e){if(!Vo(e))throw Error(k(40));return e._reactRootContainer?(qt(function(){Ko(null,null,e,!1,function(){e._reactRootContainer=null,e[at]=null})}),!0):!1};_e.unstable_batchedUpdates=fu;_e.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Vo(n))throw Error(k(200));if(e==null||e._reactInternals===void 0)throw Error(k(38));return Ko(e,t,n,!1,r)};_e.version="18.3.1-next-f1338f8080-20240426"});var bd=pt((q0,zd)=>{"use strict";function jd(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(jd)}catch(e){console.error(e)}}jd(),zd.exports=Ud()});var Vd=pt(Su=>{"use strict";var Bd=bd();Su.createRoot=Bd.createRoot,Su.hydrateRoot=Bd.hydrateRoot;var Z0});var L=tn(zn());function bn(e){let t=typeof e;if(t=="object"){if(Array.isArray(e))return"array";if(e===null)return"null"}return t}function rn(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)}var qe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""),Wr=[];for(let e=0;e<qe.length;e++)Wr[qe[e].charCodeAt(0)]=e;Wr[45]=qe.indexOf("+");Wr[95]=qe.indexOf("/");function Mu(e){let t=e.length*3/4;e[e.length-2]=="="?t-=2:e[e.length-1]=="="&&(t-=1);let n=new Uint8Array(t),r=0,i=0,o,s=0;for(let a=0;a<e.length;a++){if(o=Wr[e.charCodeAt(a)],o===void 0)switch(e[a]){case"=":i=0;case`
`:case"\r":case"	":case" ":continue;default:throw Error("invalid base64 string.")}switch(i){case 0:s=o,i=1;break;case 1:n[r++]=s<<2|(o&48)>>4,s=o,i=2;break;case 2:n[r++]=(s&15)<<4|(o&60)>>2,s=o,i=3;break;case 3:n[r++]=(s&3)<<6|o,i=0;break}}if(i==1)throw Error("invalid base64 string.");return n.subarray(0,r)}function Du(e){let t="",n=0,r,i=0;for(let o=0;o<e.length;o++)switch(r=e[o],n){case 0:t+=qe[r>>2],i=(r&3)<<4,n=1;break;case 1:t+=qe[i|r>>4],i=(r&15)<<2,n=2;break;case 2:t+=qe[i|r>>6],t+=qe[r&63],n=0;break}return n&&(t+=qe[i],t+="=",n==1&&(t+="=")),t}var Ut;(function(e){e.symbol=Symbol.for("protobuf-ts/unknown"),e.onRead=(n,r,i,o,s)=>{(t(r)?r[e.symbol]:r[e.symbol]=[]).push({no:i,wireType:o,data:s})},e.onWrite=(n,r,i)=>{for(let{no:o,wireType:s,data:a}of e.list(r))i.tag(o,s).raw(a)},e.list=(n,r)=>{if(t(n)){let i=n[e.symbol];return r?i.filter(o=>o.no==r):i}return[]},e.last=(n,r)=>e.list(n,r).slice(-1)[0];let t=n=>n&&Array.isArray(n[e.symbol])})(Ut||(Ut={}));function Xo(e,t){return Object.assign(Object.assign({},e),t)}var z;(function(e){e[e.Varint=0]="Varint",e[e.Bit64=1]="Bit64",e[e.LengthDelimited=2]="LengthDelimited",e[e.StartGroup=3]="StartGroup",e[e.EndGroup=4]="EndGroup",e[e.Bit32=5]="Bit32"})(z||(z={}));function Fu(){let e=0,t=0;for(let r=0;r<28;r+=7){let i=this.buf[this.pos++];if(e|=(i&127)<<r,!(i&128))return this.assertBounds(),[e,t]}let n=this.buf[this.pos++];if(e|=(n&15)<<28,t=(n&112)>>4,!(n&128))return this.assertBounds(),[e,t];for(let r=3;r<=31;r+=7){let i=this.buf[this.pos++];if(t|=(i&127)<<r,!(i&128))return this.assertBounds(),[e,t]}throw new Error("invalid varint")}function Qr(e,t,n){for(let o=0;o<28;o=o+7){let s=e>>>o,a=!(!(s>>>7)&&t==0),l=(a?s|128:s)&255;if(n.push(l),!a)return}let r=e>>>28&15|(t&7)<<4,i=!!(t>>3);if(n.push((i?r|128:r)&255),!!i){for(let o=3;o<31;o=o+7){let s=t>>>o,a=!!(s>>>7),l=(a?s|128:s)&255;if(n.push(l),!a)return}n.push(t>>>31&1)}}var Jr=65536*65536;function Yo(e){let t=e[0]=="-";t&&(e=e.slice(1));let n=1e6,r=0,i=0;function o(s,a){let l=Number(e.slice(s,a));i*=n,r=r*n+l,r>=Jr&&(i=i+(r/Jr|0),r=r%Jr)}return o(-24,-18),o(-18,-12),o(-12,-6),o(-6),[t,r,i]}function Xr(e,t){if(t>>>0<=2097151)return""+(Jr*t+(e>>>0));let n=e&16777215,r=(e>>>24|t<<8)>>>0&16777215,i=t>>16&65535,o=n+r*6777216+i*6710656,s=r+i*8147497,a=i*2,l=1e7;o>=l&&(s+=Math.floor(o/l),o%=l),s>=l&&(a+=Math.floor(s/l),s%=l);function u(c,f){let p=c?String(c):"";return f?"0000000".slice(p.length)+p:p}return u(a,0)+u(s,a)+u(o,1)}function qo(e,t){if(e>=0){for(;e>127;)t.push(e&127|128),e=e>>>7;t.push(e)}else{for(let n=0;n<9;n++)t.push(e&127|128),e=e>>7;t.push(1)}}function Au(){let e=this.buf[this.pos++],t=e&127;if(!(e&128))return this.assertBounds(),t;if(e=this.buf[this.pos++],t|=(e&127)<<7,!(e&128))return this.assertBounds(),t;if(e=this.buf[this.pos++],t|=(e&127)<<14,!(e&128))return this.assertBounds(),t;if(e=this.buf[this.pos++],t|=(e&127)<<21,!(e&128))return this.assertBounds(),t;e=this.buf[this.pos++],t|=(e&15)<<28;for(let n=5;e&128&&n<10;n++)e=this.buf[this.pos++];if(e&128)throw new Error("invalid varint");return this.assertBounds(),t>>>0}var A;function dm(){let e=new DataView(new ArrayBuffer(8));A=globalThis.BigInt!==void 0&&typeof e.getBigInt64=="function"&&typeof e.getBigUint64=="function"&&typeof e.setBigInt64=="function"&&typeof e.setBigUint64=="function"?{MIN:BigInt("-9223372036854775808"),MAX:BigInt("9223372036854775807"),UMIN:BigInt("0"),UMAX:BigInt("18446744073709551615"),C:BigInt,V:e}:void 0}dm();function Uu(e){if(!e)throw new Error("BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support")}var ju=/^-?[0-9]+$/,qr=4294967296,Yr=2147483648,Zr=class{constructor(t,n){this.lo=t|0,this.hi=n|0}isZero(){return this.lo==0&&this.hi==0}toNumber(){let t=this.hi*qr+(this.lo>>>0);if(!Number.isSafeInteger(t))throw new Error("cannot convert to safe number");return t}},Y=class e extends Zr{static from(t){if(A)switch(typeof t){case"string":if(t=="0")return this.ZERO;if(t=="")throw new Error("string is no integer");t=A.C(t);case"number":if(t===0)return this.ZERO;t=A.C(t);case"bigint":if(!t)return this.ZERO;if(t<A.UMIN)throw new Error("signed value for ulong");if(t>A.UMAX)throw new Error("ulong too large");return A.V.setBigUint64(0,t,!0),new e(A.V.getInt32(0,!0),A.V.getInt32(4,!0))}else switch(typeof t){case"string":if(t=="0")return this.ZERO;if(t=t.trim(),!ju.test(t))throw new Error("string is no integer");let[n,r,i]=Yo(t);if(n)throw new Error("signed value for ulong");return new e(r,i);case"number":if(t==0)return this.ZERO;if(!Number.isSafeInteger(t))throw new Error("number is no integer");if(t<0)throw new Error("signed value for ulong");return new e(t,t/qr)}throw new Error("unknown value "+typeof t)}toString(){return A?this.toBigInt().toString():Xr(this.lo,this.hi)}toBigInt(){return Uu(A),A.V.setInt32(0,this.lo,!0),A.V.setInt32(4,this.hi,!0),A.V.getBigUint64(0,!0)}};Y.ZERO=new Y(0,0);var G=class e extends Zr{static from(t){if(A)switch(typeof t){case"string":if(t=="0")return this.ZERO;if(t=="")throw new Error("string is no integer");t=A.C(t);case"number":if(t===0)return this.ZERO;t=A.C(t);case"bigint":if(!t)return this.ZERO;if(t<A.MIN)throw new Error("signed long too small");if(t>A.MAX)throw new Error("signed long too large");return A.V.setBigInt64(0,t,!0),new e(A.V.getInt32(0,!0),A.V.getInt32(4,!0))}else switch(typeof t){case"string":if(t=="0")return this.ZERO;if(t=t.trim(),!ju.test(t))throw new Error("string is no integer");let[n,r,i]=Yo(t);if(n){if(i>Yr||i==Yr&&r!=0)throw new Error("signed long too small")}else if(i>=Yr)throw new Error("signed long too large");let o=new e(r,i);return n?o.negate():o;case"number":if(t==0)return this.ZERO;if(!Number.isSafeInteger(t))throw new Error("number is no integer");return t>0?new e(t,t/qr):new e(-t,-t/qr).negate()}throw new Error("unknown value "+typeof t)}isNegative(){return(this.hi&Yr)!==0}negate(){let t=~this.hi,n=this.lo;return n?n=~n+1:t+=1,new e(n,t)}toString(){if(A)return this.toBigInt().toString();if(this.isNegative()){let t=this.negate();return"-"+Xr(t.lo,t.hi)}return Xr(this.lo,this.hi)}toBigInt(){return Uu(A),A.V.setInt32(0,this.lo,!0),A.V.setInt32(4,this.hi,!0),A.V.getBigInt64(0,!0)}};G.ZERO=new G(0,0);var zu={readUnknownField:!0,readerFactory:e=>new Zo(e)};function bu(e){return e?Object.assign(Object.assign({},zu),e):zu}var Zo=class{constructor(t,n){this.varint64=Fu,this.uint32=Au,this.buf=t,this.len=t.length,this.pos=0,this.view=new DataView(t.buffer,t.byteOffset,t.byteLength),this.textDecoder=n??new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0})}tag(){let t=this.uint32(),n=t>>>3,r=t&7;if(n<=0||r<0||r>5)throw new Error("illegal tag: field no "+n+" wire type "+r);return[n,r]}skip(t){let n=this.pos;switch(t){case z.Varint:for(;this.buf[this.pos++]&128;);break;case z.Bit64:this.pos+=4;case z.Bit32:this.pos+=4;break;case z.LengthDelimited:let r=this.uint32();this.pos+=r;break;case z.StartGroup:let i;for(;(i=this.tag()[1])!==z.EndGroup;)this.skip(i);break;default:throw new Error("cant skip wire type "+t)}return this.assertBounds(),this.buf.subarray(n,this.pos)}assertBounds(){if(this.pos>this.len)throw new RangeError("premature EOF")}int32(){return this.uint32()|0}sint32(){let t=this.uint32();return t>>>1^-(t&1)}int64(){return new G(...this.varint64())}uint64(){return new Y(...this.varint64())}sint64(){let[t,n]=this.varint64(),r=-(t&1);return t=(t>>>1|(n&1)<<31)^r,n=n>>>1^r,new G(t,n)}bool(){let[t,n]=this.varint64();return t!==0||n!==0}fixed32(){return this.view.getUint32((this.pos+=4)-4,!0)}sfixed32(){return this.view.getInt32((this.pos+=4)-4,!0)}fixed64(){return new Y(this.sfixed32(),this.sfixed32())}sfixed64(){return new G(this.sfixed32(),this.sfixed32())}float(){return this.view.getFloat32((this.pos+=4)-4,!0)}double(){return this.view.getFloat64((this.pos+=8)-8,!0)}bytes(){let t=this.uint32(),n=this.pos;return this.pos+=t,this.assertBounds(),this.buf.subarray(n,n+t)}string(){return this.textDecoder.decode(this.bytes())}};function O(e,t){if(!e)throw new Error(t)}function es(e,t){throw new Error(t??"Unexpected object: "+e)}var mm=34028234663852886e22,hm=-34028234663852886e22,gm=4294967295,ym=2147483647,vm=-2147483648;function Ze(e){if(typeof e!="number")throw new Error("invalid int 32: "+typeof e);if(!Number.isInteger(e)||e>ym||e<vm)throw new Error("invalid int 32: "+e)}function dt(e){if(typeof e!="number")throw new Error("invalid uint 32: "+typeof e);if(!Number.isInteger(e)||e>gm||e<0)throw new Error("invalid uint 32: "+e)}function jt(e){if(typeof e!="number")throw new Error("invalid float 32: "+typeof e);if(Number.isFinite(e)&&(e>mm||e<hm))throw new Error("invalid float 32: "+e)}var Bu={writeUnknownFields:!0,writerFactory:()=>new ts};function Vu(e){return e?Object.assign(Object.assign({},Bu),e):Bu}var ts=class{constructor(t){this.stack=[],this.textEncoder=t??new TextEncoder,this.chunks=[],this.buf=[]}finish(){this.chunks.push(new Uint8Array(this.buf));let t=0;for(let i=0;i<this.chunks.length;i++)t+=this.chunks[i].length;let n=new Uint8Array(t),r=0;for(let i=0;i<this.chunks.length;i++)n.set(this.chunks[i],r),r+=this.chunks[i].length;return this.chunks=[],n}fork(){return this.stack.push({chunks:this.chunks,buf:this.buf}),this.chunks=[],this.buf=[],this}join(){let t=this.finish(),n=this.stack.pop();if(!n)throw new Error("invalid state, fork stack empty");return this.chunks=n.chunks,this.buf=n.buf,this.uint32(t.byteLength),this.raw(t)}tag(t,n){return this.uint32((t<<3|n)>>>0)}raw(t){return this.buf.length&&(this.chunks.push(new Uint8Array(this.buf)),this.buf=[]),this.chunks.push(t),this}uint32(t){for(dt(t);t>127;)this.buf.push(t&127|128),t=t>>>7;return this.buf.push(t),this}int32(t){return Ze(t),qo(t,this.buf),this}bool(t){return this.buf.push(t?1:0),this}bytes(t){return this.uint32(t.byteLength),this.raw(t)}string(t){let n=this.textEncoder.encode(t);return this.uint32(n.byteLength),this.raw(n)}float(t){jt(t);let n=new Uint8Array(4);return new DataView(n.buffer).setFloat32(0,t,!0),this.raw(n)}double(t){let n=new Uint8Array(8);return new DataView(n.buffer).setFloat64(0,t,!0),this.raw(n)}fixed32(t){dt(t);let n=new Uint8Array(4);return new DataView(n.buffer).setUint32(0,t,!0),this.raw(n)}sfixed32(t){Ze(t);let n=new Uint8Array(4);return new DataView(n.buffer).setInt32(0,t,!0),this.raw(n)}sint32(t){return Ze(t),t=(t<<1^t>>31)>>>0,qo(t,this.buf),this}sfixed64(t){let n=new Uint8Array(8),r=new DataView(n.buffer),i=G.from(t);return r.setInt32(0,i.lo,!0),r.setInt32(4,i.hi,!0),this.raw(n)}fixed64(t){let n=new Uint8Array(8),r=new DataView(n.buffer),i=Y.from(t);return r.setInt32(0,i.lo,!0),r.setInt32(4,i.hi,!0),this.raw(n)}int64(t){let n=G.from(t);return Qr(n.lo,n.hi,this.buf),this}sint64(t){let n=G.from(t),r=n.hi>>31,i=n.lo<<1^r,o=(n.hi<<1|n.lo>>>31)^r;return Qr(i,o,this.buf),this}uint64(t){let n=Y.from(t);return Qr(n.lo,n.hi,this.buf),this}};var Ku={emitDefaultValues:!1,enumAsInteger:!1,useProtoFieldName:!1,prettySpaces:0},Gu={ignoreUnknownFields:!1};function ns(e){return e?Object.assign(Object.assign({},Gu),e):Gu}function rs(e){return e?Object.assign(Object.assign({},Ku),e):Ku}function is(e,t){var n,r;let i=Object.assign(Object.assign({},e),t);return i.typeRegistry=[...(n=e?.typeRegistry)!==null&&n!==void 0?n:[],...(r=t?.typeRegistry)!==null&&r!==void 0?r:[]],i}var ei=Symbol.for("protobuf-ts/message-type");function mt(e){let t=!1,n=[];for(let r=0;r<e.length;r++){let i=e.charAt(r);i=="_"?t=!0:/\d/.test(i)?(n.push(i),t=!0):t?(n.push(i.toUpperCase()),t=!1):r==0?n.push(i.toLowerCase()):n.push(i)}return n.join("")}var y;(function(e){e[e.DOUBLE=1]="DOUBLE",e[e.FLOAT=2]="FLOAT",e[e.INT64=3]="INT64",e[e.UINT64=4]="UINT64",e[e.INT32=5]="INT32",e[e.FIXED64=6]="FIXED64",e[e.FIXED32=7]="FIXED32",e[e.BOOL=8]="BOOL",e[e.STRING=9]="STRING",e[e.BYTES=12]="BYTES",e[e.UINT32=13]="UINT32",e[e.SFIXED32=15]="SFIXED32",e[e.SFIXED64=16]="SFIXED64",e[e.SINT32=17]="SINT32",e[e.SINT64=18]="SINT64"})(y||(y={}));var de;(function(e){e[e.BIGINT=0]="BIGINT",e[e.STRING=1]="STRING",e[e.NUMBER=2]="NUMBER"})(de||(de={}));var Bn;(function(e){e[e.NO=0]="NO",e[e.PACKED=1]="PACKED",e[e.UNPACKED=2]="UNPACKED"})(Bn||(Bn={}));function $u(e){var t,n,r,i;return e.localName=(t=e.localName)!==null&&t!==void 0?t:mt(e.name),e.jsonName=(n=e.jsonName)!==null&&n!==void 0?n:mt(e.name),e.repeat=(r=e.repeat)!==null&&r!==void 0?r:Bn.NO,e.opt=(i=e.opt)!==null&&i!==void 0?i:e.repeat||e.oneof?!1:e.kind=="message",e}function Hu(e){if(typeof e!="object"||e===null||!e.hasOwnProperty("oneofKind"))return!1;switch(typeof e.oneofKind){case"string":return e[e.oneofKind]===void 0?!1:Object.keys(e).length==2;case"undefined":return Object.keys(e).length==1;default:return!1}}var ti=class{constructor(t){var n;this.fields=(n=t.fields)!==null&&n!==void 0?n:[]}prepare(){if(this.data)return;let t=[],n=[],r=[];for(let i of this.fields)if(i.oneof)r.includes(i.oneof)||(r.push(i.oneof),t.push(i.oneof),n.push(i.oneof));else switch(n.push(i.localName),i.kind){case"scalar":case"enum":(!i.opt||i.repeat)&&t.push(i.localName);break;case"message":i.repeat&&t.push(i.localName);break;case"map":t.push(i.localName);break}this.data={req:t,known:n,oneofs:Object.values(r)}}is(t,n,r=!1){if(n<0)return!0;if(t==null||typeof t!="object")return!1;this.prepare();let i=Object.keys(t),o=this.data;if(i.length<o.req.length||o.req.some(s=>!i.includes(s))||!r&&i.some(s=>!o.known.includes(s)))return!1;if(n<1)return!0;for(let s of o.oneofs){let a=t[s];if(!Hu(a))return!1;if(a.oneofKind===void 0)continue;let l=this.fields.find(u=>u.localName===a.oneofKind);if(!l||!this.field(a[a.oneofKind],l,r,n))return!1}for(let s of this.fields)if(s.oneof===void 0&&!this.field(t[s.localName],s,r,n))return!1;return!0}field(t,n,r,i){let o=n.repeat;switch(n.kind){case"scalar":return t===void 0?n.opt:o?this.scalars(t,n.T,i,n.L):this.scalar(t,n.T,n.L);case"enum":return t===void 0?n.opt:o?this.scalars(t,y.INT32,i):this.scalar(t,y.INT32);case"message":return t===void 0?!0:o?this.messages(t,n.T(),r,i):this.message(t,n.T(),r,i);case"map":if(typeof t!="object"||t===null)return!1;if(i<2)return!0;if(!this.mapKeys(t,n.K,i))return!1;switch(n.V.kind){case"scalar":return this.scalars(Object.values(t),n.V.T,i,n.V.L);case"enum":return this.scalars(Object.values(t),y.INT32,i);case"message":return this.messages(Object.values(t),n.V.T(),r,i)}break}return!0}message(t,n,r,i){return r?n.isAssignable(t,i):n.is(t,i)}messages(t,n,r,i){if(!Array.isArray(t))return!1;if(i<2)return!0;if(r){for(let o=0;o<t.length&&o<i;o++)if(!n.isAssignable(t[o],i-1))return!1}else for(let o=0;o<t.length&&o<i;o++)if(!n.is(t[o],i-1))return!1;return!0}scalar(t,n,r){let i=typeof t;switch(n){case y.UINT64:case y.FIXED64:case y.INT64:case y.SFIXED64:case y.SINT64:switch(r){case de.BIGINT:return i=="bigint";case de.NUMBER:return i=="number"&&!isNaN(t);default:return i=="string"}case y.BOOL:return i=="boolean";case y.STRING:return i=="string";case y.BYTES:return t instanceof Uint8Array;case y.DOUBLE:case y.FLOAT:return i=="number"&&!isNaN(t);default:return i=="number"&&Number.isInteger(t)}}scalars(t,n,r,i){if(!Array.isArray(t))return!1;if(r<2)return!0;if(Array.isArray(t)){for(let o=0;o<t.length&&o<r;o++)if(!this.scalar(t[o],n,i))return!1}return!0}mapKeys(t,n,r){let i=Object.keys(t);switch(n){case y.INT32:case y.FIXED32:case y.SFIXED32:case y.SINT32:case y.UINT32:return this.scalars(i.slice(0,r).map(o=>parseInt(o)),n,r);case y.BOOL:return this.scalars(i.slice(0,r).map(o=>o=="true"?!0:o=="false"?!1:o),n,r);default:return this.scalars(i,n,r,de.STRING)}}};function ye(e,t){switch(t){case de.BIGINT:return e.toBigInt();case de.NUMBER:return e.toNumber();default:return e.toString()}}var ni=class{constructor(t){this.info=t}prepare(){var t;if(this.fMap===void 0){this.fMap={};let n=(t=this.info.fields)!==null&&t!==void 0?t:[];for(let r of n)this.fMap[r.name]=r,this.fMap[r.jsonName]=r,this.fMap[r.localName]=r}}assert(t,n,r){if(!t){let i=bn(r);throw(i=="number"||i=="boolean")&&(i=r.toString()),new Error(`Cannot parse JSON ${i} for ${this.info.typeName}#${n}`)}}read(t,n,r){this.prepare();let i=[];for(let[o,s]of Object.entries(t)){let a=this.fMap[o];if(!a){if(!r.ignoreUnknownFields)throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${o}`);continue}let l=a.localName,u;if(a.oneof){if(s===null&&(a.kind!=="enum"||a.T()[0]!=="google.protobuf.NullValue"))continue;if(i.includes(a.oneof))throw new Error(`Multiple members of the oneof group "${a.oneof}" of ${this.info.typeName} are present in JSON.`);i.push(a.oneof),u=n[a.oneof]={oneofKind:l}}else u=n;if(a.kind=="map"){if(s===null)continue;this.assert(rn(s),a.name,s);let c=u[l];for(let[f,p]of Object.entries(s)){this.assert(p!==null,a.name+" map value",null);let g;switch(a.V.kind){case"message":g=a.V.T().internalJsonRead(p,r);break;case"enum":if(g=this.enum(a.V.T(),p,a.name,r.ignoreUnknownFields),g===!1)continue;break;case"scalar":g=this.scalar(p,a.V.T,a.V.L,a.name);break}this.assert(g!==void 0,a.name+" map value",p);let S=f;a.K==y.BOOL&&(S=S=="true"?!0:S=="false"?!1:S),S=this.scalar(S,a.K,de.STRING,a.name).toString(),c[S]=g}}else if(a.repeat){if(s===null)continue;this.assert(Array.isArray(s),a.name,s);let c=u[l];for(let f of s){this.assert(f!==null,a.name,null);let p;switch(a.kind){case"message":p=a.T().internalJsonRead(f,r);break;case"enum":if(p=this.enum(a.T(),f,a.name,r.ignoreUnknownFields),p===!1)continue;break;case"scalar":p=this.scalar(f,a.T,a.L,a.name);break}this.assert(p!==void 0,a.name,s),c.push(p)}}else switch(a.kind){case"message":if(s===null&&a.T().typeName!="google.protobuf.Value"){this.assert(a.oneof===void 0,a.name+" (oneof member)",null);continue}u[l]=a.T().internalJsonRead(s,r,u[l]);break;case"enum":let c=this.enum(a.T(),s,a.name,r.ignoreUnknownFields);if(c===!1)continue;u[l]=c;break;case"scalar":u[l]=this.scalar(s,a.T,a.L,a.name);break}}}enum(t,n,r,i){if(t[0]=="google.protobuf.NullValue"&&O(n===null||n==="NULL_VALUE",`Unable to parse field ${this.info.typeName}#${r}, enum ${t[0]} only accepts null.`),n===null)return 0;switch(typeof n){case"number":return O(Number.isInteger(n),`Unable to parse field ${this.info.typeName}#${r}, enum can only be integral number, got ${n}.`),n;case"string":let o=n;t[2]&&n.substring(0,t[2].length)===t[2]&&(o=n.substring(t[2].length));let s=t[1][o];return typeof s>"u"&&i?!1:(O(typeof s=="number",`Unable to parse field ${this.info.typeName}#${r}, enum ${t[0]} has no value for "${n}".`),s)}O(!1,`Unable to parse field ${this.info.typeName}#${r}, cannot parse enum value from ${typeof n}".`)}scalar(t,n,r,i){let o;try{switch(n){case y.DOUBLE:case y.FLOAT:if(t===null)return 0;if(t==="NaN")return Number.NaN;if(t==="Infinity")return Number.POSITIVE_INFINITY;if(t==="-Infinity")return Number.NEGATIVE_INFINITY;if(t===""){o="empty string";break}if(typeof t=="string"&&t.trim().length!==t.length){o="extra whitespace";break}if(typeof t!="string"&&typeof t!="number")break;let s=Number(t);if(Number.isNaN(s)){o="not a number";break}if(!Number.isFinite(s)){o="too large or small";break}return n==y.FLOAT&&jt(s),s;case y.INT32:case y.FIXED32:case y.SFIXED32:case y.SINT32:case y.UINT32:if(t===null)return 0;let a;if(typeof t=="number"?a=t:t===""?o="empty string":typeof t=="string"&&(t.trim().length!==t.length?o="extra whitespace":a=Number(t)),a===void 0)break;return n==y.UINT32?dt(a):Ze(a),a;case y.INT64:case y.SFIXED64:case y.SINT64:if(t===null)return ye(G.ZERO,r);if(typeof t!="number"&&typeof t!="string")break;return ye(G.from(t),r);case y.FIXED64:case y.UINT64:if(t===null)return ye(Y.ZERO,r);if(typeof t!="number"&&typeof t!="string")break;return ye(Y.from(t),r);case y.BOOL:if(t===null)return!1;if(typeof t!="boolean")break;return t;case y.STRING:if(t===null)return"";if(typeof t!="string"){o="extra whitespace";break}try{encodeURIComponent(t)}catch(l){l="invalid UTF8";break}return t;case y.BYTES:if(t===null||t==="")return new Uint8Array(0);if(typeof t!="string")break;return Mu(t)}}catch(s){o=s.message}this.assert(!1,i+(o?" - "+o:""),t)}};var ri=class{constructor(t){var n;this.fields=(n=t.fields)!==null&&n!==void 0?n:[]}write(t,n){let r={},i=t;for(let o of this.fields){if(!o.oneof){let u=this.field(o,i[o.localName],n);u!==void 0&&(r[n.useProtoFieldName?o.name:o.jsonName]=u);continue}let s=i[o.oneof];if(s.oneofKind!==o.localName)continue;let a=o.kind=="scalar"||o.kind=="enum"?Object.assign(Object.assign({},n),{emitDefaultValues:!0}):n,l=this.field(o,s[o.localName],a);O(l!==void 0),r[n.useProtoFieldName?o.name:o.jsonName]=l}return r}field(t,n,r){let i;if(t.kind=="map"){O(typeof n=="object"&&n!==null);let o={};switch(t.V.kind){case"scalar":for(let[l,u]of Object.entries(n)){let c=this.scalar(t.V.T,u,t.name,!1,!0);O(c!==void 0),o[l.toString()]=c}break;case"message":let s=t.V.T();for(let[l,u]of Object.entries(n)){let c=this.message(s,u,t.name,r);O(c!==void 0),o[l.toString()]=c}break;case"enum":let a=t.V.T();for(let[l,u]of Object.entries(n)){O(u===void 0||typeof u=="number");let c=this.enum(a,u,t.name,!1,!0,r.enumAsInteger);O(c!==void 0),o[l.toString()]=c}break}(r.emitDefaultValues||Object.keys(o).length>0)&&(i=o)}else if(t.repeat){O(Array.isArray(n));let o=[];switch(t.kind){case"scalar":for(let l=0;l<n.length;l++){let u=this.scalar(t.T,n[l],t.name,t.opt,!0);O(u!==void 0),o.push(u)}break;case"enum":let s=t.T();for(let l=0;l<n.length;l++){O(n[l]===void 0||typeof n[l]=="number");let u=this.enum(s,n[l],t.name,t.opt,!0,r.enumAsInteger);O(u!==void 0),o.push(u)}break;case"message":let a=t.T();for(let l=0;l<n.length;l++){let u=this.message(a,n[l],t.name,r);O(u!==void 0),o.push(u)}break}(r.emitDefaultValues||o.length>0||r.emitDefaultValues)&&(i=o)}else switch(t.kind){case"scalar":i=this.scalar(t.T,n,t.name,t.opt,r.emitDefaultValues);break;case"enum":i=this.enum(t.T(),n,t.name,t.opt,r.emitDefaultValues,r.enumAsInteger);break;case"message":i=this.message(t.T(),n,t.name,r);break}return i}enum(t,n,r,i,o,s){if(t[0]=="google.protobuf.NullValue")return!o&&!i?void 0:null;if(n===void 0){O(i);return}if(!(n===0&&!o&&!i))return O(typeof n=="number"),O(Number.isInteger(n)),s||!t[1].hasOwnProperty(n)?n:t[2]?t[2]+t[1][n]:t[1][n]}message(t,n,r,i){return n===void 0?i.emitDefaultValues?null:void 0:t.internalJsonWrite(n,i)}scalar(t,n,r,i,o){if(n===void 0){O(i);return}let s=o||i;switch(t){case y.INT32:case y.SFIXED32:case y.SINT32:return n===0?s?0:void 0:(Ze(n),n);case y.FIXED32:case y.UINT32:return n===0?s?0:void 0:(dt(n),n);case y.FLOAT:jt(n);case y.DOUBLE:return n===0?s?0:void 0:(O(typeof n=="number"),Number.isNaN(n)?"NaN":n===Number.POSITIVE_INFINITY?"Infinity":n===Number.NEGATIVE_INFINITY?"-Infinity":n);case y.STRING:return n===""?s?"":void 0:(O(typeof n=="string"),n);case y.BOOL:return n===!1?s?!1:void 0:(O(typeof n=="boolean"),n);case y.UINT64:case y.FIXED64:O(typeof n=="number"||typeof n=="string"||typeof n=="bigint");let a=Y.from(n);return a.isZero()&&!s?void 0:a.toString();case y.INT64:case y.SFIXED64:case y.SINT64:O(typeof n=="number"||typeof n=="string"||typeof n=="bigint");let l=G.from(n);return l.isZero()&&!s?void 0:l.toString();case y.BYTES:return O(n instanceof Uint8Array),n.byteLength?Du(n):s?"":void 0}}};function Vn(e,t=de.STRING){switch(e){case y.BOOL:return!1;case y.UINT64:case y.FIXED64:return ye(Y.ZERO,t);case y.INT64:case y.SFIXED64:case y.SINT64:return ye(G.ZERO,t);case y.DOUBLE:case y.FLOAT:return 0;case y.BYTES:return new Uint8Array(0);case y.STRING:return"";default:return 0}}var ii=class{constructor(t){this.info=t}prepare(){var t;if(!this.fieldNoToField){let n=(t=this.info.fields)!==null&&t!==void 0?t:[];this.fieldNoToField=new Map(n.map(r=>[r.no,r]))}}read(t,n,r,i){this.prepare();let o=i===void 0?t.len:t.pos+i;for(;t.pos<o;){let[s,a]=t.tag(),l=this.fieldNoToField.get(s);if(!l){let p=r.readUnknownField;if(p=="throw")throw new Error(`Unknown field ${s} (wire type ${a}) for ${this.info.typeName}`);let g=t.skip(a);p!==!1&&(p===!0?Ut.onRead:p)(this.info.typeName,n,s,a,g);continue}let u=n,c=l.repeat,f=l.localName;switch(l.oneof&&(u=u[l.oneof],u.oneofKind!==f&&(u=n[l.oneof]={oneofKind:f})),l.kind){case"scalar":case"enum":let p=l.kind=="enum"?y.INT32:l.T,g=l.kind=="scalar"?l.L:void 0;if(c){let w=u[f];if(a==z.LengthDelimited&&p!=y.STRING&&p!=y.BYTES){let m=t.uint32()+t.pos;for(;t.pos<m;)w.push(this.scalar(t,p,g))}else w.push(this.scalar(t,p,g))}else u[f]=this.scalar(t,p,g);break;case"message":if(c){let w=u[f],m=l.T().internalBinaryRead(t,t.uint32(),r);w.push(m)}else u[f]=l.T().internalBinaryRead(t,t.uint32(),r,u[f]);break;case"map":let[S,v]=this.mapEntry(l,t,r);u[f][S]=v;break}}}mapEntry(t,n,r){let i=n.uint32(),o=n.pos+i,s,a;for(;n.pos<o;){let[l,u]=n.tag();switch(l){case 1:t.K==y.BOOL?s=n.bool().toString():s=this.scalar(n,t.K,de.STRING);break;case 2:switch(t.V.kind){case"scalar":a=this.scalar(n,t.V.T,t.V.L);break;case"enum":a=n.int32();break;case"message":a=t.V.T().internalBinaryRead(n,n.uint32(),r);break}break;default:throw new Error(`Unknown field ${l} (wire type ${u}) in map entry for ${this.info.typeName}#${t.name}`)}}if(s===void 0){let l=Vn(t.K);s=t.K==y.BOOL?l.toString():l}if(a===void 0)switch(t.V.kind){case"scalar":a=Vn(t.V.T,t.V.L);break;case"enum":a=0;break;case"message":a=t.V.T().create();break}return[s,a]}scalar(t,n,r){switch(n){case y.INT32:return t.int32();case y.STRING:return t.string();case y.BOOL:return t.bool();case y.DOUBLE:return t.double();case y.FLOAT:return t.float();case y.INT64:return ye(t.int64(),r);case y.UINT64:return ye(t.uint64(),r);case y.FIXED64:return ye(t.fixed64(),r);case y.FIXED32:return t.fixed32();case y.BYTES:return t.bytes();case y.UINT32:return t.uint32();case y.SFIXED32:return t.sfixed32();case y.SFIXED64:return ye(t.sfixed64(),r);case y.SINT32:return t.sint32();case y.SINT64:return ye(t.sint64(),r)}}};var oi=class{constructor(t){this.info=t}prepare(){if(!this.fields){let t=this.info.fields?this.info.fields.concat():[];this.fields=t.sort((n,r)=>n.no-r.no)}}write(t,n,r){this.prepare();for(let o of this.fields){let s,a,l=o.repeat,u=o.localName;if(o.oneof){let c=t[o.oneof];if(c.oneofKind!==u)continue;s=c[u],a=!0}else s=t[u],a=!1;switch(o.kind){case"scalar":case"enum":let c=o.kind=="enum"?y.INT32:o.T;if(l)if(O(Array.isArray(s)),l==Bn.PACKED)this.packed(n,c,o.no,s);else for(let f of s)this.scalar(n,c,o.no,f,!0);else s===void 0?O(o.opt):this.scalar(n,c,o.no,s,a||o.opt);break;case"message":if(l){O(Array.isArray(s));for(let f of s)this.message(n,r,o.T(),o.no,f)}else this.message(n,r,o.T(),o.no,s);break;case"map":O(typeof s=="object"&&s!==null);for(let[f,p]of Object.entries(s))this.mapEntry(n,r,o,f,p);break}}let i=r.writeUnknownFields;i!==!1&&(i===!0?Ut.onWrite:i)(this.info.typeName,t,n)}mapEntry(t,n,r,i,o){t.tag(r.no,z.LengthDelimited),t.fork();let s=i;switch(r.K){case y.INT32:case y.FIXED32:case y.UINT32:case y.SFIXED32:case y.SINT32:s=Number.parseInt(i);break;case y.BOOL:O(i=="true"||i=="false"),s=i=="true";break}switch(this.scalar(t,r.K,1,s,!0),r.V.kind){case"scalar":this.scalar(t,r.V.T,2,o,!0);break;case"enum":this.scalar(t,y.INT32,2,o,!0);break;case"message":this.message(t,n,r.V.T(),2,o);break}t.join()}message(t,n,r,i,o){o!==void 0&&(r.internalBinaryWrite(o,t.tag(i,z.LengthDelimited).fork(),n),t.join())}scalar(t,n,r,i,o){let[s,a,l]=this.scalarInfo(n,i);(!l||o)&&(t.tag(r,s),t[a](i))}packed(t,n,r,i){if(!i.length)return;O(n!==y.BYTES&&n!==y.STRING),t.tag(r,z.LengthDelimited),t.fork();let[,o]=this.scalarInfo(n);for(let s=0;s<i.length;s++)t[o](i[s]);t.join()}scalarInfo(t,n){let r=z.Varint,i,o=n===void 0,s=n===0;switch(t){case y.INT32:i="int32";break;case y.STRING:s=o||!n.length,r=z.LengthDelimited,i="string";break;case y.BOOL:s=n===!1,i="bool";break;case y.UINT32:i="uint32";break;case y.DOUBLE:r=z.Bit64,i="double";break;case y.FLOAT:r=z.Bit32,i="float";break;case y.INT64:s=o||G.from(n).isZero(),i="int64";break;case y.UINT64:s=o||Y.from(n).isZero(),i="uint64";break;case y.FIXED64:s=o||Y.from(n).isZero(),r=z.Bit64,i="fixed64";break;case y.BYTES:s=o||!n.byteLength,r=z.LengthDelimited,i="bytes";break;case y.FIXED32:r=z.Bit32,i="fixed32";break;case y.SFIXED32:r=z.Bit32,i="sfixed32";break;case y.SFIXED64:s=o||G.from(n).isZero(),r=z.Bit64,i="sfixed64";break;case y.SINT32:i="sint32";break;case y.SINT64:s=o||G.from(n).isZero(),i="sint64";break}return[r,i,o||s]}};function Wu(e){let t=e.messagePrototype?Object.create(e.messagePrototype):Object.defineProperty({},ei,{value:e});for(let n of e.fields){let r=n.localName;if(!n.opt)if(n.oneof)t[n.oneof]={oneofKind:void 0};else if(n.repeat)t[r]=[];else switch(n.kind){case"scalar":t[r]=Vn(n.T,n.L);break;case"enum":t[r]=0;break;case"map":t[r]={};break}}return t}function si(e,t,n){let r,i=n,o;for(let s of e.fields){let a=s.localName;if(s.oneof){let l=i[s.oneof];if(l?.oneofKind==null)continue;if(r=l[a],o=t[s.oneof],o.oneofKind=l.oneofKind,r==null){delete o[a];continue}}else if(r=i[a],o=t,r==null)continue;switch(s.repeat&&(o[a].length=r.length),s.kind){case"scalar":case"enum":if(s.repeat)for(let u=0;u<r.length;u++)o[a][u]=r[u];else o[a]=r;break;case"message":let l=s.T();if(s.repeat)for(let u=0;u<r.length;u++)o[a][u]=l.create(r[u]);else o[a]===void 0?o[a]=l.create(r):l.mergePartial(o[a],r);break;case"map":switch(s.V.kind){case"scalar":case"enum":Object.assign(o[a],r);break;case"message":let u=s.V.T();for(let c of Object.keys(r))o[a][c]=u.create(r[c]);break}break}}}function Xu(e,t,n){if(t===n)return!0;if(!t||!n)return!1;for(let r of e.fields){let i=r.localName,o=r.oneof?t[r.oneof][i]:t[i],s=r.oneof?n[r.oneof][i]:n[i];switch(r.kind){case"enum":case"scalar":let a=r.kind=="enum"?y.INT32:r.T;if(!(r.repeat?Ju(a,o,s):Yu(a,o,s)))return!1;break;case"map":if(!(r.V.kind=="message"?Qu(r.V.T(),ai(o),ai(s)):Ju(r.V.kind=="enum"?y.INT32:r.V.T,ai(o),ai(s))))return!1;break;case"message":let l=r.T();if(!(r.repeat?Qu(l,o,s):l.equals(o,s)))return!1;break}}return!0}var ai=Object.values;function Yu(e,t,n){if(t===n)return!0;if(e!==y.BYTES)return!1;let r=t,i=n;if(r.length!==i.length)return!1;for(let o=0;o<r.length;o++)if(r[o]!=i[o])return!1;return!0}function Ju(e,t,n){if(t.length!==n.length)return!1;for(let r=0;r<t.length;r++)if(!Yu(e,t[r],n[r]))return!1;return!0}function Qu(e,t,n){if(t.length!==n.length)return!1;for(let r=0;r<t.length;r++)if(!e.equals(t[r],n[r]))return!1;return!0}var Sm=Object.getOwnPropertyDescriptors(Object.getPrototypeOf({})),V=class{constructor(t,n,r){this.defaultCheckDepth=16,this.typeName=t,this.fields=n.map($u),this.options=r??{},this.messagePrototype=Object.create(null,Object.assign(Object.assign({},Sm),{[ei]:{value:this}})),this.refTypeCheck=new ti(this),this.refJsonReader=new ni(this),this.refJsonWriter=new ri(this),this.refBinReader=new ii(this),this.refBinWriter=new oi(this)}create(t){let n=Wu(this);return t!==void 0&&si(this,n,t),n}clone(t){let n=this.create();return si(this,n,t),n}equals(t,n){return Xu(this,t,n)}is(t,n=this.defaultCheckDepth){return this.refTypeCheck.is(t,n,!1)}isAssignable(t,n=this.defaultCheckDepth){return this.refTypeCheck.is(t,n,!0)}mergePartial(t,n){si(this,t,n)}fromBinary(t,n){let r=bu(n);return this.internalBinaryRead(r.readerFactory(t),t.byteLength,r)}fromJson(t,n){return this.internalJsonRead(t,ns(n))}fromJsonString(t,n){let r=JSON.parse(t);return this.fromJson(r,n)}toJson(t,n){return this.internalJsonWrite(t,rs(n))}toJsonString(t,n){var r;let i=this.toJson(t,n);return JSON.stringify(i,null,(r=n?.prettySpaces)!==null&&r!==void 0?r:0)}toBinary(t,n){let r=Vu(n);return this.internalBinaryWrite(t,r.writerFactory(),r).finish()}internalJsonRead(t,n,r){if(t!==null&&typeof t=="object"&&!Array.isArray(t)){let i=r??this.create();return this.refJsonReader.read(t,i,n),i}throw new Error(`Unable to parse message ${this.typeName} from JSON ${bn(t)}.`)}internalJsonWrite(t,n){return this.refJsonWriter.write(t,n)}internalBinaryWrite(t,n,r){return this.refBinWriter.write(t,n,r),n}internalBinaryRead(t,n,r,i){let o=i??this.create();return this.refBinReader.read(t,o,r,n),o}};function qu(e,t){var n,r,i;let o=e;return o.service=t,o.localName=(n=o.localName)!==null&&n!==void 0?n:mt(o.name),o.serverStreaming=!!o.serverStreaming,o.clientStreaming=!!o.clientStreaming,o.options=(r=o.options)!==null&&r!==void 0?r:{},o.idempotency=(i=o.idempotency)!==null&&i!==void 0?i:void 0,o}var Kn=class{constructor(t,n,r){this.typeName=t,this.methods=n.map(i=>qu(i,this)),this.options=r??{}}};var Q=class extends Error{constructor(t,n="UNKNOWN",r){super(t),this.name="RpcError",Object.setPrototypeOf(this,new.target.prototype),this.code=n,this.meta=r??{}}toString(){let t=[this.name+": "+this.message];this.code&&(t.push(""),t.push("Code: "+this.code)),this.serviceName&&this.methodName&&t.push("Method: "+this.serviceName+"/"+this.methodName);let n=Object.entries(this.meta);if(n.length){t.push(""),t.push("Meta:");for(let[r,i]of n)t.push(`  ${r}: ${i}`)}return t.join(`
`)}};function os(e,t){if(!t)return e;let n={};li(e,n),li(t,n);for(let r of Object.keys(t)){let i=t[r];switch(r){case"jsonOptions":n.jsonOptions=is(e.jsonOptions,n.jsonOptions);break;case"binaryOptions":n.binaryOptions=Xo(e.binaryOptions,n.binaryOptions);break;case"meta":n.meta={},li(e.meta,n.meta),li(t.meta,n.meta);break;case"interceptors":n.interceptors=e.interceptors?e.interceptors.concat(i):i.concat();break}}return n}function li(e,t){if(!e)return;let n=t;for(let[r,i]of Object.entries(e))i instanceof Date?n[r]=new Date(i.getTime()):Array.isArray(i)?n[r]=i.concat():n[r]=i}var Ne;(function(e){e[e.PENDING=0]="PENDING",e[e.REJECTED=1]="REJECTED",e[e.RESOLVED=2]="RESOLVED"})(Ne||(Ne={}));var ht=class{constructor(t=!0){this._state=Ne.PENDING,this._promise=new Promise((n,r)=>{this._resolve=n,this._reject=r}),t&&this._promise.catch(n=>{})}get state(){return this._state}get promise(){return this._promise}resolve(t){if(this.state!==Ne.PENDING)throw new Error(`cannot resolve ${Ne[this.state].toLowerCase()}`);this._resolve(t),this._state=Ne.RESOLVED}reject(t){if(this.state!==Ne.PENDING)throw new Error(`cannot reject ${Ne[this.state].toLowerCase()}`);this._reject(t),this._state=Ne.REJECTED}resolvePending(t){this._state===Ne.PENDING&&this.resolve(t)}rejectPending(t){this._state===Ne.PENDING&&this.reject(t)}};var Cm=function(e,t,n,r){function i(o){return o instanceof n?o:new n(function(s){s(o)})}return new(n||(n=Promise))(function(o,s){function a(c){try{u(r.next(c))}catch(f){s(f)}}function l(c){try{u(r.throw(c))}catch(f){s(f)}}function u(c){c.done?o(c.value):i(c.value).then(a,l)}u((r=r.apply(e,t||[])).next())})},Gn=class{constructor(t,n,r,i,o,s,a){this.method=t,this.requestHeaders=n,this.request=r,this.headers=i,this.response=o,this.status=s,this.trailers=a}then(t,n){return this.promiseFinished().then(r=>t?Promise.resolve(t(r)):r,r=>n?Promise.resolve(n(r)):Promise.reject(r))}promiseFinished(){return Cm(this,void 0,void 0,function*(){let[t,n,r,i]=yield Promise.all([this.headers,this.response,this.status,this.trailers]);return{method:this.method,requestHeaders:this.requestHeaders,request:this.request,headers:t,response:n,status:r,trailers:i}})}};function $n(e,t,n,r,i){var o,s,a,l;if(e=="unary"){let u=(c,f,p)=>t.unary(c,f,p);for(let c of((o=r.interceptors)!==null&&o!==void 0?o:[]).filter(f=>f.interceptUnary).reverse()){let f=u;u=(p,g,S)=>c.interceptUnary(f,p,g,S)}return u(n,i,r)}if(e=="serverStreaming"){let u=(c,f,p)=>t.serverStreaming(c,f,p);for(let c of((s=r.interceptors)!==null&&s!==void 0?s:[]).filter(f=>f.interceptServerStreaming).reverse()){let f=u;u=(p,g,S)=>c.interceptServerStreaming(f,p,g,S)}return u(n,i,r)}if(e=="clientStreaming"){let u=(c,f)=>t.clientStreaming(c,f);for(let c of((a=r.interceptors)!==null&&a!==void 0?a:[]).filter(f=>f.interceptClientStreaming).reverse()){let f=u;u=(p,g)=>c.interceptClientStreaming(f,p,g)}return u(n,r)}if(e=="duplex"){let u=(c,f)=>t.duplex(c,f);for(let c of((l=r.interceptors)!==null&&l!==void 0?l:[]).filter(f=>f.interceptDuplex).reverse()){let f=u;u=(p,g)=>c.interceptDuplex(f,p,g)}return u(n,r)}es(e)}var Ps=(o=>(o[o.UNSPECIFIED=0]="UNSPECIFIED",o[o.OFFER=1]="OFFER",o[o.ANSWER=2]="ANSWER",o[o.PRANSWER=3]="PRANSWER",o[o.ROLLBACK=4]="ROLLBACK",o))(Ps||{}),ss=class extends V{constructor(){super("service.rpc.v1.PrepareReq",[])}},km=new ss,as=class extends V{constructor(){super("service.rpc.v1.PrepareResp",[{no:1,name:"ice_servers",kind:"message",repeat:1,T:()=>Tm}])}},xm=new as,ls=class extends V{constructor(){super("service.rpc.v1.IceServer",[{no:1,name:"urls",kind:"scalar",repeat:2,T:9},{no:2,name:"username",kind:"scalar",opt:!0,T:9},{no:3,name:"credential",kind:"scalar",opt:!0,T:9}])}},Tm=new ls,us=class extends V{constructor(){super("service.rpc.v1.SendReq",[{no:1,name:"msg",kind:"message",T:()=>Zu}])}},Em=new us,cs=class extends V{constructor(){super("service.rpc.v1.SendResp",[])}},Rm=new cs,fs=class extends V{constructor(){super("service.rpc.v1.RecvReq",[{no:1,name:"info",kind:"message",T:()=>_m}])}},Pm=new fs,ps=class extends V{constructor(){super("service.rpc.v1.RecvResp",[{no:1,name:"msgs",kind:"message",repeat:1,T:()=>Zu}])}},Im=new ps,ds=class extends V{constructor(){super("service.rpc.v1.PeerInfo",[{no:1,name:"conn_id",kind:"scalar",T:13},{no:2,name:"enable_discovery",kind:"scalar",T:8}])}},_m=new ds,ms=class extends V{constructor(){super("service.rpc.v1.Message",[{no:1,name:"header",kind:"message",T:()=>wm},{no:2,name:"payload",kind:"message",T:()=>Nm}])}},Zu=new ms,hs=class extends V{constructor(){super("service.rpc.v1.MessagePayload",[{no:1,name:"signal",kind:"message",oneof:"payloadType",T:()=>Om},{no:2,name:"join",kind:"message",oneof:"payloadType",T:()=>Dm},{no:3,name:"bye",kind:"message",oneof:"payloadType",T:()=>Fm},{no:4,name:"ack",kind:"message",oneof:"payloadType",T:()=>Am}])}},Nm=new hs,gs=class extends V{constructor(){super("service.rpc.v1.MessageHeader",[{no:1,name:"group_id",kind:"scalar",T:9},{no:2,name:"peer_id",kind:"scalar",T:9},{no:3,name:"conn_id",kind:"scalar",T:13},{no:4,name:"other_group_id",kind:"scalar",T:9},{no:5,name:"other_peer_id",kind:"scalar",T:9},{no:6,name:"other_conn_id",kind:"scalar",T:13},{no:7,name:"seqnum",kind:"scalar",T:13},{no:8,name:"reliable",kind:"scalar",T:8}])}},wm=new gs,ys=class extends V{constructor(){super("service.rpc.v1.Signal",[{no:1,name:"generation_counter",kind:"scalar",T:13},{no:9,name:"sdp",kind:"message",oneof:"data",T:()=>Lm},{no:10,name:"ice_candidate",kind:"message",oneof:"data",T:()=>Mm}])}},Om=new ys,vs=class extends V{constructor(){super("service.rpc.v1.Sdp",[{no:1,name:"kind",kind:"enum",T:()=>["service.rpc.v1.SdpKind",Ps,"SDP_KIND_"]},{no:2,name:"sdp",kind:"scalar",T:9}])}},Lm=new vs,Ss=class extends V{constructor(){super("service.rpc.v1.ICECandidate",[{no:1,name:"candidate",kind:"scalar",T:9},{no:2,name:"sdp_m_line_index",kind:"scalar",opt:!0,T:13},{no:3,name:"sdp_mid",kind:"scalar",opt:!0,T:9},{no:4,name:"username",kind:"scalar",opt:!0,T:9},{no:5,name:"password",kind:"scalar",opt:!0,T:9}])}},Mm=new Ss,Cs=class extends V{constructor(){super("service.rpc.v1.Join",[])}},Dm=new Cs,ks=class extends V{constructor(){super("service.rpc.v1.Bye",[])}},Fm=new ks,xs=class extends V{constructor(){super("service.rpc.v1.Ack",[{no:1,name:"ack_ranges",kind:"message",repeat:1,T:()=>Um}])}},Am=new xs,Ts=class extends V{constructor(){super("service.rpc.v1.AckRange",[{no:1,name:"seqnum_start",kind:"scalar",T:13},{no:2,name:"seqnum_end",kind:"scalar",T:13}])}},Um=new Ts,Es=class extends V{constructor(){super("service.rpc.v1.DataChannel",[{no:10,name:"heartbeat",kind:"message",oneof:"payload",T:()=>jm}])}},qv=new Es,Rs=class extends V{constructor(){super("service.rpc.v1.DataChannelHeartbeat",[])}},jm=new Rs,ui=new Kn("service.rpc.v1.Tunnel",[{name:"Prepare",options:{},I:km,O:xm},{name:"Send",options:{},I:Em,O:Rm},{name:"Recv",options:{},I:Pm,O:Im}]);var ci=class{constructor(t){this._transport=t}typeName=ui.typeName;methods=ui.methods;options=ui.options;prepare(t,n){let r=this.methods[0],i=this._transport.mergeOptions(n);return $n("unary",this._transport,r,i,t)}send(t,n){let r=this.methods[1],i=this._transport.mergeOptions(n);return $n("unary",this._transport,r,i,t)}recv(t,n){let r=this.methods[2],i=this._transport.mergeOptions(n);return $n("unary",this._transport,r,i,t)}};var tc=!0,nc=!0;function Hn(e,t,n){let r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}function $e(e,t,n){if(!e.RTCPeerConnection)return;let r=e.RTCPeerConnection.prototype,i=r.addEventListener;r.addEventListener=function(s,a){if(s!==t)return i.apply(this,arguments);let l=u=>{let c=n(u);c&&(a.handleEvent?a.handleEvent(c):a(c))};return this._eventMap=this._eventMap||{},this._eventMap[t]||(this._eventMap[t]=new Map),this._eventMap[t].set(a,l),i.apply(this,[s,l])};let o=r.removeEventListener;r.removeEventListener=function(s,a){if(s!==t||!this._eventMap||!this._eventMap[t])return o.apply(this,arguments);if(!this._eventMap[t].has(a))return o.apply(this,arguments);let l=this._eventMap[t].get(a);return this._eventMap[t].delete(a),this._eventMap[t].size===0&&delete this._eventMap[t],Object.keys(this._eventMap).length===0&&delete this._eventMap,o.apply(this,[s,l])},Object.defineProperty(r,"on"+t,{get(){return this["_on"+t]},set(s){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),s&&this.addEventListener(t,this["_on"+t]=s)},enumerable:!0,configurable:!0})}function rc(e){return typeof e!="boolean"?new Error("Argument type: "+typeof e+". Please use a boolean."):(tc=e,e?"adapter.js logging disabled":"adapter.js logging enabled")}function ic(e){return typeof e!="boolean"?new Error("Argument type: "+typeof e+". Please use a boolean."):(nc=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))}function fi(){if(typeof window=="object"){if(tc)return;typeof console<"u"&&typeof console.log=="function"&&console.log.apply(console,arguments)}}function on(e,t){nc&&console.warn(e+" is deprecated, please use "+t+" instead.")}function oc(e){let t={browser:null,version:null};if(typeof e>"u"||!e.navigator||!e.navigator.userAgent)return t.browser="Not a browser.",t;let{navigator:n}=e;if(n.userAgentData&&n.userAgentData.brands){let r=n.userAgentData.brands.find(i=>i.brand==="Chromium");if(r)return{browser:"chrome",version:parseInt(r.version,10)}}if(n.mozGetUserMedia)t.browser="firefox",t.version=Hn(n.userAgent,/Firefox\/(\d+)\./,1);else if(n.webkitGetUserMedia||e.isSecureContext===!1&&e.webkitRTCPeerConnection)t.browser="chrome",t.version=Hn(n.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(e.RTCPeerConnection&&n.userAgent.match(/AppleWebKit\/(\d+)\./))t.browser="safari",t.version=Hn(n.userAgent,/AppleWebKit\/(\d+)\./,1),t.supportsUnifiedPlan=e.RTCRtpTransceiver&&"currentDirection"in e.RTCRtpTransceiver.prototype;else return t.browser="Not a supported browser.",t;return t}function ec(e){return Object.prototype.toString.call(e)==="[object Object]"}function _s(e){return ec(e)?Object.keys(e).reduce(function(t,n){let r=ec(e[n]),i=r?_s(e[n]):e[n],o=r&&!Object.keys(i).length;return i===void 0||o?t:Object.assign(t,{[n]:i})},{}):e}function Is(e,t,n){!t||n.has(t.id)||(n.set(t.id,t),Object.keys(t).forEach(r=>{r.endsWith("Id")?Is(e,e.get(t[r]),n):r.endsWith("Ids")&&t[r].forEach(i=>{Is(e,e.get(i),n)})}))}function Ns(e,t,n){let r=n?"outbound-rtp":"inbound-rtp",i=new Map;if(t===null)return i;let o=[];return e.forEach(s=>{s.type==="track"&&s.trackIdentifier===t.id&&o.push(s)}),o.forEach(s=>{e.forEach(a=>{a.type===r&&a.trackId===s.id&&Is(e,a,i)})}),i}var mi={};Kr(mi,{fixNegotiationNeeded:()=>Fs,shimAddTrackRemoveTrack:()=>Ds,shimAddTrackRemoveTrackWithNative:()=>ac,shimGetSendersWithDtmf:()=>Ls,shimGetUserMedia:()=>pi,shimMediaStream:()=>ws,shimOnTrack:()=>Os,shimPeerConnection:()=>di,shimSenderReceiverGetStats:()=>Ms});var sc=fi;function pi(e,t){let n=e&&e.navigator;if(!n.mediaDevices)return;let r=function(a){if(typeof a!="object"||a.mandatory||a.optional)return a;let l={};return Object.keys(a).forEach(u=>{if(u==="require"||u==="advanced"||u==="mediaSource")return;let c=typeof a[u]=="object"?a[u]:{ideal:a[u]};c.exact!==void 0&&typeof c.exact=="number"&&(c.min=c.max=c.exact);let f=function(p,g){return p?p+g.charAt(0).toUpperCase()+g.slice(1):g==="deviceId"?"sourceId":g};if(c.ideal!==void 0){l.optional=l.optional||[];let p={};typeof c.ideal=="number"?(p[f("min",u)]=c.ideal,l.optional.push(p),p={},p[f("max",u)]=c.ideal,l.optional.push(p)):(p[f("",u)]=c.ideal,l.optional.push(p))}c.exact!==void 0&&typeof c.exact!="number"?(l.mandatory=l.mandatory||{},l.mandatory[f("",u)]=c.exact):["min","max"].forEach(p=>{c[p]!==void 0&&(l.mandatory=l.mandatory||{},l.mandatory[f(p,u)]=c[p])})}),a.advanced&&(l.optional=(l.optional||[]).concat(a.advanced)),l},i=function(a,l){if(t.version>=61)return l(a);if(a=JSON.parse(JSON.stringify(a)),a&&typeof a.audio=="object"){let u=function(c,f,p){f in c&&!(p in c)&&(c[p]=c[f],delete c[f])};a=JSON.parse(JSON.stringify(a)),u(a.audio,"autoGainControl","googAutoGainControl"),u(a.audio,"noiseSuppression","googNoiseSuppression"),a.audio=r(a.audio)}if(a&&typeof a.video=="object"){let u=a.video.facingMode;u=u&&(typeof u=="object"?u:{ideal:u});let c=t.version<66;if(u&&(u.exact==="user"||u.exact==="environment"||u.ideal==="user"||u.ideal==="environment")&&!(n.mediaDevices.getSupportedConstraints&&n.mediaDevices.getSupportedConstraints().facingMode&&!c)){delete a.video.facingMode;let f;if(u.exact==="environment"||u.ideal==="environment"?f=["back","rear"]:(u.exact==="user"||u.ideal==="user")&&(f=["front"]),f)return n.mediaDevices.enumerateDevices().then(p=>{p=p.filter(S=>S.kind==="videoinput");let g=p.find(S=>f.some(v=>S.label.toLowerCase().includes(v)));return!g&&p.length&&f.includes("back")&&(g=p[p.length-1]),g&&(a.video.deviceId=u.exact?{exact:g.deviceId}:{ideal:g.deviceId}),a.video=r(a.video),sc("chrome: "+JSON.stringify(a)),l(a)})}a.video=r(a.video)}return sc("chrome: "+JSON.stringify(a)),l(a)},o=function(a){return t.version>=64?a:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[a.name]||a.name,message:a.message,constraint:a.constraint||a.constraintName,toString(){return this.name+(this.message&&": ")+this.message}}},s=function(a,l,u){i(a,c=>{n.webkitGetUserMedia(c,l,f=>{u&&u(o(f))})})};if(n.getUserMedia=s.bind(n),n.mediaDevices.getUserMedia){let a=n.mediaDevices.getUserMedia.bind(n.mediaDevices);n.mediaDevices.getUserMedia=function(l){return i(l,u=>a(u).then(c=>{if(u.audio&&!c.getAudioTracks().length||u.video&&!c.getVideoTracks().length)throw c.getTracks().forEach(f=>{f.stop()}),new DOMException("","NotFoundError");return c},c=>Promise.reject(o(c))))}}}function ws(e){e.MediaStream=e.MediaStream||e.webkitMediaStream}function Os(e){if(typeof e=="object"&&e.RTCPeerConnection&&!("ontrack"in e.RTCPeerConnection.prototype)){Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get(){return this._ontrack},set(n){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=n)},enumerable:!0,configurable:!0});let t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){return this._ontrackpoly||(this._ontrackpoly=r=>{r.stream.addEventListener("addtrack",i=>{let o;e.RTCPeerConnection.prototype.getReceivers?o=this.getReceivers().find(a=>a.track&&a.track.id===i.track.id):o={track:i.track};let s=new Event("track");s.track=i.track,s.receiver=o,s.transceiver={receiver:o},s.streams=[r.stream],this.dispatchEvent(s)}),r.stream.getTracks().forEach(i=>{let o;e.RTCPeerConnection.prototype.getReceivers?o=this.getReceivers().find(a=>a.track&&a.track.id===i.id):o={track:i};let s=new Event("track");s.track=i,s.receiver=o,s.transceiver={receiver:o},s.streams=[r.stream],this.dispatchEvent(s)})},this.addEventListener("addstream",this._ontrackpoly)),t.apply(this,arguments)}}else $e(e,"track",t=>(t.transceiver||Object.defineProperty(t,"transceiver",{value:{receiver:t.receiver}}),t))}function Ls(e){if(typeof e=="object"&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){let t=function(i,o){return{track:o,get dtmf(){return this._dtmf===void 0&&(o.kind==="audio"?this._dtmf=i.createDTMFSender(o):this._dtmf=null),this._dtmf},_pc:i}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};let i=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(a,l){let u=i.apply(this,arguments);return u||(u=t(this,a),this._senders.push(u)),u};let o=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(a){o.apply(this,arguments);let l=this._senders.indexOf(a);l!==-1&&this._senders.splice(l,1)}}let n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(o){this._senders=this._senders||[],n.apply(this,[o]),o.getTracks().forEach(s=>{this._senders.push(t(this,s))})};let r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(o){this._senders=this._senders||[],r.apply(this,[o]),o.getTracks().forEach(s=>{let a=this._senders.find(l=>l.track===s);a&&this._senders.splice(this._senders.indexOf(a),1)})}}else if(typeof e=="object"&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){let t=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){let r=t.apply(this,[]);return r.forEach(i=>i._pc=this),r},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return this._dtmf===void 0&&(this.track.kind==="audio"?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}}function Ms(e){if(!(typeof e=="object"&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver))return;if(!("getStats"in e.RTCRtpSender.prototype)){let n=e.RTCPeerConnection.prototype.getSenders;n&&(e.RTCPeerConnection.prototype.getSenders=function(){let o=n.apply(this,[]);return o.forEach(s=>s._pc=this),o});let r=e.RTCPeerConnection.prototype.addTrack;r&&(e.RTCPeerConnection.prototype.addTrack=function(){let o=r.apply(this,arguments);return o._pc=this,o}),e.RTCRtpSender.prototype.getStats=function(){let o=this;return this._pc.getStats().then(s=>Ns(s,o.track,!0))}}if(!("getStats"in e.RTCRtpReceiver.prototype)){let n=e.RTCPeerConnection.prototype.getReceivers;n&&(e.RTCPeerConnection.prototype.getReceivers=function(){let i=n.apply(this,[]);return i.forEach(o=>o._pc=this),i}),$e(e,"track",r=>(r.receiver._pc=r.srcElement,r)),e.RTCRtpReceiver.prototype.getStats=function(){let i=this;return this._pc.getStats().then(o=>Ns(o,i.track,!1))}}if(!("getStats"in e.RTCRtpSender.prototype&&"getStats"in e.RTCRtpReceiver.prototype))return;let t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){let r=arguments[0],i,o,s;return this.getSenders().forEach(a=>{a.track===r&&(i?s=!0:i=a)}),this.getReceivers().forEach(a=>(a.track===r&&(o?s=!0:o=a),a.track===r)),s||i&&o?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):i?i.getStats():o?o.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return t.apply(this,arguments)}}function ac(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map(s=>this._shimmedLocalStreams[s][0])};let t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(s,a){if(!a)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};let l=t.apply(this,arguments);return this._shimmedLocalStreams[a.id]?this._shimmedLocalStreams[a.id].indexOf(l)===-1&&this._shimmedLocalStreams[a.id].push(l):this._shimmedLocalStreams[a.id]=[a,l],l};let n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(s){this._shimmedLocalStreams=this._shimmedLocalStreams||{},s.getTracks().forEach(u=>{if(this.getSenders().find(f=>f.track===u))throw new DOMException("Track already exists.","InvalidAccessError")});let a=this.getSenders();n.apply(this,arguments);let l=this.getSenders().filter(u=>a.indexOf(u)===-1);this._shimmedLocalStreams[s.id]=[s].concat(l)};let r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(s){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[s.id],r.apply(this,arguments)};let i=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(s){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},s&&Object.keys(this._shimmedLocalStreams).forEach(a=>{let l=this._shimmedLocalStreams[a].indexOf(s);l!==-1&&this._shimmedLocalStreams[a].splice(l,1),this._shimmedLocalStreams[a].length===1&&delete this._shimmedLocalStreams[a]}),i.apply(this,arguments)}}function Ds(e,t){if(!e.RTCPeerConnection)return;if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return ac(e);let n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){let c=n.apply(this);return this._reverseStreams=this._reverseStreams||{},c.map(f=>this._reverseStreams[f.id])};let r=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(c){if(this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},c.getTracks().forEach(f=>{if(this.getSenders().find(g=>g.track===f))throw new DOMException("Track already exists.","InvalidAccessError")}),!this._reverseStreams[c.id]){let f=new e.MediaStream(c.getTracks());this._streams[c.id]=f,this._reverseStreams[f.id]=c,c=f}r.apply(this,[c])};let i=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(c){this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},i.apply(this,[this._streams[c.id]||c]),delete this._reverseStreams[this._streams[c.id]?this._streams[c.id].id:c.id],delete this._streams[c.id]},e.RTCPeerConnection.prototype.addTrack=function(c,f){if(this.signalingState==="closed")throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");let p=[].slice.call(arguments,1);if(p.length!==1||!p[0].getTracks().find(v=>v===c))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");if(this.getSenders().find(v=>v.track===c))throw new DOMException("Track already exists.","InvalidAccessError");this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{};let S=this._streams[f.id];if(S)S.addTrack(c),Promise.resolve().then(()=>{this.dispatchEvent(new Event("negotiationneeded"))});else{let v=new e.MediaStream([c]);this._streams[f.id]=v,this._reverseStreams[v.id]=f,this.addStream(v)}return this.getSenders().find(v=>v.track===c)};function o(u,c){let f=c.sdp;return Object.keys(u._reverseStreams||[]).forEach(p=>{let g=u._reverseStreams[p],S=u._streams[g.id];f=f.replace(new RegExp(S.id,"g"),g.id)}),new RTCSessionDescription({type:c.type,sdp:f})}function s(u,c){let f=c.sdp;return Object.keys(u._reverseStreams||[]).forEach(p=>{let g=u._reverseStreams[p],S=u._streams[g.id];f=f.replace(new RegExp(g.id,"g"),S.id)}),new RTCSessionDescription({type:c.type,sdp:f})}["createOffer","createAnswer"].forEach(function(u){let c=e.RTCPeerConnection.prototype[u],f={[u](){let p=arguments;return arguments.length&&typeof arguments[0]=="function"?c.apply(this,[S=>{let v=o(this,S);p[0].apply(null,[v])},S=>{p[1]&&p[1].apply(null,S)},arguments[2]]):c.apply(this,arguments).then(S=>o(this,S))}};e.RTCPeerConnection.prototype[u]=f[u]});let a=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return!arguments.length||!arguments[0].type?a.apply(this,arguments):(arguments[0]=s(this,arguments[0]),a.apply(this,arguments))};let l=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get(){let u=l.get.apply(this);return u.type===""?u:o(this,u)}}),e.RTCPeerConnection.prototype.removeTrack=function(c){if(this.signalingState==="closed")throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!c._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(!(c._pc===this))throw new DOMException("Sender was not created by this connection.","InvalidAccessError");this._streams=this._streams||{};let p;Object.keys(this._streams).forEach(g=>{this._streams[g].getTracks().find(v=>c.track===v)&&(p=this._streams[g])}),p&&(p.getTracks().length===1?this.removeStream(this._reverseStreams[p.id]):p.removeTrack(c.track),this.dispatchEvent(new Event("negotiationneeded")))}}function di(e,t){!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=e.webkitRTCPeerConnection),e.RTCPeerConnection&&t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(n){let r=e.RTCPeerConnection.prototype[n],i={[n](){return arguments[0]=new(n==="addIceCandidate"?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),r.apply(this,arguments)}};e.RTCPeerConnection.prototype[n]=i[n]})}function Fs(e,t){$e(e,"negotiationneeded",n=>{let r=n.target;if(!((t.version<72||r.getConfiguration&&r.getConfiguration().sdpSemantics==="plan-b")&&r.signalingState!=="stable"))return n})}var yi={};Kr(yi,{shimAddTransceiver:()=>Bs,shimCreateAnswer:()=>Gs,shimCreateOffer:()=>Ks,shimGetDisplayMedia:()=>lc,shimGetParameters:()=>Vs,shimGetUserMedia:()=>hi,shimOnTrack:()=>As,shimPeerConnection:()=>gi,shimRTCDataChannel:()=>bs,shimReceiverGetStats:()=>js,shimRemoveStream:()=>zs,shimSenderGetStats:()=>Us});function hi(e,t){let n=e&&e.navigator,r=e&&e.MediaStreamTrack;if(n.getUserMedia=function(i,o,s){on("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(i).then(o,s)},!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){let i=function(s,a,l){a in s&&!(l in s)&&(s[l]=s[a],delete s[a])},o=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(s){return typeof s=="object"&&typeof s.audio=="object"&&(s=JSON.parse(JSON.stringify(s)),i(s.audio,"autoGainControl","mozAutoGainControl"),i(s.audio,"noiseSuppression","mozNoiseSuppression")),o(s)},r&&r.prototype.getSettings){let s=r.prototype.getSettings;r.prototype.getSettings=function(){let a=s.apply(this,arguments);return i(a,"mozAutoGainControl","autoGainControl"),i(a,"mozNoiseSuppression","noiseSuppression"),a}}if(r&&r.prototype.applyConstraints){let s=r.prototype.applyConstraints;r.prototype.applyConstraints=function(a){return this.kind==="audio"&&typeof a=="object"&&(a=JSON.parse(JSON.stringify(a)),i(a,"autoGainControl","mozAutoGainControl"),i(a,"noiseSuppression","mozNoiseSuppression")),s.apply(this,[a])}}}}function lc(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&(e.navigator.mediaDevices.getDisplayMedia=function(r){if(!(r&&r.video)){let i=new DOMException("getDisplayMedia without video constraints is undefined");return i.name="NotFoundError",i.code=8,Promise.reject(i)}return r.video===!0?r.video={mediaSource:t}:r.video.mediaSource=t,e.navigator.mediaDevices.getUserMedia(r)})}function As(e){typeof e=="object"&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function gi(e,t){if(typeof e!="object"||!(e.RTCPeerConnection||e.mozRTCPeerConnection))return;!e.RTCPeerConnection&&e.mozRTCPeerConnection&&(e.RTCPeerConnection=e.mozRTCPeerConnection),t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(i){let o=e.RTCPeerConnection.prototype[i],s={[i](){return arguments[0]=new(i==="addIceCandidate"?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),o.apply(this,arguments)}};e.RTCPeerConnection.prototype[i]=s[i]});let n={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},r=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){let[o,s,a]=arguments;return r.apply(this,[o||null]).then(l=>{if(t.version<53&&!s)try{l.forEach(u=>{u.type=n[u.type]||u.type})}catch(u){if(u.name!=="TypeError")throw u;l.forEach((c,f)=>{l.set(f,Object.assign({},c,{type:n[c.type]||c.type}))})}return l}).then(s,a)}}function Us(e){if(!(typeof e=="object"&&e.RTCPeerConnection&&e.RTCRtpSender)||e.RTCRtpSender&&"getStats"in e.RTCRtpSender.prototype)return;let t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){let i=t.apply(this,[]);return i.forEach(o=>o._pc=this),i});let n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){let i=n.apply(this,arguments);return i._pc=this,i}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}function js(e){if(!(typeof e=="object"&&e.RTCPeerConnection&&e.RTCRtpSender)||e.RTCRtpSender&&"getStats"in e.RTCRtpReceiver.prototype)return;let t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){let r=t.apply(this,[]);return r.forEach(i=>i._pc=this),r}),$e(e,"track",n=>(n.receiver._pc=n.srcElement,n)),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}function zs(e){!e.RTCPeerConnection||"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(n){on("removeStream","removeTrack"),this.getSenders().forEach(r=>{r.track&&n.getTracks().includes(r.track)&&this.removeTrack(r)})})}function bs(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)}function Bs(e){if(!(typeof e=="object"&&e.RTCPeerConnection))return;let t=e.RTCPeerConnection.prototype.addTransceiver;t&&(e.RTCPeerConnection.prototype.addTransceiver=function(){this.setParametersPromises=[];let r=arguments[1]&&arguments[1].sendEncodings;r===void 0&&(r=[]),r=[...r];let i=r.length>0;i&&r.forEach(s=>{if("rid"in s&&!/^[a-z0-9]{0,16}$/i.test(s.rid))throw new TypeError("Invalid RID value provided.");if("scaleResolutionDownBy"in s&&!(parseFloat(s.scaleResolutionDownBy)>=1))throw new RangeError("scale_resolution_down_by must be >= 1.0");if("maxFramerate"in s&&!(parseFloat(s.maxFramerate)>=0))throw new RangeError("max_framerate must be >= 0.0")});let o=t.apply(this,arguments);if(i){let{sender:s}=o,a=s.getParameters();(!("encodings"in a)||a.encodings.length===1&&Object.keys(a.encodings[0]).length===0)&&(a.encodings=r,s.sendEncodings=r,this.setParametersPromises.push(s.setParameters(a).then(()=>{delete s.sendEncodings}).catch(()=>{delete s.sendEncodings})))}return o})}function Vs(e){if(!(typeof e=="object"&&e.RTCRtpSender))return;let t=e.RTCRtpSender.prototype.getParameters;t&&(e.RTCRtpSender.prototype.getParameters=function(){let r=t.apply(this,arguments);return"encodings"in r||(r.encodings=[].concat(this.sendEncodings||[{}])),r})}function Ks(e){if(!(typeof e=="object"&&e.RTCPeerConnection))return;let t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}function Gs(e){if(!(typeof e=="object"&&e.RTCPeerConnection))return;let t=e.RTCPeerConnection.prototype.createAnswer;e.RTCPeerConnection.prototype.createAnswer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then(()=>t.apply(this,arguments)).finally(()=>{this.setParametersPromises=[]}):t.apply(this,arguments)}}var vi={};Kr(vi,{shimAudioContext:()=>qs,shimCallbacksAPI:()=>Ws,shimConstraints:()=>uc,shimCreateOfferLegacy:()=>Ys,shimGetUserMedia:()=>Js,shimLocalStreamsAPI:()=>$s,shimRTCIceServerUrls:()=>Qs,shimRemoteStreamsAPI:()=>Hs,shimTrackEventTransceiver:()=>Xs});function $s(e){if(!(typeof e!="object"||!e.RTCPeerConnection)){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),!("addStream"in e.RTCPeerConnection.prototype)){let t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(r){this._localStreams||(this._localStreams=[]),this._localStreams.includes(r)||this._localStreams.push(r),r.getAudioTracks().forEach(i=>t.call(this,i,r)),r.getVideoTracks().forEach(i=>t.call(this,i,r))},e.RTCPeerConnection.prototype.addTrack=function(r,...i){return i&&i.forEach(o=>{this._localStreams?this._localStreams.includes(o)||this._localStreams.push(o):this._localStreams=[o]}),t.apply(this,arguments)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(n){this._localStreams||(this._localStreams=[]);let r=this._localStreams.indexOf(n);if(r===-1)return;this._localStreams.splice(r,1);let i=n.getTracks();this.getSenders().forEach(o=>{i.includes(o.track)&&this.removeTrack(o)})})}}function Hs(e){if(!(typeof e!="object"||!e.RTCPeerConnection)&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get(){return this._onaddstream},set(n){this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=n),this.addEventListener("track",this._onaddstreampoly=r=>{r.streams.forEach(i=>{if(this._remoteStreams||(this._remoteStreams=[]),this._remoteStreams.includes(i))return;this._remoteStreams.push(i);let o=new Event("addstream");o.stream=i,this.dispatchEvent(o)})})}});let t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){let r=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(i){i.streams.forEach(o=>{if(r._remoteStreams||(r._remoteStreams=[]),r._remoteStreams.indexOf(o)>=0)return;r._remoteStreams.push(o);let s=new Event("addstream");s.stream=o,r.dispatchEvent(s)})}),t.apply(r,arguments)}}}function Ws(e){if(typeof e!="object"||!e.RTCPeerConnection)return;let t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,i=t.setLocalDescription,o=t.setRemoteDescription,s=t.addIceCandidate;t.createOffer=function(u,c){let f=arguments.length>=2?arguments[2]:arguments[0],p=n.apply(this,[f]);return c?(p.then(u,c),Promise.resolve()):p},t.createAnswer=function(u,c){let f=arguments.length>=2?arguments[2]:arguments[0],p=r.apply(this,[f]);return c?(p.then(u,c),Promise.resolve()):p};let a=function(l,u,c){let f=i.apply(this,[l]);return c?(f.then(u,c),Promise.resolve()):f};t.setLocalDescription=a,a=function(l,u,c){let f=o.apply(this,[l]);return c?(f.then(u,c),Promise.resolve()):f},t.setRemoteDescription=a,a=function(l,u,c){let f=s.apply(this,[l]);return c?(f.then(u,c),Promise.resolve()):f},t.addIceCandidate=a}function Js(e){let t=e&&e.navigator;if(t.mediaDevices&&t.mediaDevices.getUserMedia){let n=t.mediaDevices,r=n.getUserMedia.bind(n);t.mediaDevices.getUserMedia=i=>r(uc(i))}!t.getUserMedia&&t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=(function(r,i,o){t.mediaDevices.getUserMedia(r).then(i,o)}).bind(t))}function uc(e){return e&&e.video!==void 0?Object.assign({},e,{video:_s(e.video)}):e}function Qs(e){if(!e.RTCPeerConnection)return;let t=e.RTCPeerConnection;e.RTCPeerConnection=function(r,i){if(r&&r.iceServers){let o=[];for(let s=0;s<r.iceServers.length;s++){let a=r.iceServers[s];a.urls===void 0&&a.url?(on("RTCIceServer.url","RTCIceServer.urls"),a=JSON.parse(JSON.stringify(a)),a.urls=a.url,delete a.url,o.push(a)):o.push(r.iceServers[s])}r.iceServers=o}return new t(r,i)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in t&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get(){return t.generateCertificate}})}function Xs(e){typeof e=="object"&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function Ys(e){let t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(r){if(r){typeof r.offerToReceiveAudio<"u"&&(r.offerToReceiveAudio=!!r.offerToReceiveAudio);let i=this.getTransceivers().find(s=>s.receiver.track.kind==="audio");r.offerToReceiveAudio===!1&&i?i.direction==="sendrecv"?i.setDirection?i.setDirection("sendonly"):i.direction="sendonly":i.direction==="recvonly"&&(i.setDirection?i.setDirection("inactive"):i.direction="inactive"):r.offerToReceiveAudio===!0&&!i&&this.addTransceiver("audio",{direction:"recvonly"}),typeof r.offerToReceiveVideo<"u"&&(r.offerToReceiveVideo=!!r.offerToReceiveVideo);let o=this.getTransceivers().find(s=>s.receiver.track.kind==="video");r.offerToReceiveVideo===!1&&o?o.direction==="sendrecv"?o.setDirection?o.setDirection("sendonly"):o.direction="sendonly":o.direction==="recvonly"&&(o.setDirection?o.setDirection("inactive"):o.direction="inactive"):r.offerToReceiveVideo===!0&&!o&&this.addTransceiver("video",{direction:"recvonly"})}return t.apply(this,arguments)}}function qs(e){typeof e!="object"||e.AudioContext||(e.AudioContext=e.webkitAudioContext)}var ta={};Kr(ta,{removeExtmapAllowMixed:()=>ki,shimAddIceCandidateNullOrEmpty:()=>Xn,shimConnectionState:()=>Ci,shimMaxMessageSize:()=>Jn,shimParameterlessSetLocalDescription:()=>Yn,shimRTCIceCandidate:()=>Wn,shimRTCIceCandidateRelayProtocol:()=>Si,shimSendThrowTypeError:()=>Qn});var sn=tn(ea());function Wn(e){if(!e.RTCIceCandidate||e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)return;let t=e.RTCIceCandidate;e.RTCIceCandidate=function(r){if(typeof r=="object"&&r.candidate&&r.candidate.indexOf("a=")===0&&(r=JSON.parse(JSON.stringify(r)),r.candidate=r.candidate.substring(2)),r.candidate&&r.candidate.length){let i=new t(r),o=sn.default.parseCandidate(r.candidate);for(let s in o)s in i||Object.defineProperty(i,s,{value:o[s]});return i.toJSON=function(){return{candidate:i.candidate,sdpMid:i.sdpMid,sdpMLineIndex:i.sdpMLineIndex,usernameFragment:i.usernameFragment}},i}return new t(r)},e.RTCIceCandidate.prototype=t.prototype,$e(e,"icecandidate",n=>(n.candidate&&Object.defineProperty(n,"candidate",{value:new e.RTCIceCandidate(n.candidate),writable:"false"}),n))}function Si(e){!e.RTCIceCandidate||e.RTCIceCandidate&&"relayProtocol"in e.RTCIceCandidate.prototype||$e(e,"icecandidate",t=>{if(t.candidate){let n=sn.default.parseCandidate(t.candidate.candidate);n.type==="relay"&&(t.candidate.relayProtocol={0:"tls",1:"tcp",2:"udp"}[n.priority>>24])}return t})}function Jn(e,t){if(!e.RTCPeerConnection)return;"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get(){return typeof this._sctp>"u"?null:this._sctp}});let n=function(a){if(!a||!a.sdp)return!1;let l=sn.default.splitSections(a.sdp);return l.shift(),l.some(u=>{let c=sn.default.parseMLine(u);return c&&c.kind==="application"&&c.protocol.indexOf("SCTP")!==-1})},r=function(a){let l=a.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(l===null||l.length<2)return-1;let u=parseInt(l[1],10);return u!==u?-1:u},i=function(a){let l=65536;return t.browser==="firefox"&&(t.version<57?a===-1?l=16384:l=2147483637:t.version<60?l=t.version===57?65535:65536:l=2147483637),l},o=function(a,l){let u=65536;t.browser==="firefox"&&t.version===57&&(u=65535);let c=sn.default.matchPrefix(a.sdp,"a=max-message-size:");return c.length>0?u=parseInt(c[0].substring(19),10):t.browser==="firefox"&&l!==-1&&(u=2147483637),u},s=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){if(this._sctp=null,t.browser==="chrome"&&t.version>=76){let{sdpSemantics:l}=this.getConfiguration();l==="plan-b"&&Object.defineProperty(this,"sctp",{get(){return typeof this._sctp>"u"?null:this._sctp},enumerable:!0,configurable:!0})}if(n(arguments[0])){let l=r(arguments[0]),u=i(l),c=o(arguments[0],l),f;u===0&&c===0?f=Number.POSITIVE_INFINITY:u===0||c===0?f=Math.max(u,c):f=Math.min(u,c);let p={};Object.defineProperty(p,"maxMessageSize",{get(){return f}}),this._sctp=p}return s.apply(this,arguments)}}function Qn(e){if(!(e.RTCPeerConnection&&"createDataChannel"in e.RTCPeerConnection.prototype))return;function t(r,i){let o=r.send;r.send=function(){let a=arguments[0],l=a.length||a.size||a.byteLength;if(r.readyState==="open"&&i.sctp&&l>i.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+i.sctp.maxMessageSize+" bytes)");return o.apply(r,arguments)}}let n=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){let i=n.apply(this,arguments);return t(i,this),i},$e(e,"datachannel",r=>(t(r.channel,r.target),r))}function Ci(e){if(!e.RTCPeerConnection||"connectionState"in e.RTCPeerConnection.prototype)return;let t=e.RTCPeerConnection.prototype;Object.defineProperty(t,"connectionState",{get(){return{completed:"connected",checking:"connecting"}[this.iceConnectionState]||this.iceConnectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t,"onconnectionstatechange",{get(){return this._onconnectionstatechange||null},set(n){this._onconnectionstatechange&&(this.removeEventListener("connectionstatechange",this._onconnectionstatechange),delete this._onconnectionstatechange),n&&this.addEventListener("connectionstatechange",this._onconnectionstatechange=n)},enumerable:!0,configurable:!0}),["setLocalDescription","setRemoteDescription"].forEach(n=>{let r=t[n];t[n]=function(){return this._connectionstatechangepoly||(this._connectionstatechangepoly=i=>{let o=i.target;if(o._lastConnectionState!==o.connectionState){o._lastConnectionState=o.connectionState;let s=new Event("connectionstatechange",i);o.dispatchEvent(s)}return i},this.addEventListener("iceconnectionstatechange",this._connectionstatechangepoly)),r.apply(this,arguments)}})}function ki(e,t){if(!e.RTCPeerConnection||t.browser==="chrome"&&t.version>=71||t.browser==="safari"&&t.version>=605)return;let n=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(i){if(i&&i.sdp&&i.sdp.indexOf(`
a=extmap-allow-mixed`)!==-1){let o=i.sdp.split(`
`).filter(s=>s.trim()!=="a=extmap-allow-mixed").join(`
`);e.RTCSessionDescription&&i instanceof e.RTCSessionDescription?arguments[0]=new e.RTCSessionDescription({type:i.type,sdp:o}):i.sdp=o}return n.apply(this,arguments)}}function Xn(e,t){if(!(e.RTCPeerConnection&&e.RTCPeerConnection.prototype))return;let n=e.RTCPeerConnection.prototype.addIceCandidate;!n||n.length===0||(e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?(t.browser==="chrome"&&t.version<78||t.browser==="firefox"&&t.version<68||t.browser==="safari")&&arguments[0]&&arguments[0].candidate===""?Promise.resolve():n.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())})}function Yn(e,t){if(!(e.RTCPeerConnection&&e.RTCPeerConnection.prototype))return;let n=e.RTCPeerConnection.prototype.setLocalDescription;!n||n.length===0||(e.RTCPeerConnection.prototype.setLocalDescription=function(){let i=arguments[0]||{};if(typeof i!="object"||i.type&&i.sdp)return n.apply(this,arguments);if(i={type:i.type,sdp:i.sdp},!i.type)switch(this.signalingState){case"stable":case"have-local-offer":case"have-remote-pranswer":i.type="offer";break;default:i.type="answer";break}return i.sdp||i.type!=="offer"&&i.type!=="answer"?n.apply(this,[i]):(i.type==="offer"?this.createOffer:this.createAnswer).apply(this).then(s=>n.apply(this,[s]))})}var zm=tn(ea());function cc({window:e}={},t={shimChrome:!0,shimFirefox:!0,shimSafari:!0}){let n=fi,r=oc(e),i={browserDetails:r,commonShim:ta,extractVersion:Hn,disableLog:rc,disableWarnings:ic,sdp:zm};switch(r.browser){case"chrome":if(!mi||!di||!t.shimChrome)return n("Chrome shim is not included in this adapter release."),i;if(r.version===null)return n("Chrome shim can not determine version, not shimming."),i;n("adapter.js shimming chrome."),i.browserShim=mi,Xn(e,r),Yn(e,r),pi(e,r),ws(e,r),di(e,r),Os(e,r),Ds(e,r),Ls(e,r),Ms(e,r),Fs(e,r),Wn(e,r),Si(e,r),Ci(e,r),Jn(e,r),Qn(e,r),ki(e,r);break;case"firefox":if(!yi||!gi||!t.shimFirefox)return n("Firefox shim is not included in this adapter release."),i;n("adapter.js shimming firefox."),i.browserShim=yi,Xn(e,r),Yn(e,r),hi(e,r),gi(e,r),As(e,r),zs(e,r),Us(e,r),js(e,r),bs(e,r),Bs(e,r),Vs(e,r),Ks(e,r),Gs(e,r),Wn(e,r),Ci(e,r),Jn(e,r),Qn(e,r);break;case"safari":if(!vi||!t.shimSafari)return n("Safari shim is not included in this adapter release."),i;n("adapter.js shimming safari."),i.browserShim=vi,Xn(e,r),Yn(e,r),Qs(e,r),Ys(e,r),Ws(e,r),$s(e,r),Hs(e,r),Xs(e,r),Js(e,r),qs(e,r),Wn(e,r),Si(e,r),Jn(e,r),Qn(e,r),ki(e,r);break;default:n("Unsupported browser!");break}return i}var h0=cc({window:typeof window>"u"?void 0:window});var _;(function(e){e[e.cancelled=0]="cancelled",e[e.unknown=1]="unknown",e[e.invalid_argument=2]="invalid_argument",e[e.malformed=3]="malformed",e[e.deadline_exceeded=4]="deadline_exceeded",e[e.not_found=5]="not_found",e[e.bad_route=6]="bad_route",e[e.already_exists=7]="already_exists",e[e.permission_denied=8]="permission_denied",e[e.unauthenticated=9]="unauthenticated",e[e.resource_exhausted=10]="resource_exhausted",e[e.failed_precondition=11]="failed_precondition",e[e.aborted=12]="aborted",e[e.out_of_range=13]="out_of_range",e[e.unimplemented=14]="unimplemented",e[e.internal=15]="internal",e[e.unavailable=16]="unavailable",e[e.dataloss=17]="dataloss"})(_||(_={}));function fc(e,t,n){if(n)for(let[r,i]of Object.entries(n))if(typeof i=="string")e.append(r,i);else for(let o of i)e.append(r,o);return e.set("Content-Type",t?"application/json":"application/protobuf"),e.set("Accept",t?"application/json":"application/protobuf, application/json"),e}function pc(e){if(!rn(e)||typeof e.code!="string"||typeof e.msg!="string")return new Q("cannot read twirp error response",_[_.internal]);let t={};if(rn(e.meta))for(let[n,r]of Object.entries(e.meta))typeof r=="string"&&(t[n]=r);return new Q(e.msg,e.code,t)}function dc(e){let t={};return e.forEach((n,r)=>{r.toLowerCase()!=="content-type"&&r.toLowerCase()!=="content-length"&&(t.hasOwnProperty(r)?t[r].push(n):t[r]=n)}),t}var an=class{constructor(t){this.defaultOptions=t}mergeOptions(t){return os(this.defaultOptions,t)}unary(t,n,r){var i,o,s;let a=r,l=this.makeUrl(t,a),u=(i=a.fetchInit)!==null&&i!==void 0?i:{},c=a.sendJson?t.I.toJsonString(n,a.jsonOptions):t.I.toBinary(n,a.binaryOptions),f=new ht,p=new ht,g=new ht,S=new ht;return globalThis.fetch(l,Object.assign(Object.assign({},u),{method:"POST",headers:fc(new globalThis.Headers,!!a.sendJson,a.meta),body:c,signal:(o=r.abort)!==null&&o!==void 0?o:null})).then(v=>{f.resolve(dc(v.headers));let w;try{w=v.type}catch{}switch(w){case"error":case"opaque":case"opaqueredirect":throw new Q(`fetch response type ${v.type}`,_[_.unknown])}return v.ok?a.sendJson?v.json().then(m=>t.O.fromJson(m,a.jsonOptions),()=>{throw new Q("unable to read response body as json",_[_.dataloss])}):v.arrayBuffer().then(m=>t.O.fromBinary(new Uint8Array(m),a.binaryOptions),()=>{throw new Q("unable to read response body",_[_.dataloss])}):v.json().then(m=>{throw pc(m)},()=>{throw new Q("received HTTP "+v.status+", unable to read response body as json",_[_.internal])})},v=>{throw v instanceof Error&&v.name==="AbortError"?new Q(v.message,_[_.cancelled]):new Q(v instanceof Error?v.message:v)}).then(v=>{p.resolve(v),g.resolve({code:"OK",detail:""}),S.resolve({})}).catch(v=>{let w=v instanceof Q?v:new Q(v instanceof Error?v.message:v,_[_.internal]);w.methodName=t.name,w.serviceName=t.service.typeName,f.rejectPending(w),p.rejectPending(w),g.rejectPending(w),S.rejectPending(w)}),new Gn(t,(s=a.meta)!==null&&s!==void 0?s:{},n,f.promise,p.promise,g.promise,S.promise)}makeUrl(t,n){let r=n.baseUrl;r.endsWith("/")&&(r=r.substring(0,r.length-1));let i=t.name;return n.useProtoMethodName!==!0&&(i=mt(i),i=i.substring(0,1).toUpperCase()+i.substring(1)),`${r}/${t.service.typeName}/${i}`}clientStreaming(t){let n=new Q("Client streaming is not supported by Twirp",_[_.unimplemented]);throw n.methodName=t.name,n.serviceName=t.service.typeName,n}duplex(t){let n=new Q("Duplex streaming is not supported by Twirp",_[_.unimplemented]);throw n.methodName=t.name,n.serviceName=t.service.typeName,n}serverStreaming(t){let n=new Q("Server streaming is not supported by Twirp",_[_.unimplemented]);throw n.methodName=t.name,n.serviceName=t.service.typeName,n}};function bm(e,t){return new Promise((n,r)=>{let i=setTimeout(n,e);t&&t.addEventListener("abort",()=>{clearTimeout(i),r(new Error(t.reason))})})}var Bm=bm,Vm=e=>Math.floor(Math.random()*(2**32-e))+e,Km=e=>!0,na=class{map;emitted;unreliable;processing;logger;onmsg=async t=>{};constructor(t){this.logger=t.sub("queue"),this.map=new Map,this.emitted=new Map,this.unreliable=[],this.processing=!1}enqueue(t){if(!t.header?.reliable)this.unreliable.push(t);else{let n=t.header.seqnum;if(this.map.has(n)||this.emitted.has(n))return;this.map.set(n,[performance.now(),t])}this.processNext()}async processNext(){if(this.processing)return;let t=this.unreliable.pop();if(!t){let n=this.map.entries().next().value;if(!n)return;let[r,i]=n;this.map.delete(r),this.emitted.set(r,i);let[o,s]=i;if(!s.header)return;t=s}this.processing=!0;try{await this.onmsg(t)}catch(n){let r={msg:t};n instanceof Error&&(r.err=n),this.logger.error("error processing message",r)}this.processing=!1,this.processNext()}},xi=class{constructor(t,n){this.client=t;this.opts=n;this.asleep=n.asleep||Bm,this.randUint32=n.randUint32||Vm,this.isRecoverable=n.isRecoverable||Km,this.groupId=n.groupId,this.peerId=n.peerId,this.connId=this.randUint32(16),this.info={connId:this.connId,enableDiscovery:n.enableDiscovery},this.abort=new AbortController,this.logger=n.logger.sub("transport",{groupId:this.opts.groupId,peerId:this.opts.peerId,connId:this.connId}),this.streams=[]}groupId;peerId;connId;info;streams;abort;logger;asleep;randUint32;isRecoverable;onnewstream=t=>{};onclosed=t=>{};async listen(){for(;!this.abort.signal.aborted;)try{let t=await this.client.recv({info:this.info},{abort:this.abort.signal,timeout:6e4});new Promise(()=>this.handleMessages(t.response.msgs))}catch(t){let n="";if(t instanceof Error&&(n=t.message,!this.isRecoverable(t))){this.logger.debug("unrecoverable error, force closing",{err:t}),this.close(n);return}this.logger.error("failed to poll",{reason:n}),await this.asleep(1e3+Math.random()*100,this.abort.signal).catch(()=>{})}this.logger.debug("connection closed")}async close(t){t=t||"transport is closed",await Promise.all(this.streams.map(n=>n.close(t))),this.abort.abort(t),this.logger.debug("transport is now closed",{reason:t}),this.streams=[]}handleMessages(t){for(let n of t){if(this.abort.signal.aborted)return;if(!n.header)continue;if(n.header.otherConnId>=16&&n.header.otherConnId!=this.connId){this.logger.warn("received messages from a stale connection, ignoring",{receivedConnID:n.header.otherConnId});continue}let r=null;for(let i of this.streams)if(n.header.groupId===i.otherGroupId&&n.header.peerId===i.otherPeerId&&n.header.connId===i.otherConnId){r=i;break}if(!r){if(this.logger.debug(`session not found, creating one for ${n.header.peerId}:${n.header.connId}`),n.header.peerId==this.peerId){this.logger.warn("loopback detected, ignoring messages");return}r=new ra(this,n.header.groupId,n.header.peerId,n.header.connId,this.logger),this.streams.push(r),this.onnewstream(r)}r.recvq.enqueue(n)}}async connect(t,n,r){let i={payloadType:{oneofKind:"join",join:{}}},o={groupId:this.groupId,peerId:this.peerId,connId:this.connId,otherGroupId:t,otherPeerId:n,otherConnId:0,seqnum:0,reliable:!1},s=performance.now();for(;performance.now()-s<r;)if(await this.send(this.abort.signal,{header:o,payload:i}),await this.asleep(1e3+Math.random()*100,this.abort.signal).catch(()=>{}),this.streams.find(l=>l.otherGroupId===t&&l.otherPeerId===n))return;throw new Error("connect failed with a timeout")}async send(t,n){do{try{await this.client.send({msg:n},{abort:t,timeout:6e4});return}catch(r){if(r instanceof Error){let i=r.message;if(!this.isRecoverable(r)){this.close(i);return}}this.logger.warn("failed to send, retrying",{err:r})}await this.asleep(1e3+Math.random()*100,this.abort.signal).catch(()=>{})}while(!t.aborted&&!this.abort.signal.aborted)}onstreamclosed(t){this.streams=this.streams.filter(n=>n!=t),this.logger.debug("stream has been closed",{streams:this.streams})}},ra=class{constructor(t,n,r,i,o){this.transport=t;this.otherGroupId=n;this.otherPeerId=r;this.otherConnId=i;this.logger=o.sub("stream",{otherGroupId:n,otherPeerId:r,otherConnId:i}),this.groupId=t.groupId,this.peerId=t.peerId,this.connId=t.connId,this.abort=new AbortController,this.sendbuf={},this.recvq=new na(this.logger),this.recvq.onmsg=s=>this.handleMessage(s),this.lastSeqnum=0}logger;abort;recvq;sendbuf;groupId;peerId;connId;lastSeqnum;onpayload=async t=>{};onclosed=t=>{};async send(t,n){let r={header:{groupId:this.transport.groupId,peerId:this.transport.peerId,connId:this.transport.connId,otherGroupId:this.otherGroupId,otherPeerId:this.otherPeerId,otherConnId:this.otherConnId,seqnum:0,reliable:n},payload:{...t}};if(!n){await this.transport.send(this.abort.signal,r);return}this.lastSeqnum++,r.header.seqnum=this.lastSeqnum,this.sendbuf[r.header.seqnum]=r;let i=5,o=i,s=r.header.seqnum;for(;!this.abort.signal.aborted&&(await this.transport.send(this.abort.signal,r),await this.transport.asleep(5*1e3+Math.random()*100,this.abort.signal).catch(()=>{}),s in this.sendbuf);){if(o<=0){this.logger.warn("reached the maximum resend limit",{seqnum:s,resendLimit:i,reliable:n}),this.close(`${this.otherPeerId}:${this.otherConnId} is staled`);break}o--,this.logger.debug("resending",{...r.header})}}async handleMessage(t){let n=t.payload.payloadType;switch(n.oneofKind){case"ack":this.handleAck(n.ack);break;case"bye":this.close("received bye from other peer");break;case void 0:break;default:{if(t.header.reliable){let i={payloadType:{oneofKind:"ack",ack:{ackRanges:[{seqnumStart:t.header.seqnum,seqnumEnd:t.header.seqnum+1}]}}};this.logger.debug("ack",{seqnum:t.header.seqnum}),this.send(i,!1)}if(!t.payload)return;await this.onpayload(t.payload);break}}}handleAck(t){for(let n of t.ackRanges)for(let r=n.seqnumStart;r<n.seqnumEnd;r++)this.logger.debug("received ack",{seqnum:r}),delete this.sendbuf[r]}async close(t){this.abort.signal.aborted||(t=t||"session is closed",await this.send({payloadType:{oneofKind:"bye",bye:{}}},!1),this.abort.abort(t),this.transport.onstreamclosed(this),this.onclosed(t),this.logger.debug("sent bye to the other peer",{reason:t}))}};var ln=class e{constructor(t,n){this.name=t;n||(n={}),this.obj={...n,name:t}}obj;log(t,n,r){let i=r||{};t({ts:Date.now(),message:n,...this.obj,...i})}debug(t,n){this.log(console.debug,t,n)}info(t,n){this.log(console.info,t,n)}warn(t,n){this.log(console.warn,t,n)}error(t,n){this.log(console.error,t,n)}sub(t,n){return n||(n={}),new e(this.name+"."+t,{...this.obj,...n})}};var Gm=2,mc=5e3;function hc(e){return{candidate:e.candidate,sdpMid:e.sdpMid,sdpMLineIndex:e.sdpMLineIndex,usernameFragment:e.password}}function $m(e){switch(e){case 1:return"offer";case 2:return"answer";case 3:return"pranswer";case 4:return"rollback";default:throw new Error(`unexpected kind: ${e}`)}}function gc(e){switch(e){case"offer":return 1;case"answer":return 2;case"pranswer":return 3;case"rollback":return 4;default:throw new Error(`unexpected sdp type: ${e}`)}}var Ti=class extends RTCPeerConnection{constructor(n,r){super(r);this.stream=n;this.makingOffer=!1,this.pendingCandidates=[],this.impolite=this.stream.connId>this.stream.otherConnId,this.abort=new AbortController,this.logger=new ln("session",{role:this.impolite?"impolite":"polite"}),this.generationCounter=0,this.iceRestartCount=0,this.lastIceRestart=0,this.timers=[],n.onpayload=o=>this.handleMessage(o),n.onclosed=o=>this.close(o),this.oniceconnectionstatechange=()=>{this.logger.debug("iceconnectionstate changed",{connectionstate:this.connectionState,iceconnectionstate:this.iceConnectionState})};let i=performance.now();this.onconnectionstatechange=()=>{switch(this.logger.debug("connectionstate changed",{connectionstate:this.connectionState,iceconnectionstate:this.iceConnectionState}),this.connectionState){case"connecting":i=performance.now();break;case"connected":{let o=performance.now()-i;this.logger.debug(`it took ${o}ms to connect`),this.iceRestartCount=0;break}case"disconnected":this.triggerIceRestart();break;case"failed":this.triggerIceRestart();break;case"closed":break}},this.onnegotiationneeded=()=>this.handleNegotiation(),this.onicecandidate=({candidate:o})=>{let s={candidate:"",sdpMLineIndex:0,sdpMid:""};if(!o||o.candidate===""){this.logger.debug("ice gathering is finished");return}s.candidate=o.candidate,s.sdpMLineIndex=o.sdpMLineIndex??void 0,s.sdpMid=o.sdpMid??void 0,s.username=o.usernameFragment??void 0,this.sendSignal({data:{oneofKind:"iceCandidate",iceCandidate:s}})}}makingOffer;impolite;pendingCandidates;logger;abort;generationCounter;iceRestartCount;lastIceRestart;timers;closeReason;triggerIceRestart(){if(!this.impolite)return;let n=performance.now()-this.lastIceRestart;if(n<mc){let r=mc-n,i=setTimeout(()=>{this.triggerIceRestart(),this.timers=this.timers.filter(o=>o===i)},r);return}this.connectionState!=="connected"&&(this.iceRestartCount>=Gm&&this.close(),this.logger.debug("triggered ICE restart"),this.restartIce(),this.generationCounter++,this.iceRestartCount++,this.lastIceRestart=performance.now())}sendSignal(n){this.stream.send({payloadType:{oneofKind:"signal",signal:{...n,generationCounter:this.generationCounter}}},!0)}start(){this.handleNegotiation()}close(n){if(this.abort.signal.aborted)return;this.abort.abort(n);for(let i of this.timers)clearTimeout(i);this.timers=[],this.logger.debug("closing"),this.stream.close(),this.closeReason=n,super.close();let r=new Event("connectionstatechange");this.dispatchEvent(r)}async handleNegotiation(){try{if(this.makingOffer=!0,this.logger.debug("creating an offer"),await this.setLocalDescription(),!this.localDescription)throw new Error("expect localDescription to be not empty");this.sendSignal({data:{oneofKind:"sdp",sdp:{kind:gc(this.localDescription.type),sdp:this.localDescription.sdp}}})}catch(n){n instanceof Error&&this.logger.error("failed in negotiating",{err:n})}finally{this.makingOffer=!1}}async handleMessage(n){if(this.abort.signal.aborted){this.logger.warn("session is closed, ignoring message");return}switch(n.payloadType.oneofKind){case"signal":await this.handleSignal(n.payloadType.signal);break;case"bye":this.close();break;case"join":break}}async handleSignal(n){if(n.generationCounter<this.generationCounter){this.logger.warn("detected staled generationCounter signals, ignoring");return}let r=n.data;if(n.generationCounter>this.generationCounter){if(this.logger.debug("detected new generationCounter",{otherGenerationCounter:n.generationCounter,generationCounter:this.generationCounter,msg:r}),r.oneofKind==="iceCandidate"){let a=hc(r.iceCandidate);this.pendingCandidates.push(a),this.logger.warn("expecting an offer but got ice candidates during an ICE restart, adding to pending.",{ice:a,msg:r});return}this.generationCounter=n.generationCounter}if(r.oneofKind==="iceCandidate"){let a=hc(r.iceCandidate);this.pendingCandidates.push(a),await this.checkPendingCandidates();return}if(r.oneofKind!="sdp")return;let i=r.sdp;this.logger.debug("received a SDP signal",{sdpKind:i.kind});let o=i.kind===1&&(this.makingOffer||this.signalingState!=="stable");if(this.impolite&&o){this.logger.debug("ignored offer");return}if(this.logger.debug("creating an answer"),await this.setRemoteDescription({type:$m(i.kind),sdp:i.sdp}),await this.checkPendingCandidates(),i.kind===1){if(await this.setLocalDescription(),!this.localDescription)return;this.sendSignal({data:{oneofKind:"sdp",sdp:{kind:gc(this.localDescription.type),sdp:this.localDescription.sdp}}})}}async checkPendingCandidates(){if(!["connected","new","disconnected","failed"].includes(this.connectionState)||!this.remoteDescription){this.logger.debug("wait for adding pending candidates",{iceConnectionState:this.iceConnectionState,connectionState:this.connectionState,remoteDescription:this.remoteDescription,pendingCandidates:this.pendingCandidates.length});return}for(let r of this.pendingCandidates)!r.candidate||r.candidate===""||(await this.addIceCandidate(r),this.logger.debug(`added ice: ${r.candidate}`));this.pendingCandidates=[]}id(){return`${this.stream.otherPeerId}:${this.stream.otherConnId}`}};var ia=class{transport;logger;onnewsession=t=>{};sessions;peerId;constructor(t,n,r){this.peerId=n.peerId,this.logger=new ln("peer",{peerId:this.peerId}),this.sessions=[];let i={iceTransportPolicy:"all",iceCandidatePoolSize:0,iceServers:n.iceServers};this.transport=new xi(t,{enableDiscovery:!1,groupId:n.groupId,peerId:n.peerId,logger:this.logger,isRecoverable:r}),this.transport.onnewstream=o=>{let s=new Ti(o,i);this.sessions.push(s),this.onnewsession(s)}}start(){this.transport.listen()}stop(){this.transport.close();for(let t of this.sessions)t.close();this.sessions=[]}connect(t,n,r){return this.transport.connect(t,n,r)}},Hm=[_[_.permission_denied],_[_.invalid_argument],_[_.aborted],_[_.bad_route],_[_.dataloss],_[_.malformed],_[_.not_found],_[_.unauthenticated]];function Wm(e){return e instanceof Q?!Hm.includes(e.code):!0}async function yc(e){let t=new an({baseUrl:e.baseUrl,sendJson:!1,interceptors:[{interceptUnary(a,l,u,c){return c.meta||(c.meta={}),c.meta.Authorization=`Bearer ${r}`,a(l,u,c)}}]}),n=new ci(t),r=e.token,i=await n.prepare({}),o=[...e.iceServers||[]];for(let a of i.response.iceServers)o.push({urls:a.urls,username:a.username,credential:a.credential});return new ia(n,{...e,iceServers:o},Wm)}var et=tn(zn()),Jm="https://demo.lukas-coding.us/twirp",vc="default",Qm=1e4;function Sc(e){let t=(0,et.useRef)(null),[n,r]=(0,et.useState)({}),i=(0,et.useCallback)((l,u)=>{r(c=>{let f=c[l.id()]||{key:"",sess:l,remoteStream:null,loading:!0};return u(f),f.key=`${l.id()}:${performance.now()}`,{...c,[l.id()]:f}})},[]),o=(0,et.useCallback)(async l=>{if(t.current)return;let c=await(await fetch(`/auth?id=${l}`,{method:"GET"})).text(),f=await yc({baseUrl:Jm,peerId:l,groupId:vc,token:c,iceServers:[]});return f.onnewsession=p=>{if(p.addEventListener("track",({streams:g})=>{console.log("ontrack",g[0]),i(p,S=>{S.remoteStream=g[0]})}),p.addEventListener("connectionstatechange",()=>{console.log(p.connectionState);let g=p.connectionState!=="connected";i(p,S=>{S.loading=g}),p.connectionState==="closed"&&r(S=>{let v={...S};return delete v[p.id()],v})}),e)for(let g of e.getTracks())p.addTrack(g,e);p.start(),i(p,()=>{})},t.current=f,f.start(),()=>{f.stop(),t.current=null}},[e,i]),s=(0,et.useCallback)(()=>{t.current&&(t.current.stop(),t.current=null)},[]),a=(0,et.useCallback)(l=>{t.current&&t.current.connect(vc,l,Qm)},[]);return{start:o,stop:s,connect:a,sessions:n}}function oa(){let[e,t]=(0,L.useState)(""),[n,r]=(0,L.useState)(""),[i,o]=(0,L.useState)(null),[s,a]=(0,L.useState)(!1),l=Sc(i);return(0,L.useEffect)(()=>{(async()=>{let u=await navigator.mediaDevices.getUserMedia({video:!0});o(u)})()},[]),(0,L.useEffect)(()=>{s?l.start(e):l.stop()},[s,e,l]),L.default.createElement(L.default.Fragment,null,L.default.createElement("nav",{className:"bottom"},!i||!s?L.default.createElement("form",{onSubmit:u=>{u.preventDefault(),a(!0)},className:"responsive"},L.default.createElement("nav",{className:"center-align"},L.default.createElement("div",{className:"field small border round"},L.default.createElement("input",{size:6,type:"text",placeholder:"You",value:e,onChange:u=>t(u.target.value)})),L.default.createElement("button",{type:"submit",disabled:!i,value:"Go Live"},"Go Live"))):L.default.createElement("form",{onSubmit:u=>{u.preventDefault(),l.connect(n)}},L.default.createElement("nav",{className:"max center-align"},L.default.createElement("div",{className:"field small border round"},L.default.createElement("input",{size:6,type:"text",placeholder:"Other",value:n,onChange:u=>r(u.target.value)})),L.default.createElement("button",{type:"submit"},"Connect"),L.default.createElement("button",{className:"secondary",onClick:()=>a(!1)},"Stop")))),L.default.createElement("main",{className:"responsive max grid"},L.default.createElement(Cc,{className:"s12 m6 no-padding",stream:i,loading:!1,title:e?`${e} (me)`:"me"}),Object.entries(l.sessions).map(([u,c])=>L.default.createElement(Cc,{key:c.key,className:"s12 m6 no-padding",title:u,stream:c.remoteStream,loading:c.loading}))))}function Cc(e){let t=(0,L.useRef)(null);(0,L.useEffect)(()=>{t.current&&(t.current.srcObject=e.stream)},[e.stream]);let n=e.loading||e.stream===null;return L.default.createElement("article",{className:e.className},n?L.default.createElement("progress",{className:"circle large"}):L.default.createElement("video",{className:"responsive max",ref:t,autoPlay:!0}),L.default.createElement("div",{className:"absolute bottom left right padding white-text"},L.default.createElement("nav",null,L.default.createElement("h5",null,e.title))))}var Kd=tn(Vd()),Gd=tn(zn()),qg=(0,Kd.createRoot)(document.getElementById("root"));qg.render(Gd.default.createElement(oa,null));})();
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
